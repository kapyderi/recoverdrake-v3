#!/bin/bash
#script creado por: franklin aliaga
#script mejorado y actualizado por: Ivan Vergés (microstudi)
#script ampliado y automatizado por: Daniel Navarro y Adrian Ortiz (http://dukkon.blogspot.com)
#script adaptado a Mandriva/Mageia por: kapyderi (blogdrake.net)

#Plug-in Name: Escaner de intrusos en Red
#source libs/liblemurs-init.so
####################
#Configuracion:   
####################

####################################################################################
#Aqui pon las IPs , Hosts o MACs que conozcas en tu red y se omitirán en los avisos#
#Solo en modo LOG y/o silencioso. El modo gráfico tiene su propia lista modificable#
####################################################################################

PCs_CONOCIDOS=( "192.168.1.1" "personal-desktop" "01:23:45:67:89:10" "cristian-desktop" )

######################
#Fin de configuracion#
######################

#######################################################################
# LICENCIA DE USO
#######################################################################     
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see «http://www.gnu.org/licenses/».
#######################################################################

#################################
#MENU DE ARGUMENTOS DE EJECUCION#
#################################

#Por cada argumento (arg) del total.
for arg in $@; do
	#Muestra la ayuda.
	if [ "$arg" = "-h" ]; then
		echo "notifi-net por Kapyderi."
		echo "Este programa busca las IPs conectadas de una red e informa de las desconocidas."
		echo "Uso:"
		echo "	-h 	Muestra esta ayuda."
		echo "	-l 	Modo Log, pone una linea por host intruso con la fecha solamente."
		echo "	   	No escribe ninguna otra información. Ni notificara al escritorio."
		echo "	   	Puedes encontrar el archivo de Log en $HOME/notifi-net.log/"
		echo "	-s 	Modo silencioso. No se usan los programas que informan al escritorio."
		echo "	   	Solo se notifica al escritorio si hay alguna intrusión."
		echo "-ls, -sl  Igual que -s -l, Activa el modo log-silencioso. Se muestra aviso"
		echo "		SOLO si hay intrusos, además se genera un Log."
		exit
	fi
	#Activa el modo Log.
	if [ "$arg" == "-l" ]; then
		logmode=on
	fi
	#Activa el modo silencioso
	if [ "$arg" == "-s" ]; then
		silentmode=on
	fi
	#Activa el modo log-silencioso
	if [ "$arg" == "-ls" ] || [ "$arg" == "-sl" ]; then
		silentmode=on
		logmode=on
	fi
done

#################################
#COMPROBACION DE MODOS ACTIVADOS#
#################################

if [ "$silentmode" = "on" ] && [ "$logmode" = "on" ]
	then
	echo Notifi-net · Iniciando modo log-silencioso 

elif [ "$silentmode" = "on" ]
	then
	echo Notifi-net · Iniciando modo silencioso 

elif [ "$logmode" = "on" ]
	then
	echo Notifi-net · Iniciando modo log 

#Si se ejecuta en modo gráfico se activa la GUI.
else
	guimenu=on
	#Se vacia el array de IPs conocidas, para usar el archivo generado por la GUI y el usuario.
	PCs_CONOCIDOS=( )
	echo Notifi-net · Iniciando modo gráfico
fi

######################
#OPCIONES DEL USUARIO#
######################

if [ $guimenu ]
	then #En el modo Gráfico se iniciará un pequeño menú.
	selection=`zenity --window-icon=$icon --title="Lemur-search: Notifinet" --height=190 --width=401 --list --print-column=ALL --text="" --column="Elije una opción" "Escanear red" "Añadir equipo conocido" "Eliminar equipo conocido"`

	#Si se cancela el menú, sale del script.
	if [ $? != 0 ];	then exit 0; fi

	#Archivo con lista de IPs conocidas.
	if [ ! -d $HOME/.lemur-search/conf/notifi-net/ ]; then mkdir -p $HOME/.lemur-search/conf/notifi-net/; fi
	ip_config=$HOME/.lemur-search/conf/notifi-net/notifi-net-trusted-ips

	if [ ! "$selection" ]; then selection="Escanear red"; fi
fi

##########################
#LECTURA DE IPs CONOCIDAS#
##########################

if [ "$selection" = "Escanear red" ]
	then #Si no existe el archivo de IPs conocidas, se crea en este punto.
	if [ ! -f  $ip_config ]; then touch $ip_config; fi

	#Lee las lineas del archivo de IPs conocidas almacenandolas en el array de IPs conocidas.
	while read line
	do PCs_CONOCIDOS[${#PCs_CONOCIDOS[*]}]=$line
	done < $ip_config

##########################
#ADICION DE IPs CONOCIDAS#
##########################

elif [ "$selection" = "Añadir equipo conocido" ]
	then #Entrada de la IP/Host de confianza/conocido que es enviado al final del archivo de IPs conocidas.
	zenity --window-icon=$icon --title="Lemur-search: Notifinet" --entry --text="Escribe la IP, Host o MAC del equipo que quieras omitir del escaneo de red:" --entry-text="" >> $ip_config
	bash "$0" #Nueva ejecucion del script para actualizarse.
	exit 0 #Cierra esta sesión del script.

##########################
#BORRADO DE IPs CONOCIDAS#
##########################

elif [ "$selection" = "Eliminar equipo conocido" ]
	then #Lee las lineas del archivo de IPs conocidas almacenandolas en la variable.
	while read line
	do
		iptodel="$iptodel$line\n"
	done < $ip_config
	
	#Se añade tambien la cadena "Volver".
	iptodel="${iptodel}Volver"

	#Se muestra la lista con los contenidos de la variable.
	iptodel=`echo -e $iptodel | zenity --window-icon=$icon --title="Lemur-search: Notifinet" --height=190 --width=401 --list --print-column=ALL --text="Elige el equipo a borrar" --column="Equipos conocidos:"`

	#Si acepta y no elige "Volver".
	if [ $? -eq 0 ] && [ $iptodel != "Volver" ]
		then #Se pide confirmación para eliminar la IP de la lista.
		zenity --window-icon=$icon --title="Lemur-search: Notifinet" --question --text="Estas seguro que quieres quitar el equipo $iptodel?"

		#Si se acepta, filtra el contenido del archivo de IPs conocidas, menos la seleccionada a un archivo temporal.
		if [ $? -eq 0 ]; then cat $ip_config | grep -v "$iptodel" > /tmp/.ip_config
			#Substituye el archivo de IPs conocidas por el nuevo archivo, el temporal.
			mv /tmp/.ip_config $ip_config
		fi 
	fi
	
	#Inicia un nuevo script, actualizado y cierra el actual.
	bash "$0"; exit 0

#################################
#FIN DE BORRADO DE IPs CONOCIDAS#
#################################

fi #Fin de selector de opciones gráficas.

###########################
#OBTENCION DEL DISPOSITIVO#
###########################

#Se guarda en un archivo temporal la informacion de ifconfig.
ifconfig > /tmp/.device

#Se guarda el valor del patron que usaremos de filtro.
if [ "$LANG" = "es_ES.UTF-8" ]; then difus="Bcast:"; else difus="Bcast:"; fi 

#Por cada linea leida
while read line
	
	#Busca el patron en la linea
	do checkdev=`echo $line | grep $difus`
	
	if [ "$checkdev" ] #Si de encuentra el patron, la linea anterior contiene la interfaz de red activa.
		#Extrae la primera palabra de la linea anterior.
		then DEVICE=`echo "$line2" | awk '{print $1}'`		
	fi

	#Conserva la linea actual como $line2 para la siguiente lectura de linea del "while".
	line2=$line

#El archivo temporal es la entrada para "while read".
done < /tmp/.device 

#Borramos el archivo temporal.
rm /tmp/.device

echo "Interfaz usada: $DEVICE"

########################################
#OBTENCION DE IPs CONOCIDAS DEL SISTEMA#
########################################

#Filtramos la salida de ifconfig buscando la Direccion de internet (IP) y la aislamos con awk y cut en una variable .
ip=$(/sbin/ifconfig "$DEVICE" | grep "Direc. inet" | awk '{print $2}' | cut -c 6-)
#Si no se obtiene nada se hace la busqueda usando el patron Intenet address (inet addr).
if [ "x$ip" = "x" ]; then ip=$(/sbin/ifconfig "$DEVICE" | grep "inet addr" | awk '{print $2}' | cut -c 6-); fi

echo "Mi ip: $ip"

#Calculamos la ip del router
rip=${ip%.*}
rip=$rip.1

echo "Mi red: $rip/24"

#Añadimos la IP del router al princpio del array.
IPS_CONOCIDAS=( "$rip" ${PCs_CONOCIDOS[*]})

#añadimos nuestra IP al final del array.
IPS_CONOCIDAS[${#IPS_CONOCIDAS[*]}]=$ip

echo "Los equipos siguientes NO se tienen en cuenta: "${IPS_CONOCIDAS[*]}

#Obtener la edicion del SO
release=`lsb_release -r | awk '{print $2}'`
rel_year=${release%.*}
if [ "$release" = "1" ] || [ $rel_year > 1 ]; then karmico=on; else karmico=off; fi
if [ "$karmico" = "on" ]; then ok=Instalar; else ok=Aceptar; fi

######################################
#COMPROBACIÓN DE DEPENDENCIAS SIN GUI#
######################################

#Comprobar si existen los programas que usaremos.
#Cuando se inicia en modo silecioso o Log advertirá la falta de estos y saldrá.
if [ "$silentmode" = "on" ] || [ "$logmode" = "on" ]
	then
	if [ ! -x /usr/bin/nmap ]; then
		echo "El programa nmap no está instalado!"
		exit=on
	fi
	if [ ! -x /usr/bin/notify-send ]; then
		echo "El paquete libnotify no está instalado!"
		exit=on
	fi
	if [ ! -x /usr/bin/bc ]; then
		echo "El paquete bc no está instalado!"
		exit=on
	fi
	if [ ! -x /usr/bin/nmblookup3 ]; then
		echo "El paquete samba-common no está instalado!"
		exit=on
	fi
	if [ ! -x /sbin/arp ]; then
		echo "El paquete net-tools no está instalado!"
		exit=on
	fi

######################################
#COMPROBACIÓN DE DEPENDENCIAS CON GUI#
######################################

else #En el modo gráfico avisara con una ventana e intentará instalarlos.

	if [ ! -x /usr/bin/nmap ]; then
		echo "El programa nmap no está instalado!"
		zenity --window-icon=$icon --title="Lemur-search: Notifinet" --question --text="Se necesita el paquete <b>nmap</b> para un correcto funcionamiento." --ok-label="$ok"
		#Si acepta el aviso instalará las dependencias.
		if [ $? -eq 0 ] && [ "$karmico" = "on" ]; then urpmi nmap; restart=on
		else exit 0
		fi
	fi
	if [ ! -x /usr/bin/nmblookup3 ]; then
		echo "El paquete samba-common no está instalado!"
		zenity --window-icon=$icon --title="Lemur-search: Notifinet" --question --text="Se necesita el paquete <b>samba-common</b> para un correcto funcionamiento." --ok-label="$ok"
		#Si acepta el aviso instalará las dependencias.
		if [ $? -eq 0 ] && [ "$karmico" = "on" ]; then urpmi samba-common samba-client; restart=on
		else exit 0
		fi
	fi
	if [ ! -x /usr/bin/bc ]; then
		echo "El paquete bc no está instalado!"
		zenity --window-icon=$icon --title="Lemur-search: Notifinet" --question --text="Se necesita el paquete <b>bc</b> para un correcto funcionamiento." --ok-label="$ok"
		#Si acepta el aviso instalará las dependencias.
		if [ $? -eq 0 ] && [ "$karmico" = "on" ]; then urpmi bc; restart=on
		else exit 0
		fi
	fi
	if [ ! -x /usr/bin/notify-send ]; then
		echo "El paquete libnotify no está instalado!"
		zenity --window-icon=$icon --title="Lemur-search: Notifinet" --question --text="Se necesita el paquete <b>libnotify</b> para un correcto funcionamiento." --ok-label="$ok"
		#Si acepta el aviso instalará las dependencias.
		if [ $? -eq 0 ] && [ "$karmico" = "on" ]; then urpmi libnotify; restart=on
		else exit 0
		fi
	fi
	if [ ! -x /sbin/arp ]; then
		echo "El paquete net-tools no está instalado!"
		zenity --window-icon=$icon --title="Lemur-search: Notifinet" --question --text="Se necesita el paquete <b>net-tools</b> para un correcto funcionamiento." --ok-label="$ok"
		#Si acepta el aviso instalará las dependencias.
		if [ $? -eq 0 ] && [ "$karmico" = "on" ]; then urpmi net-tools; restart=on
		else exit 0
		fi
	fi
fi

#############################################
#FIN DE COMPROBACIÓN DE DEPENDENCIAS CON GUI#
#############################################

if [ "$restart" = "on" ]; then bash "$0"; exit 0
elif [ "$exit" = "on" ]; then exit 0; fi

#########################
#ESCANEO DE LA RED LOCAL#
#########################

#Si se ejecuta en modo grafico (sin argumentos), se muestra una ventana de aviso sobre la demóra del escaneo.
if [ "$logmode" != "on" ] && [ "$silentmode" != "on" ]
	then
	echo "Buscando equipos..."
	zenity --window-icon=$icon --title="Lemur-search: Notifinet" --info --text="Escaneando la red.\nUn momento por favor..." --timeout=3 &
else 
	echo "Buscando equipos..."
fi

#Con este comnado nmap nos muestra los hosts conectados.
#Los guarda en el fichero "-", que es la salida estandard.
#Y la redirecciona a la variable $HOST_IPS.
HOST_IPS=$(/usr/bin/nmap -sP ${IPS_CONOCIDAS[0]}/24 -oG -)

############################
#AJUSTES Y CALCULOS RÁPIDOS#
############################

#Aqui cortamos el formato obtenido anteriormente de archivo para solo obtener las ip's separadas por lineas.
IPS=$(echo "$HOST_IPS" | grep Host | cut -c 7-21 | tr -d "\()")

#Capturamos el número de lineas que tiene nuestra variable.
#En este caso, la cantidad de ip's que hay en ella.
contador=$(echo "$IPS" | wc -l - | cut -c 1-2)
total=$(expr $contador - 1)

#Definimos la ruta al archivo temporal de IPs desconocidas y creamos el archivo.
fblist=$HOME/.blacklist
touch $fblist

#En el modo Log se guarda la fecha de ejecucion y se crea otro archivo temporal.
date=`date  --rfc-3339=seconds`
#Se borra la franja horaria de la fecha.
date=${date%+*}
#Definimos la ruta al archivo temporal de Logs y creamos el archivo.
lfblist=$HOME/.logblacklist
touch $lfblist

#Esto es para que el script tenga acceso a las X desde crontab.
#cron/crontab se inicia antes que la sesión gráfica, así que no tendría acceso a notifi-send por ejemplo.
export DISPLAY=:0
export XAUTHORITY="$HOME/.Xauthority"






////// ME QUE QUEDADO POR AQUI REVISANDO ///////






###################################
#FIN DE AJUSTES Y CALCULOS RÁPIDOS#
###################################

#Bucle de comparación entre las IPs encontradas / IPs conocidas. Se crea una variable de control de bucle.
var=0
#Mientras la variable sea menor al total de IPs encontradas ($total).
while [ $var -le $total ]; do

	#Valor necesario para que el bucle while llegue al final.
	SALTA_BUCLE=0

	#Incremento de $var en uno por cada vuelta.
	let var=$var+1

	#Calculo del porcentaje completado de IPs para comparar.
	percent=$(($var*100))
	percent=`echo $percent/$contador | bc`
	if [ $percent == 100 ]; then percent=99; fi

	#Capturamos IP conectada según el número de veces que se haya ejecutado el bucle.
	linea=$(echo "$IPS" | sed -n "$var p")

	##############################
	#OBTENCION DE INFO DEL ROUTER#
	##############################
	
	#Cuando la IP es la del router.
	if [ $linea == $rip ]
		then name=router
		#Cuando no hay Log ni modo silencioso, se mostrara un progreso, mientras se consulta la MAC.
		if [ "$logmode" != on ] && [ "$silentmode" != on ]
			then mac=`arp -a $linea | sed -n "1 p" | awk '{print $4}' | tee >(zenity --window-icon=$icon --title="Lemur-search: Notifinet" --progress --percentage=$percent --auto-close --auto-kill --text="Comprobando equipo:\nIP: $linea")`
		#Si el modo Log o Silencioso están activos, solo se consulta, sin progreso gráfico.
		else mac=`arp -a $linea | sed -n "1 p" | awk '{print $4}'`
		
		fi

	##############################
	#OBTENCION DE INFO DEL EQUIPO#
	##############################

	#Cuando la IP es la propia.
	elif [ $linea == $ip ]
		#Obtencion del Hostname y MAC propios, innecesario, pero elegante y rápido.
		then name=`hostname`
		mac=`ifconfig $DEVICE | sed -n "1 p" | awk '{print $5}'`

	############################
	#OBTENCION DE INFO DE LA IP#
	############################

	#Cuando la IP no pertenece al equipo propio ni al router.
	else	
		if [ "$logmode" != on ] && [ "$silentmode" != on ]
			then #Cuando no hay Log ni modo silencioso, se mostrara un progreso, mientras se consultan la MAC y el Hostname. 
			arp=`arp -a $linea | tee >(zenity --window-icon=$icon --title="Lemur-search: Notifinet" --progress --percentage=$percent --auto-close --auto-kill --text="Comprobando equipo:\nIP: $linea")`

		else #En modo Log o silencioso, solo se captura la información, sin mostrar progreso.
			arp=`arp -a $linea`
		fi
		
		#Aislar el Hostname y la MAC de la salida de "arp"
		name=`echo $arp | sed -n "1 p" | awk '{print $1}'`
		name=${name%.local}
		mac=`echo $arp | sed -n "1 p" | awk '{print $4}'`

		###############################
		#FIN OBTENCION DE INFO CON ARP#
		###############################
		
		#Si no se encontró un nombre se intentará con "nmblookup3", en modo GUI mostrara un porcentaje.
		if [ "$name" == "?" ] && [ "$logmode" != "on" ] && [ "$silentmode" != "on" ]
			then name=`nmblookup3 -A $linea | tee >(zenity --window-icon=$icon --title="Lemur-search: Notifinet" --progress --percentage=$percent --auto-close --auto-kill --text="Comprobando equipo:\nIP: $linea\nMAC: $mac") > /tmp/.namehost`

		#En modo Log o silencioso, busca el hostname de la IP encontrada, sin mostrar el porcentaje.
		elif [ "$name" == "?" ]
			then name=`nmblookup3 -A $linea > /tmp/.namehost`

		fi
		
		if [ -e /tmp/.namehost ] #Si se usó "nmblookup3", se comprobará que no se extraiga el nombre de GRUPO en lugar del Nombre de Equipo.
			then
			#Se filtra la 2da linea de la salida de "nmblookup3".
			name=`cat /tmp/.namehost | sed -n "2 p"`
			#Busca el patron "GROUP", muy poco interesante.
			checkgrp=`echo "$name" | grep "GROUP"`
			
			#Si la linea segunda hace referencia al GRUPO, se filtrará la 3ra linea.
			if [ "$checkgrp" ]
				then
				name=`cat /tmp/.namehost | sed -n "3 p" | awk '{print $1}'`
			else 
				name=`cat /tmp/.namehost | sed -n "2 p" | awk '{print $1}'`
			fi
			
			#Aqui borramos el temporal con la infomarcion de nmblookup3, y filtramos la primera palabra, el Hostname.
			rm /tmp/.namehost
		fi
		
		#Si sigue sin encontrar el nombre ("No" reply for xxx.xxx.xxx.xxx), se usara como nombre un interrogante "?"
		if [ "$name" = "No" ]; then name="?"; fi
	
	fi

	################################
	#FIN OBTENCION DE INFO DE LA IP#
	################################

	###########################################
	#COMPARACIÓN IP ENCONTRADA / IPs CONOCIDAS#
	###########################################

	#Por cada IP en el array de IPs conocidas (la llameremos $i).
	for i in ${IPS_CONOCIDAS[*]}
	do
		if [ "$i" = "$name" ]; then #Si es igual al Hostname de la IP encontrada.
			echo "($percent%) Equipo conocido ==> Host: $name IP: $linea MAC: $mac"
			#Valor necesario para que el bucle se repita, sin tener que llegar al final.
			SALTA_BUCLE=1
			break #Sale del bucle "for".
		elif [ $i == $linea ]; then #Si es igual a la IP encontrada.
			echo "($percent%) Equipo conocido ==> Host: $name IP: $linea MAC: $mac"
			#Valor necesario para que el bucle se repita, sin tener que llegar al final.
			SALTA_BUCLE=1
			break #Sale del bucle "for".
		elif [ "$i" = "$mac" ]; then #Si es igual a la MAC de la IP encontrada.
			echo "($percent%) Equipo conocido ==> Host: $name IP: $linea MAC: $mac"
			#Valor necesario para que el bucle se repita, sin tener que llegar al final.
			SALTA_BUCLE=1
			break #Sale del bucle "for".
		fi
	done

	########################################
	#ARCHIVADO DE IP ENCONTRADA NO CONOCIDA#
	########################################

	#Si el valor es 1 (activado), continua el bucle "while" desde el principio, saltandose lo que sigue.
	if [ "$SALTA_BUCLE" == "1" ]; then continue; fi
	
	in=$(($in+1))
	
	#Se guarda la información de la ip en el archivo temporal de intrusos
	blist=`echo -e "$in ==> Host: $name\n$in ==> IP: $linea\n$in ==> MAC: $mac\n______________________" >> $fblist`
	
	#En el modo Log guardara otra copia con la fecha en otro temporal
	echo -e "$date ==> Host: $name IP: $linea MAC: $mac" >> $lfblist

	#Muestra porcentaje con información
	echo "($percent%) INTRUSO conectado ==> Host: $name IP: $linea MAC: $mac"

done

#Cuenta el total de IPs encontradas y desconocidas.
var=`cat $fblist | wc -l`

#####################
#ENVIO DE RESULTADOS#
#####################

#Sin coincidencias 
if [ "$var" = "0" ]
	then icon=/usr/share/icons/gnome/32x32/status/security-medium.png
	summ="No hay equipos desconocidos conectados"
	echo "$summ"
	#En modo gráfico, se envía un mensaje via notify-send. 
	if [ "$logmode" != "on" ] && [ "$silentmode" != "on" ]; then /usr/bin/notify-send -i $icon "$summ"; echo Ninguno

	#En modo silecioso o log, se envía un mensaje via terminal.
	else echo Ninguno
	
	fi

#Si se encuentran coincidencias.
else icon=/usr/share/icons/gnome/32x32/status/important.png
	summ="Equipos desconocidos conectados a la red:"
	blist=`cat $fblist`
	echo "$summ"
	echo -e "$blist"
	#El el modo gráfico o silecioso, se anuncian a traves de notify-send.
	if [ "$logmode" != "on" ]
		then /usr/bin/notify-send -i $icon "$summ" "$blist"
		cat $lfblist >> $HOME/.lemur-search/conf/notifi-net/notifi-net.log
	
	#El el modo log-silecioso, se anuncian a traves de notify-send y se archiva.
	elif [ "$logmode" = "on" ] && [ "$silentmode" = "on" ]
		then /usr/bin/notify-send -i $icon "$summ" "$blist"
		cat $lfblist >> $HOME/notifi-net.log
	#El el modo log, solo se archiva.
	else  cat $lfblist >> $HOME/notifi-net.log
	fi
fi

#Se limpia el rastro borrando los archivos temporales.
rm $fblist
rm $lfblist
