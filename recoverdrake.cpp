#include "recoverdrake.h"
#include "cierre.h"
#include "ui_recoverdrake.h"
#include "drakesistema.h"
#include "drakeprocesos.h"
#include "acceso.h"
#include "claves.h"
#include "help.h"
#include "notas.h"
#include "burn.h"
#include "dialog.h"
#include "visualizar.h"
#include "localizador.h"
#include "opciones.h"
#include "desbloquear.h"
#include "update.h"
#include "conversor.h"
#include "convaudio.h"
#include <QSqlDatabase>
#include <QSqlQueryModel>
#include <QSqlQuery>
#include <QSqlTableModel>
#include <QSqlRecord>
#include <QMessageBox>
#include <stdlib.h>
#include <QtGui>
#include <QToolButton>
#include <QWidget>
#include <QIcon>
#include <QTimer>
#include <QTime>
#include <QFile>
#include <QDateTime>
#include <QTest>
#include "busca.h"
#include "dblibros.h"
#include "dbpelis.h"
#include "dbmusica.h"
#include <QStyleFactory>
#include <phonon/BackendCapabilities>
#include <phonon/Effect>
#include <phonon/EffectDescription>
#include <phonon/EffectWidget>
#include <phonon/EffectParameter>
#include <QtConcurrentRun>
#include <QFuture>
#include "conversorud.h"
#include <QDebug>

using namespace QtConcurrent;



//ver lo de instalado cuando esta en un sistema con codificacion espanol y recoverdrake en ingles que falla. (pasa en constain(tr("instalado")
//http://asotto.blogspot.com.es/2012/01/borrando-archivos-de-un-directorio-con.html



recoverdrake::recoverdrake(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::recoverdrake)
{
    ui->setupUi(this);
    QFuture<void> f1 = QtConcurrent::run(this, &recoverdrake::Paquetes);
    Q_UNUSED(f1);
    ui->radioButton->setChecked(true);
    ui->lineEdit_10->setEnabled(true);
    ui->radioButton_2->setChecked(false);
    ui->lineEdit_11->setEnabled(false);
    ui->radioButton_3->setChecked(false);
    ui->lineEdit_12->setEnabled(false);
    ui->radioButton_4->setChecked(true);
    ui->radioButton_5->setChecked(true);
    ui->checkBox_7->setChecked(true);
    ui->tabWidget->removeTab(32);
    ui->tabWidget->removeTab(31);
    ui->tabWidget->removeTab(30);
    ui->tabWidget->removeTab(29);
    ui->tabWidget->removeTab(28);
    ui->tabWidget->removeTab(27);
    ui->tabWidget->removeTab(26);
    ui->tabWidget->removeTab(25);
    ui->tabWidget->removeTab(24);
    ui->tabWidget->removeTab(23);
    ui->tabWidget->removeTab(22);
    ui->tabWidget->removeTab(21);
    ui->tabWidget->removeTab(20);
    ui->tabWidget->removeTab(19);
    ui->tabWidget->removeTab(18);
    ui->tabWidget->removeTab(17);
    ui->tabWidget->removeTab(16);
    ui->tabWidget->removeTab(15);
    ui->tabWidget->removeTab(14);
    ui->tabWidget->removeTab(13);
    ui->tabWidget->removeTab(12);
    ui->tabWidget->removeTab(11);
    ui->tabWidget->removeTab(10);
    ui->tabWidget->removeTab(9);
    ui->tabWidget->removeTab(8);
    ui->tabWidget->removeTab(7);
    ui->tabWidget->removeTab(6);
    ui->tabWidget->removeTab(5);
    ui->tabWidget->removeTab(4);
    ui->tabWidget->removeTab(3);
    ui->tabWidget->removeTab(2);
    ui->tabWidget->setCurrentIndex(0);
    ui->tabWidget_8->setCurrentPage(0);
    Pestanas=1;
    Pagina1=0;
    Pagina2=0;
    Pagina3=0;
    Pagina4=0;
    Pagina5=0;
    Pagina6=0;
    Pagina7=0;
    Pagina8=0;
    Pagina9=0;
    Pagina10=0;
    Pagina11=0;
    Pagina12=0;
    Pagina13=0;
    Pagina14=0;
    Pagina15=0;
    Pagina16=0;
    Pagina17=0;
    Pagina18=0;
    Pagina19=0;
    Pagina20=0;
    Pagina21=0;
    Pagina22=0;
    Pagina23=0;
    Pagina24=0;
    Pagina25=0;
    Pagina26=0;
    Pagina27=0;
    Pagina28=0;
    Pagina29=0;
    Pagina30=0;
    Pagina31=0;
    CerrarP=0;
    Puntero = 0;
    Puntero1 = 0;
    connect(ui->radioButton,SIGNAL(clicked()),this,SLOT(Comprobar()));
    connect(ui->radioButton_2,SIGNAL(clicked()),this,SLOT(Comprobar()));
    connect(ui->radioButton_3,SIGNAL(clicked()),this,SLOT(Comprobar()));
    dbs=QSqlDatabase::database("PRINCIPAL");
    notas *Version=new notas();
    QString Versio=Version->Ultimo;
    this->setWindowTitle("RecoverDrake - "+Versio+"");
    ui->label_113->setText(Versio);
    QString Estilo;
    QSqlQuery queryEstilo(dbs);
    queryEstilo.exec("SELECT Style FROM Estilo WHERE id=2");
    queryEstilo.first();
    Estilo=queryEstilo.value(0).toString();
    QApplication::setStyle(QStyleFactory::create(Estilo));
    qsrand(QTime::currentTime().msec());    
    Ramdom = 0;
    irc = 0;
    iTcrs = 1;
    Wf = 0;    
    Calculo = "Si";
    Reconfigurar = "No";
    ui->pushButton_4->setEnabled(true);
    ui->pushButton_5->setEnabled(false);
    ui->pushButton_6->setEnabled(false);
    ui->lcdNumber_2->display("00:00:00");
    mediaObject = new Phonon::MediaObject(this);
    audioOutput = new Phonon::AudioOutput(Phonon::MusicCategory, this);
    path = Phonon::createPath(mediaObject, audioOutput);        
    timeSound = new QTimer(this);
    connect(timeSound, SIGNAL(timeout()), this, SLOT(updateSound()));
    timeSound->stop();
    connect(mediaObject, SIGNAL(currentSourceChanged(Phonon::MediaSource)), this, SLOT(sourceChanged(Phonon::MediaSource)));
    connect(mediaObject, SIGNAL(aboutToFinish()), this, SLOT(siguiente()));
    connect(mediaObject, SIGNAL(finished()), this, SLOT(final()));
    QList<Phonon::EffectDescription> effectDescriptions = Phonon::BackendCapabilities::availableAudioEffects();
    QString Valor;
    int Posicion;
    for (int i=0;i<effectDescriptions.count();i++)
    {
        Valor = effectDescriptions.value(i).name();
        if (Valor == "equalizer-10bands")
            Posicion = i+1;
    }
    Phonon::EffectDescription effectDescription = effectDescriptions.at(Posicion);
    effect = new Phonon::Effect(effectDescription);
    path.insertEffect(effect);
    QString activo;
    int banda1,banda2,banda3,banda4,banda5,banda6,banda7,banda8,banda9,banda10;
    float Volume;
    QSqlQuery Efectos(dbs);
    Efectos.exec("SELECT activo,banda1,banda2,banda3,banda4,banda5,banda6,banda7,banda8,banda9,banda10,Volume FROM Ecualizador WHERE id=2");
    Efectos.first();
    if (Efectos.isValid())
    {
        activo=Efectos.value(0).toString();
        banda1=Efectos.value(1).toInt();
        banda2=Efectos.value(2).toInt();
        banda3=Efectos.value(3).toInt();
        banda4=Efectos.value(4).toInt();
        banda5=Efectos.value(5).toInt();
        banda6=Efectos.value(6).toInt();
        banda7=Efectos.value(7).toInt();
        banda8=Efectos.value(8).toInt();
        banda9=Efectos.value(9).toInt();
        banda10=Efectos.value(10).toInt();
        Volume=Efectos.value(11).toFloat();
    }
    audioOutput->setVolume(Volume);
    if (activo == "Si")
    {
        QList<Phonon::EffectParameter> parameters = effect->parameters();
        foreach(Phonon::EffectParameter parameter, parameters)
        {
            if (parameter.name() == "band0")
                effect->setParameterValue(parameter,banda1);
            else if (parameter.name() == "band1")
                effect->setParameterValue(parameter,banda2);
            else if (parameter.name() == "band2")
                effect->setParameterValue(parameter,banda3);
            else if (parameter.name() == "band3")
                effect->setParameterValue(parameter,banda4);
            else if (parameter.name() == "band4")
                effect->setParameterValue(parameter,banda5);
            else if (parameter.name() == "band5")
                effect->setParameterValue(parameter,banda6);
            else if (parameter.name() == "band6")
                effect->setParameterValue(parameter,banda7);
            else if (parameter.name() == "band7")
                effect->setParameterValue(parameter,banda8);
            else if (parameter.name() == "band8")
                effect->setParameterValue(parameter,banda9);
            else if (parameter.name() == "band9")
                effect->setParameterValue(parameter,banda10);
        }
    }
    ui->pushButton_24->setEnabled(true);
    ui->pushButton_22->setEnabled(false);
    ui->pushButton_23->setEnabled(false);
    ui->pushButton_21->setEnabled(false);
    ui->pushButton_25->setEnabled(false);
    Stilo = "B";
    QSqlQuery queryDepen(dbs);
    queryDepen.exec("SELECT Dependencias FROM Miscelanea WHERE id=2");
    queryDepen.first();
    Dependencia=queryDepen.value(0).toString();
    QSqlQuery queryDefecto(dbs);
    queryDefecto.exec("SELECT Defecto FROM Miscelanea WHERE id=2");
    queryDefecto.first();
    cantidadDefecto=queryDefecto.value(0).toString();
    if (cantidadDefecto == "0")
    {
        ui->menuBar->setStyleSheet("font: Bold; font: 8pt; color: rgb(255, 255, 255); alternate-background-color: rgb(213, 209, 207); gridline-color: rgb(214, 214, 214); border-left-color: rgb(0, 0, 255); border-bottom-color: rgb(0, 0, 255); border-right-color: rgb(0, 0, 255); border-top-color: rgb(0, 0, 255); selection-background-color: rgb(229, 229, 172); background-color: rgb(50, 50, 37); border-color: rgb(170, 170, 0)");
        ui->toolBar->setStyleSheet("background-color: rgb(77, 77, 57); color: rgb(255, 255, 255);");
        ui->toolBar_2->setStyleSheet("background-color: rgb(77, 77, 57); color: rgb(255, 255, 255);");
        QSqlQuery query47(dbs);
        query47.exec("SELECT Fuente FROM Font WHERE id=2");
        query47.first();
        cantidad47=query47.value(0).toString();
        QSqlQuery query48(dbs);
        query48.exec("SELECT Estilo FROM Font WHERE id=2");
        query48.first();
        cantidad48=query48.value(0).toString();
        QSqlQuery query49(dbs);
        query49.exec("SELECT Talla FROM Font WHERE id=2");
        query49.first();
        cantidad49=query49.value(0).toString();
        if (cantidad48 == "Regular")
        {
            DatoTalla = "normal";
            DatoNegro = "normal";
        }
        if (cantidad48 == "Italic")
        {
            DatoTalla = "italic";
            DatoNegro = "normal";
        }
        if (cantidad48 == "Bold Italic")
        {
            DatoTalla = "italic";
            DatoNegro = "bold";
        }
        if (cantidad48 == "Bold")
        {
            DatoTalla = "normal";
            DatoNegro = "bold";
        }
        QSqlQuery query50(dbs);
        query50.exec("SELECT ColorTexto FROM Color WHERE id=2");
        query50.first();
        cantidad50=query50.value(0).toString();
        QSqlQuery query51(dbs);
        query51.exec("SELECT ColorFondo FROM Color WHERE id=2");
        query51.first();
        cantidad51=query51.value(0).toString();
        setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        Stilo = "A";
    }
    QString pais;
    QSqlQuery Pais(dbs);
    Pais.exec("SELECT Tipo FROM Pais WHERE id=1");
    Pais.first();
    if (Pais.isValid())
        pais=Pais.value(0).toString();
    if ( pais == "0")
    {
        QString Cantidad;
        int respuesta = 0;
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Definir pais de origen")),
                    QString::fromUtf8(tr("<center><b>Pais de origen</b></center><p>"
                    "Debes decir si tu pais de origen es Espana, ya que hay utilidades que "
                    "solo son validas para Espana y no para otros paises del mundo.<p>"
                    "&iquest;Es espana tu pais de origen?")), QMessageBox::Ok, QMessageBox::No);
        if (respuesta == QMessageBox::Ok)
            Cantidad = "1";
        else
            Cantidad = "2";
        QSqlQuery Miscelanea(dbs);
        Miscelanea.exec("UPDATE Pais SET Tipo='"+Cantidad+"' WHERE id=1");
    }
    acceso *acc=new acceso();
    if (Stilo == "A")
        acc->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
    acc->exec();
    Usu=acc->Usuar;
    this->ui->label_7->setText(Usu);
    if (Usu != "kapyderi")
        ui->menuAdministrador->menuAction()->setVisible(false);
    Bloquear = 0;
    ui->checkBox->setEnabled(false);
    ui->checkBox_2->setEnabled(false);
    ui->checkBox_3->setEnabled(false);
    ui->timeEdit_2->setEnabled(false);
    ui->timeEdit_3->setEnabled(false);
    ui->dateTimeEdit_3->setEnabled(false);
    ui->tabWidget_2->setCurrentPage(0);    
    Transcurrido = new QTimer(this);
    connect(Transcurrido, SIGNAL(timeout()), this, SLOT(Transcurso()));
    Transcurrido->start(1000);
    QSqlQuery queryWifi(dbs);
    queryWifi.exec("SELECT essid,conexion FROM wifi WHERE id=2");
    queryWifi.first();
    Essid=queryWifi.value(0).toString();
    ConectWifi=queryWifi.value(1).toString();
    QSqlQuery queryethernet(dbs);
    queryethernet.exec("SELECT conexion FROM ethernet WHERE id=2");
    queryethernet.first();
    ConectEthernet=queryethernet.value(0).toString();
    QSqlQuery queryRed(dbs);
    queryRed.exec("SELECT ethernet,wifi FROM red WHERE id=2");
    queryRed.first();
    QString Red1=queryRed.value(0).toString();
    QString Red2=queryRed.value(1).toString();
    if (Red1 == "2")
        TipoRed = "ETH";
    else if (Red2 == "2")
        TipoRed = "WIF";
    drakeSistema drake;
    QString X = drake.getResolution();
    QStringList LasX = X.split(" ");
    QString X2 = LasX.value(3);
    QStringList Parcial2 = X2.split("x");
    Dato1 = Parcial2.value(0).toInt();
    Dato2 = Parcial2.value(1).toInt();
    if (Dato1 >= 1280 && Dato2 >= 1024)
    {
        if (Dato1 == 1280 && Dato2 == 1024)
            RX = 0;
        else
            RX = 1;
        QString Formato;
        QSqlQuery queryFormato(dbs);
        queryFormato.exec("SELECT Aspecto FROM Formato WHERE id=2");
        queryFormato.first();
        Formato=queryFormato.value(0).toString();
        if (Formato == "0")
            Aspecto = 0;
        else if (Formato == "1")
            Aspecto = 1;
        if (Aspecto == 1)
        {
            ui->tabWidget_8->insertTab(2,ui->tab_11,"Sistema");
            ui->tabWidget_8->setTabIcon(2,QIcon(":/Imagenes/ejecutar.png"));
            if (RX == 0)
            {
                ui->actionMostrar_Caracteristicas_especificas_de_tu_sistema_GNU_Linux->setVisible(false);
                ui->pushButton_9->setText(tr("Ocultar \"Caracteristicas especificas de tu sistema GNU/Linux\""));
                ui->groupBox_4->show();
            }
            else
            {
                ui->actionMostrar_Caracteristicas_especificas_de_tu_sistema_GNU_Linux->setVisible(true);
                ui->pushButton_9->setText(tr("Mostrar \"Caracteristicas especificas de tu sistema GNU/Linux\""));
                ui->groupBox_4->hide();
            }
        }
        else if (Aspecto == 0)
        {
            int Pos = ui->tabWidget_8->indexOf(ui->tab_11);
            ui->tabWidget_8->removeTab(Pos);            
            if (RX == 1)
            {
                ui->actionMostrar_Caracteristicas_especificas_de_tu_sistema_GNU_Linux->setVisible(true);
                ui->pushButton_9->setText(tr("Mostrar \"Caracteristicas especificas de tu sistema GNU/Linux\""));
                ui->groupBox_4->hide();
            }
            else
            {
                ui->actionMostrar_Caracteristicas_especificas_de_tu_sistema_GNU_Linux->setVisible(false);
                ui->pushButton_9->setText(tr("Ocultar \"Caracteristicas especificas de tu sistema GNU/Linux\""));
                ui->groupBox_4->show();
            }
        }
    }
    else
    {
        ui->toolBar->hide();
        ui->toolBar_2->hide();
        ui->actionDesactivar_Barra_de_menu_superios->setChecked(true);
        ui->actionDesactivar_Barra_de_menu_inferior->setChecked(true);
        ui->actionDesactivar_Barra_de_menu_superios->setIcon(QIcon(":/Imagenes/good.png"));
        ui->actionDesactivar_Barra_de_menu_inferior->setIcon(QIcon(":/Imagenes/good.png"));
    }
    QSettings seting("myorg","Aplica");
    QVariant opcion;
    QVariant opcion1;
    QVariant opcion2;
    QVariant opcion3;
    QVariant opcion4;
    QVariant opcion5;
    QVariant opcion6;
    QVariant opcion7;
    QVariant opcion8;
    QVariant opcion9;
    QVariant opcion10;
    QVariant opcion11;
    QVariant opcion12;
    QVariant opcion13;
    QVariant opcion14;
    opcion=seting.value("opcion",false);
    opcion1=seting.value("opcion1",false);
    opcion2=seting.value("opcion2",false);
    opcion3=seting.value("opcion3",false);
    opcion4=seting.value("opcion4",false);
    opcion5=seting.value("opcion5",false);
    opcion6=seting.value("opcion6",false);
    opcion7=seting.value("opcion7",false);
    opcion8=seting.value("opcion8",false);
    opcion9=seting.value("opcion9",false);
    opcion10=seting.value("opcion10",false);
    opcion11=seting.value("opcion11",false);
    opcion12=seting.value("opcion12",false);
    opcion13=seting.value("opcion13",false);
    opcion14=seting.value("opcion14",false);
    ui->actionActivar_Desactivar_inicio_con_Linux->setChecked(opcion.toBool());
    ui->actionComprabar_depndencias_RecoverDrake->setChecked(opcion1.toBool());
    ui->actionSugerencias_y_avisos->setChecked(opcion2.toBool());
    ui->actionMinimizar_al_Salir->setChecked(opcion3.toBool());
    ui->actionActivar_Logs_de_sucesos->setChecked(opcion4.toBool());
    ui->actionActivar_Mensajes_de_aplicaciones->setChecked(opcion5.toBool());
    ui->actionDesactivar_pantalla_inicio->setChecked(opcion6.toBool());
    ui->actionActivar_Comprobaci_n_de_wifi->setChecked(opcion7.toBool());
    ui->actionSupervisar_visualizacion_previa_en_dolphin->setChecked(opcion8.toBool());
    if (RX == 1)
        ui->actionMostrar_Caracteristicas_especificas_de_tu_sistema_GNU_Linux->setChecked(opcion9.toBool());
    ui->actionLiberar_memoria_de_Cache->setChecked(opcion10.toBool());
    ui->actionDesactivar_Barra_de_menu_superios->setChecked(opcion11.toBool());
    ui->actionDesactivar_Barra_de_menu_inferior->setChecked(opcion12.toBool());
    ui->actionBloquear_salvapantallas->setChecked(opcion13.toBool());
    ui->actionActivar_control_de_vigilancia_de_error_de_sesiones->setChecked(opcion14.toBool());
    timer = new QTimer(this);
    connect(timer, SIGNAL(timeout()), this, SLOT(update()));
    timer->start(10000);
    actionConsola_como_root();    
    actionAcerca_de_Qt();
    mib = 0;
    otros = 0;
    clave = 0;
    ControlClose = 0;
    UpDate = 0;
    crearAcciones();
    this->crearIcono();
    trayIcon->show();
    this->setIcono();
    QSqlQuery query(dbs);
    query.exec("select Usuario from Control");
    query.last();
    Dato=query.value(0).toString();
    QSqlQuery query1(dbs);
    query1.exec("SELECT Usuario,Nivel FROM Acceso WHERE Usuario LIKE '"+Dato+"'");
    query1.first();
    Nivel=query1.value(1).toString();
    if (Nivel == "1")
    {
        ui->actionUsuarios->setVisible(false);
        ui->menuInstaladores->menuAction()->setVisible(false);
        ui->menuMantenimiento->menuAction()->setVisible(false);
        ui->menuSoluci_n_a_problemas->menuAction()->setVisible(false);
        ui->menuUtilidades->menuAction()->setVisible(false);
        ui->actionConsola_como_root->setVisible(false);
        ui->actionSystemSetting_como_root->setVisible(false);
        ui->actionMenu_contextual_de_root_en_usuario->setVisible(false);
        ui->menuAntivirus->menuAction()->setVisible(false);
        ui->actionActivar_control_parental->setVisible(false);
        ui->actionActivar_Desactivar_inicio_con_Linux->setVisible(false);
        ui->actionActivar_Logs_de_sucesos->setVisible(false);
        ui->actionActivar_Mensajes_de_aplicaciones->setVisible(false);
        ui->actionComprabar_depndencias_RecoverDrake->setVisible(false);
        ui->actionMinimizar_al_Salir->setVisible(false);
        ui->actionSupervisar_red_privada->setVisible(false);
        ui->actionActivar_control_de_vigilancia_de_error_de_sesiones->setVisible(false);
        ui->menuControl_parental_en_Internet->menuAction()->setVisible(false);
        ui->actionOpciones->setVisible(false);
        ui->tabWidget_3->setEnabled(false);
        ui->menuApagar->menuAction()->setVisible(false);
        ui->tabWidget_8->removeTab(0);
    }
    else if (Nivel == "2")
    {
        ui->actionUsuarios->setVisible(false);
        ui->menuUtilidades->menuAction()->setVisible(false);
        ui->menuInstalar_drivers_wifi_con_ndiswrapper->menuAction()->setVisible(false);
        ui->menuInstalar_drivers_wifi_propietarios_2->menuAction()->setVisible(false);
        ui->menuSoluci_n_a_problemas->menuAction()->setVisible(false);
        ui->actionConsola_como_root->setVisible(false);
        ui->actionSystemSetting_como_root->setVisible(false);
        ui->actionMenu_contextual_de_root_en_usuario->setVisible(false);
        ui->menuAntivirus->menuAction()->setVisible(false);
        ui->menuMantenimiento->menuAction()->setVisible(false);
        ui->actionActivar_control_parental->setVisible(false);
        ui->actionActivar_Desactivar_inicio_con_Linux->setVisible(false);
        ui->actionActivar_Logs_de_sucesos->setVisible(false);
        ui->actionActivar_Mensajes_de_aplicaciones->setVisible(false);
        ui->actionComprabar_depndencias_RecoverDrake->setVisible(false);
        ui->actionActivar_control_de_vigilancia_de_error_de_sesiones->setVisible(false);
        ui->actionMinimizar_al_Salir->setVisible(false);
        ui->actionSupervisar_red_privada->setVisible(false);
        ui->menuControl_parental_en_Internet->menuAction()->setVisible(false);
        ui->actionOpciones->setVisible(false);
        ui->tabWidget_8->removeTab(0);
    }
    QString Menus;
    QSqlQuery queryMenu(dbs);
    queryMenu.exec("SELECT Tipo_Menu FROM Menus WHERE id=2");
    queryMenu.first();
    Menus=queryMenu.value(0).toString();
    if (Menus == "0")
    {
        ui->actionSalvaguardar_rpm_s->setVisible(false);
        ui->actionRecuperar_rpm_s->setVisible(false);
        ui->actionEliminar_paquetes_huerfanos->setVisible(false);
        ui->actionRecuperar_paquetes_huerfanos_Eliminados->setVisible(false);
        ui->actionActualizar_sistema->setVisible(false);
        ui->menuAvi_a->menuAction()->setVisible(false);
        ui->menuConvertir_mpg_a->menuAction()->setVisible(false);
        ui->menuConvertir_wmv_a->menuAction()->setVisible(false);
        ui->menuConvertir_flv_a->menuAction()->setVisible(false);
        ui->menuConvertir_3gp_a->menuAction()->setVisible(false);
        ui->menuConvertir_mp4_a->menuAction()->setVisible(false);
        ui->menuConvertir_mp3_a->menuAction()->setVisible(false);
        ui->menuConvertir_wma_a->menuAction()->setVisible(false);
        ui->menuConvertir_wav_a->menuAction()->setVisible(false);
        ui->menuConvertir_ac3_a->menuAction()->setVisible(false);
        ui->actionHacer_CD_de_video->setVisible(false);
        ui->actionHacer_CD_DVD_de_audio->setVisible(false);
        ui->actionHacer_CD_DVD_de_datos->setVisible(false);
        ui->actionHacer_DVD_de_video->setVisible(false);
        ui->actionMantenimiento_de_rpm_s->setVisible(true);
        ui->actionActualizar_sistema_interactivo->setVisible(true);
        ui->actionEliminiar_Recuperar_paquetes_huerfanos_interactivo->setVisible(true);
        ui->actionConversor_de_formatos_de_Audio_Interactivo->setVisible(true);
        ui->actionConversor_de_formatos_de_video_Interactivo->setVisible(true);
        ui->actionGrabador_de_CD_DVD_Interactivo->setVisible(true);
    }
    else if (Menus == "1")
    {
        ui->actionActualizar_sistema_interactivo->setVisible(false);
        ui->actionEliminiar_Recuperar_paquetes_huerfanos_interactivo->setVisible(false);
        ui->actionConversor_de_formatos_de_Audio_Interactivo->setVisible(false);
        ui->actionMantenimiento_de_rpm_s->setVisible(false);
        ui->actionConversor_de_formatos_de_video_Interactivo->setVisible(false);
        ui->actionGrabador_de_CD_DVD_Interactivo->setVisible(false);
        ui->actionSalvaguardar_rpm_s->setVisible(true);
        ui->actionRecuperar_rpm_s->setVisible(true);
        ui->actionEliminar_paquetes_huerfanos->setVisible(true);
        ui->actionRecuperar_paquetes_huerfanos_Eliminados->setVisible(true);
        ui->actionActualizar_sistema->setVisible(true);
        ui->menuAvi_a->menuAction()->setVisible(true);
        ui->menuConvertir_mpg_a->menuAction()->setVisible(true);
        ui->menuConvertir_wmv_a->menuAction()->setVisible(true);
        ui->menuConvertir_flv_a->menuAction()->setVisible(true);
        ui->menuConvertir_3gp_a->menuAction()->setVisible(true);
        ui->menuConvertir_mp4_a->menuAction()->setVisible(true);
        ui->menuConvertir_mp3_a->menuAction()->setVisible(true);
        ui->menuConvertir_wma_a->menuAction()->setVisible(true);
        ui->menuConvertir_wav_a->menuAction()->setVisible(true);
        ui->menuConvertir_ac3_a->menuAction()->setVisible(true);
        ui->actionHacer_CD_de_video->setVisible(true);
        ui->actionHacer_CD_DVD_de_audio->setVisible(true);
        ui->actionHacer_CD_DVD_de_datos->setVisible(true);
        ui->actionHacer_DVD_de_video->setVisible(true);
    }
    else if (Menus == "2")
    {
        ui->actionSalvaguardar_rpm_s->setVisible(true);
        ui->actionRecuperar_rpm_s->setVisible(true);
        ui->actionEliminar_paquetes_huerfanos->setVisible(true);
        ui->actionRecuperar_paquetes_huerfanos_Eliminados->setVisible(true);
        ui->actionActualizar_sistema->setVisible(true);
        ui->menuAvi_a->menuAction()->setVisible(true);
        ui->menuConvertir_mpg_a->menuAction()->setVisible(true);
        ui->menuConvertir_wmv_a->menuAction()->setVisible(true);
        ui->menuConvertir_flv_a->menuAction()->setVisible(true);
        ui->menuConvertir_3gp_a->menuAction()->setVisible(true);
        ui->menuConvertir_mp4_a->menuAction()->setVisible(true);
        ui->menuConvertir_mp3_a->menuAction()->setVisible(true);
        ui->menuConvertir_wma_a->menuAction()->setVisible(true);
        ui->menuConvertir_wav_a->menuAction()->setVisible(true);
        ui->menuConvertir_ac3_a->menuAction()->setVisible(true);
        ui->actionActualizar_sistema_interactivo->setVisible(true);
        ui->actionEliminiar_Recuperar_paquetes_huerfanos_interactivo->setVisible(true);
        ui->actionConversor_de_formatos_de_Audio_Interactivo->setVisible(true);
        ui->actionConversor_de_formatos_de_video_Interactivo->setVisible(true);
        ui->actionMantenimiento_de_rpm_s->setVisible(true);
        ui->actionHacer_CD_de_video->setVisible(true);
        ui->actionHacer_CD_DVD_de_audio->setVisible(true);
        ui->actionHacer_CD_DVD_de_datos->setVisible(true);
        ui->actionHacer_DVD_de_video->setVisible(true);
        ui->actionGrabador_de_CD_DVD_Interactivo->setVisible(true);
    }
    if (Distro != "Mandriva")
    {
          ui->actionPLF->setVisible(false);
          ui->actionMIB->setVisible(false);
          ui->actionMUD->setVisible(false);
    }
    QString Aplicacion;
    QSqlQuery queryAplicacion(dbs);
    queryAplicacion.exec("SELECT Aplicacion FROM Aplicacion WHERE id=2");
    queryAplicacion.first();
    Aplicacion=queryAplicacion.value(0).toString();
    if (Aplicacion == "0")
        Window = 0;
    else if (Aplicacion == "1")
        Window = 1;
    QString chat;
    QSqlQuery queryChat(dbs);
    queryChat.exec("SELECT visionado FROM chat WHERE id=2");
    queryChat.first();
    chat=queryChat.value(0).toString();
    if (chat == "0")
        Chat = 0;
    else if (chat == "1")
        Chat = 1;
    ui->pushButton_50->hide();
    if (Chat == 1)
        ui->pushButton_49->setText(tr("Ir a Canal IRC::#blogdrake"));
    else if (Chat == 0)
        ui->pushButton_49->setText(tr("Mostrar Canal IRC::#blogdrake"));
    ui->label_9->setText(Nivel);
    QSqlQuery query2(dbs);
    query2.exec("SELECT COUNT(Usuario) AS Cantidad FROM Control");
    query2.first();
    Cantidad=query2.value(0).toString();
    if (Cantidad == "1")
    {
        QSqlQuery query3(dbs);
        query3.exec("UPDATE Acceso SET Activo = 0 WHERE Usuario = 'admin'");
        CrearUser();
        Actualizar();
    }
    QSqlQuery queryConf(dbs);
    queryConf.exec("SELECT Audio128,Audio192,Audio320 FROM Opcion WHERE id=2");
    queryConf.first();
    QString cdad=queryConf.value(0).toString();
    QString cdad1=queryConf.value(1).toString();
    QString cdad2=queryConf.value(2).toString();
    if (cdad == "2")
        Audio="128k";
    else if (cdad1 == "2")
        Audio="192k";
    else if (cdad2 =="2")
        Audio="320k";
    QSqlQuery Variable(dbs);
    Variable.exec("SELECT Genero FROM id3Genre");
    ui->comboBox_2->addItem("");
    while(Variable.next())
        ui->comboBox_2->addItem(Variable.value(0).toString());
    QSqlQuery queryDalle(dbs);
    queryDalle.exec("SELECT zip_pa,sf_pa,mxs_pa,camaleon2_pa,camaleon1_pa,hachapro_pa,hacha2_pa,hacha1_pa,generico_pa,efsplitter_pa,camouflage_pa FROM Opcion2 WHERE id=2");
    queryDalle.first();
    QString Dalle1=queryDalle.value(0).toString();
    QString Dalle2=queryDalle.value(1).toString();
    QString Dalle3=queryDalle.value(2).toString();
    QString Dalle4=queryDalle.value(3).toString();
    QString Dalle5=queryDalle.value(4).toString();
    QString Dalle6=queryDalle.value(5).toString();
    QString Dalle7=queryDalle.value(6).toString();
    QString Dalle8=queryDalle.value(7).toString();
    QString Dalle9=queryDalle.value(8).toString();
    QString Dalle10=queryDalle.value(9).toString();
    QString Dalle11=queryDalle.value(10).toString();
    if (Dalle1 == "2")
        split="zip";
    else if (Dalle2 == "2")
        split="sf";
    else if (Dalle3 =="2")
        split="mxs";
    else if (Dalle4 =="2")
        split="kamaleon2";
    else if (Dalle5 =="2")
        split="kamaleon1";
    else if (Dalle6 =="2")
        split="hachapro";
    else if (Dalle7 =="2")
        split="hacha2";
    else if (Dalle8 =="2")
        split="hacha1";
    else if (Dalle9 =="2")
        split="generico";
    else if (Dalle10 =="2")
        split="efsplitter";
    else if (Dalle11=="2")
        split="camouflage";
    QSqlQuery queryTalla(dbs);
    queryTalla.exec("SELECT tamano1,tamano2,tamano3,tamano4,tamano5 FROM Opcion1 WHERE id=2");
    queryTalla.first();
    QString Talla1=queryTalla.value(0).toString();
    QString Talla2=queryTalla.value(1).toString();
    QString Talla3=queryTalla.value(2).toString();
    QString Talla4=queryTalla.value(3).toString();
    QString Talla5=queryTalla.value(4).toString();
    if (Talla1 == "2")
        talla="51200";
    else if (Talla2 == "2")
        talla="102400";
    else if (Talla3 =="2")
        talla="204800";
    else if (Talla4 =="2")
        talla="409600";
    else if (Talla5 =="2")
        talla="512000";
    QSqlQuery queryVelocidad(dbs);
    queryVelocidad.exec("SELECT Velocidad2x,Velocidad4x,Velocidad8x,Velocidad16x,Velocidad32x FROM Opcion4 WHERE id=2");
    queryVelocidad.first();
    QString Veloz1=queryVelocidad.value(0).toString();
    QString Veloz2=queryVelocidad.value(1).toString();
    QString Veloz3=queryVelocidad.value(2).toString();
    QString Veloz4=queryVelocidad.value(3).toString();
    QString Veloz5=queryVelocidad.value(4).toString();
    if (Veloz1 == "2")
        velocidad="2";
    else if (Veloz2 == "2")
        velocidad="4";
    else if (Veloz3 =="2")
        velocidad="8";
    else if (Veloz4 =="2")
        velocidad="16";
    else if (Veloz5 =="2")
        velocidad="32";
    QSqlQuery queryDev(dbs);
    queryDev.exec("SELECT Numero1,Numero2,Numero3 FROM Opcion3 WHERE id=2");
    queryDev.first();
    QString Dev1=queryDev.value(0).toString();
    QString Dev2=queryDev.value(1).toString();
    QString Dev3=queryDev.value(2).toString();
    Dev=""+Dev1+","+Dev2+","+Dev3+"";
    QSqlQuery queryResolucion(dbs);
    queryResolucion.exec("SELECT i480,i576,i2_576,p720,p1080,kapy FROM Opcion5 WHERE id=2");
    queryResolucion.first();
    QString Resol1=queryResolucion.value(0).toString();
    QString Resol2=queryResolucion.value(1).toString();
    QString Resol3=queryResolucion.value(2).toString();
    QString Resol4=queryResolucion.value(3).toString();
    QString Resol5=queryResolucion.value(4).toString();
    QString Resol6=queryResolucion.value(4).toString();
    if (Resol1 == "2")
        resolucion="480x720";
    else if (Resol2 == "2")
        resolucion="576x720";
    else if (Resol3 == "2")
        resolucion="1024x576";
    else if (Resol4 == "2")
        resolucion="720x1280";
    else if (Resol5 == "2")
        resolucion="1080x1920";
    else if (Resol6 == "2")
        resolucion="592x352";
    QSqlQuery queryTime(dbs);
    queryTime.exec("SELECT tiempo120,tiempo90,tiempo60,tiempo30 FROM Parental WHERE id=2");
    queryTime.first();
    QString Time1=queryTime.value(0).toString();
    QString Time2=queryTime.value(1).toString();
    QString Time3=queryTime.value(2).toString();
    QString Time4=queryTime.value(3).toString();
    if (Time1 == "2")
    {
        tiempo="120";
        Ta = "01";
        Tb = "59";
        Tc = "59";
    }
    else if (Time2 == "2")
    {
        tiempo="90";
        Ta = "01";
        Tb = "29";
        Tc = "59";
    }
    else if (Time3 == "2")
    {
        tiempo="60";
        Ta = "0";
        Tb = "59";
        Tc = "59";
    }
    else if (Time4 == "2")
    {
        tiempo="30";
        Ta = "0";
        Tb = "29";
        Tc = "59";
    }    
    QSqlQuery queryVideo(dbs);
    queryVideo.exec("SELECT vlc,parole FROM Video WHERE id=2");
    queryVideo.first();
    QString Video1=queryRed.value(0).toString();
    QString Video2=queryRed.value(1).toString();
    if (Video1 == "2")
        TipoVideo = "vlc";
    else if (Video2 == "2")
        TipoVideo = "parole";
    QSqlQuery consola(dbs);
    consola.exec("SELECT Fondo FROM consola WHERE id=2");
    consola.first();
    QString konsola=consola.value(0).toString();
    if (konsola == "0")
        ui->textEdit->setStyleSheet("background-color: rgb(0, 0, 0); color: rgb(255, 255, 255); font-size: 9pt; font-family: Sans Serif");
    else if (konsola == "2")
        ui->textEdit->setStyleSheet(QString::fromUtf8("background-color: rgb(0, 0, 0); border-image: url(:/Imagenes/fondoKonsole.png); color: rgb(255, 255, 255); font: 9pt \"Sans Serif\";"));
    connect(trayIcon, SIGNAL(activated(QSystemTrayIcon::ActivationReason)),
            this, SLOT(iconActivated(QSystemTrayIcon::ActivationReason)));
    Model= new QSqlTableModel(0,dbs);
    Model->setTable("Menu");
    Model->select();    
    Model2= new QSqlTableModel(0,dbs);
    Model2->setTable("Cancion");
    Model2->select();
    Model3= new QSqlTableModel(0,dbs);
    Model3->setTable("Radio");
    Model3->select();
    ui->tableView_3->setModel(Model3);
    ui->tableView_3->setColumnHidden(0, true);
    ui->tableView_3->alternatingRowColors();
    connect(ui->tableView_3->selectionModel(),SIGNAL(currentChanged(QModelIndex,QModelIndex)),this,SLOT(cambiaFilaRadio(QModelIndex)));
    connect(ui->tableView_3, SIGNAL(pressed(QModelIndex)), this, SLOT(tableClickedRadio()));
    Model4= new QSqlTableModel(0,dbs);
    Model4->setTable("PosRadio");
    Model4->select();
    Model1= new QSqlTableModel(0,dbs);
    Model1->setTable("Musica");
    Model1->select();
    ui->tableView->setModel(Model1);
    ui->tableView->setColumnHidden(0, true);
    ui->tableView->setColumnHidden(2, true);
    ui->tableView->alternatingRowColors();
    ui->tableView->scrollToBottom();
    connect(ui->tableView->selectionModel(),SIGNAL(currentChanged(QModelIndex,QModelIndex)),this,SLOT(cambiaFila(QModelIndex)));
    connect(ui->tableView, SIGNAL(pressed(QModelIndex)), this, SLOT(tableClicked()));    
    ui->lineEdit_13->setText("/home/"+user+tr("/Descargas/"));
    ui->tableView->resizeRowsToContents();
    ui->tableView->resizeColumnsToContents();
    ui->tableView_3->resizeRowsToContents();
    ui->tableView_3->resizeColumnsToContents();    
    timer1 = new QTimer(this);
    connect(timer1, SIGNAL(timeout()), this, SLOT(hora()));
    timer1->start(1000);
    Logs = "N";
    pagina = 0;
    if (ui->tableView->model()->rowCount() != 0)
    {
        int Posicion = ui->tableView->model()->rowCount();
        mediaObject->clear();
        sources.clear();
        QString activo1;
        int index = sources.size();
        QSqlQuery Variable(dbs);
        Variable.exec("SELECT Ruta FROM Musica");
        while(Variable.next())
        {
            activo1 = Variable.value(0).toString();
            Phonon::MediaSource source(activo1);
            sources.append(source);
            mediaObject->setCurrentSource(sources.at(index));
        }
        QSqlQuery Cancion(dbs);
        Cancion.exec("SELECT Posicion FROM Cancion WHERE id=1");
        Cancion.first();
        int cantidad=Cancion.value(0).toInt();
        if (cantidad <= 0 || cantidad > Posicion)
        {
            mediaObject->setCurrentSource(sources[0]);
            ui->tableView->selectRow(0);
        }
        else
        {
            mediaObject->setCurrentSource(sources[cantidad-1]);
            ui->tableView->selectRow(cantidad-1);
        }
        Parando = 0;
        on_pushButton_5_clicked();
        Parando = 1;
        ui->tableView->resizeRowsToContents();
        ui->tableView->resizeColumnsToContents();
    }
    future = new QFuture<void>;
    watcher = new QFutureWatcher<void>;    
    Arranque();
    this->installEventFilter(this);
    Modulos();
    ui->centralWidget->adjustSize();
}

recoverdrake::~recoverdrake()
{
    delete ui;
    delete Model;
    delete Model1;
    delete Model2;
    delete Model3;
    delete Model4;
    if (mib != 0)
        delete mib;
    if (otros != 0 )
        delete otros;
    if (clave != 0)
        delete clave;
}

void recoverdrake::changeEvent(QEvent *e)
{
    QMainWindow::changeEvent(e);
    switch (e->type()) {
    case QEvent::LanguageChange:
        ui->retranslateUi(this);
        break;
    default:
        break;
    }
}

bool recoverdrake::eventFilter(QObject* obj, QEvent *event)
{
    if (obj == this)
    {
        if (event->type() == QEvent::KeyRelease)
        {
            QKeyEvent* keyEvent = static_cast<QKeyEvent*>(event);
            if (keyEvent->key() == Qt::Key_F1)
            {
                ayuda = new Ayuda(this);
                ayuda->show();
                ayuda->Valor(tr("RecoverDrake"));
                return true;
            }
        }
        return false;
    }
    return QMainWindow::eventFilter(obj, event);
}

void recoverdrake::Paquetes()
{
    drakeSistema drake;
    IPconexion = drake.getIPconexion("www.google.com");
    if (IPconexion == "")
        IPconexion = drake.getIPconexion("www.ebay.com");
    if (IPconexion == "")
        IPconexion = drake.getIPconexion("www.wikipedia.org");
    ip = drake.getIP();    
    release = drake.getRelease();
    ipRoute = drake.getIPRouter();
    QStringList Route = ipRoute.split(" ");
    ipRoute = Route.value(Route.count()-1);
    ipEssid = drake.getEssid(ipRoute);
    QStringList Essid1;
    ipEssid = ipEssid.remove("ESSID:");
    ipEssid = ipEssid.remove("                    ");
    Essid1 = ipEssid.split("\n");
    ipEssid = Essid1.value(0);
    ipEssid = ipEssid.remove("\"");
    if (ipRoute!="")
    {
        if (EthF > 0)
            this->ui->label_22->setText(""+ipRoute+"");
        else
            this->ui->label_22->setText(""+ipRoute+" / "+Essid+"");
    }
    else if (ipRoute == "")
        this->ui->label_22->setText(tr("Utilizando Ethernet"));
    if (ip == "")
        this->ui->label_19->setText(tr("Sin Acceso a Red"));
    else if (ip != "")
        this->ui->label_19->setText(QString::fromUtf8(ip));
    if (EthF > 0)
    {
        QSqlQuery query8(dbs);
        query8.exec("UPDATE ethernet SET Conexion='"+ipRoute+"' WHERE id=2");
        QSqlQuery eth(dbs);
        eth.exec("UPDATE red SET ethernet='2',wifi='0' WHERE id=2");
    }
    else
    {
        QSqlQuery query8(dbs);
        query8.exec("UPDATE wifi SET Conexion='"+ipRoute+"',Essid='"+ipEssid+"' WHERE id=2");
        QSqlQuery eth(dbs);
        eth.exec("UPDATE red SET ethernet='0',wifi='2' WHERE id=2");
    }
    arqt = drake.getArquitectura();
    du = drake.getEspacio();
    Pci = drake.getPci();
    Localizar = drake.getRpms();
    repo = drake.getRepositorio();
    red = drake.getRedes();
    infoPro = drake.getInfoPro();
    Bios = drake.getBios();
    if (Localizar == "")
    {
        system("rm -vrf /var/lib/rpm/__db.0*");
        system("rpm --rebuilddb");
        Localizar = drake.getRpms();
    }
    else
    {
        QFile file("/usr/share/RecoverDrake/rpmlist.bak");
        file.open(QIODevice::WriteOnly | QIODevice::Truncate);
        QTextStream in(&file);
        in << Localizar;
        file.close();
    }
    rpm = Localizar;
    zenity = getPack("zenity");
    if (zenity == "")
        zenity="0";
    else
        zenity="1";
    kwrite = getPack("kwrite");
    if (kwrite == "")
        kwrite="0";
    else
        kwrite="1";
    ndiswrapper = getPack("ndiswrapper");
    if (ndiswrapper == "")
        ndiswrapper= "0";
    else
        ndiswrapper= "1";
    ntfsconfig= getPack("ntfs-config");
    if (ntfsconfig == "")
        ntfsconfig="0";
    else
        ntfsconfig="1";
    cdparanoia= getPack("cdparanoia");
    if (cdparanoia == "")
        cdparanoia="0";
    else
        cdparanoia="1";
    gzip= getPack("gzip");
    if (gzip == "")
        gzip="0";
    else
        gzip="1";
    tar= getPack("tar");
    if (tar == "")
        tar= "0";
    else
        tar= "1";
    cdrdao= getPack("cdrdao");
    if (cdrdao == "")
        cdrdao= "0";
    else
        cdrdao= "1";
    cdrkit= getPack("cdrkit");
    if (cdrkit == "")
        cdrkit= "0";
    else
        cdrkit= "1";
    convmv= getPack("convmv");
    if (convmv == "")
        convmv= "0";
    else
        convmv= "1";
    photorec= getPack("photorec");
    if (photorec == "")
        photorec= "0";
    else
        photorec= "1";
    konsole= getPack("konsole");
    if (konsole == "")
        konsole="0";
    else
        konsole="1";
    sudo= getPack("sudo");
    if (sudo == "")
        sudo= "0";
    else
        sudo= "1";
    alien= getPack("alien");
    if (alien == "")
        alien= "0";
    else
        alien= "1";
    fakeroot= getPack("fakeroot");
    if (fakeroot == "")
        fakeroot="0";
    else
        fakeroot="1";
    unrar = getPack("unrar");
    if (unrar == "")
        unrar= "0";
    else
        unrar= "1";
    imagemagick= getPack("imagemagick");
    if (imagemagick == "")
        imagemagick="0";
    else
        imagemagick="1";
    unzip = getPack("unzip");
    if (unzip == "")
        unzip= "0";
    else
        unzip= "1";
    dalle= getPack("dalle");
    if (dalle == "")
        dalle="0";
    else
        dalle="1";
    ffmpeg= getPack("ffmpeg");
    if (ffmpeg == "")
        ffmpeg= "0";
    else
        ffmpeg= "1";
    mencoder= getPack("mencoder");
    if (mencoder == "")
        mencoder= "0";
    else
        mencoder= "1";
    mkvtoolnix= getPack("mkvtoolnix");
    if (mkvtoolnix == "")
        mkvtoolnix= "0";
    else
        mkvtoolnix= "1";
    dvdauthor= getPack("dvdauthor");
    if (dvdauthor == "")
        dvdauthor= "0";
    else
        dvdauthor= "1";
    lsdvdDat= getPack("lsdvd");
    if (lsdvdDat == "")
        lsdvdDat= "0";
    else
        lsdvdDat= "1";
    clamav= getPack("clamav");
    if (clamav == "")
        clamav= "0";
    else
        clamav= "1";
    dolphin= getPack("dolphin");
    if (dolphin == "")
        dolphin= "0";
    else
        dolphin= "1";
    ccd2iso= getPack("ccd2iso");
    if (ccd2iso == "")
        ccd2iso= "0";
    else
        ccd2iso= "1";
    mdf2iso= getPack("mdf2iso");
    if (mdf2iso == "")
        mdf2iso= "0";
    else
        mdf2iso= "1";
    cdi2iso= getPack("cdi2iso");
    if (cdi2iso == "")
        cdi2iso= "0";
    else
        cdi2iso= "1";
    nrg2iso= getPack("nrg2iso");
    if (nrg2iso == "")
        nrg2iso= "0";
    else
        nrg2iso= "1";
    libnotify= getPack("libnotify");
    if (libnotify == "")
        libnotify="0";
    else
        libnotify="1";
    id3lib= getPack("id3lib");
    if (id3lib == "")
        id3lib = "0";
    else
        id3lib = "1";
    nmap= getPack("nmap");
    if (nmap == "")
        nmap = "0";
    else
        nmap = "1";
    iptables= getPack("iptables");
    if (iptables == "")
        iptables = "0";
    else
        iptables = "1";
    vlc= getPack("vlc");
    if (vlc == "")
        vlc = "0";
    else
        vlc = "1";
    fileroller= getPack("file-roller");
    if (fileroller == "")
        fileroller = "0";
    else
        fileroller = "1";
    mtools= getPack("mtools");
    if (mtools == "")
        mtools = "0";
    else
        mtools = "1";
    qemu= getPack("qemu");
    if (qemu == "")
        qemu = "0";
    else
        qemu = "1";
    gcstar= getPack("gcstar");
    if (gcstar == "")
        gcstar = "0";
    else
        gcstar = "1";
    x11vnc= getPack("x11vnc");
    if (x11vnc == "")
        x11vnc = "0";
    else
        x11vnc = "1";
    mutt= getPack("mutt");
    if (mutt == "")
        mutt = "0";
    else
        mutt = "1";
    sendmail= getPack("sendmail");
    if (sendmail == "")
        sendmail = "0";
    else
        sendmail = "1";
    ssmtp= getPack("ssmtp");
    if (ssmtp == "")
        ssmtp = "0";
    else
        ssmtp = "1";
    tigervnc= getPack("tigervnc");
    if (tigervnc == "")
        tigervnc="0";
    else
        tigervnc="1";
    transmission = getPack("transmission-cli");
    if (transmission == "")
        transmission="0";
    else
        transmission="1";
    firefox= getPack("firefox");
    if (firefox == "")
        firefox="0";
    else
        firefox="1";
    gcc= getPack("gcc");
    if (gcc == "")
        gcc="0";
    else
        gcc="1";
    makec= getPack("make");
    if (makec == "")
        makec="0";
    else
        makec="1";
    if (arqt =="x86_64")
        libncurses= getPack("lib64ncurses-devel");
    else
        libncurses= getPack("libncurses-devel");
    if (libncurses == "")
        libncurses="0";
    else
        libncurses="1";
    if (arqt =="x86_64")
        libncursesw= getPack("lib64ncursesw-devel");
    else
        libncursesw= getPack("libncursesw-devel");
    if (libncursesw == "")
        libncursesw="0";
    else
        libncursesw="1";
    pulseaudio= getPack("pulseaudio-utils");
    if (pulseaudio == "")
        pulseaudio= "0";
    else
        pulseaudio= "1";
    if (arqt =="x86_64")
        libqrencode= getPack("lib64qrencode-devel");
    else
        libqrencode= getPack("libqrencode-devel");
    if (libqrencode == "")
        libqrencode="0";
    else
        libqrencode="1";
    bzip2= getPack("bzip2");
    if (bzip2 == "")
        bzip2="0";
    else
        bzip2="1";
    zip= getPack("zip");
    if (zip == "")
        zip="0";
    else
        zip="1";
    zoo= getPack("zoo");
    if (zoo == "")
        zoo="0";
    else
        zoo="1";
    arj= getPack("arj");
    if (arj == "")
        arj="0";
    else
        arj="1";
    a7z= getPack("p7zip");
    if (a7z == "")
        a7z="0";
    else
        a7z="1";
    rar= getPack("rar");
    if (rar == "")
        rar="0";
    else
        rar="1";
    tree= getPack("tree");
    if (tree == "")
        tree="0";
    else
        tree="1";
    webmin= getPack("webmin");
    if (webmin == "")
        webmin = "0";
    else
        webmin ="1";
    if (arqt =="x86_64")
        libqTermWidget= getPack("lib64qtermwidget-devel");
    else
        libqTermWidget= getPack("libqtermwidget-devel");
    if (libqTermWidget == "")
        libqTermWidget= "0";
    else
        libqTermWidget= "1";
}

QString recoverdrake::getPack(QString activo)
{
    QProcess *procesoRPM;
    QStringList argumentosRPM;
    QByteArray Paquete;
    procesoRPM=new QProcess(this);
    argumentosRPM << "-q" << "--queryformat=%{NAME}" << activo;
    procesoRPM->start("rpm",argumentosRPM);
    if (! procesoRPM->waitForStarted())
        return QString("");
    procesoRPM->waitForFinished();
    Paquete = QString(procesoRPM->readAllStandardOutput());
    procesoRPM->waitForFinished();
    delete procesoRPM;
    QString res = QString(Paquete);
    QStringList Total = res.split(" ");
    if (Total.count() > 1)
        res = "";
    else
        res = Total.value(0);
    return res;
}

void recoverdrake::Modulos()
{
    drakeSistema drake;
    setUpdatesEnabled(false);
    QProgressDialog progress(tr("Cargando modulos y configuraciones... Espera por favor"), tr("Cancelar"), 0, 23, this);
    progress.show();
    for(i=0;i<23;i++)
    {
        qApp->processEvents();
        progress.setValue(i);
        if (progress.wasCanceled())
            break;
        if (i==0)
        {            
            QString X = drake.getResolution();
            QStringList LasX = X.split(" ");
            QString X2 = LasX.value(3);
            QStringList Parcial2 = X2.split("x");
            Dato1 = Parcial2.value(0).toInt();
            Dato2 = Parcial2.value(1).toInt();
            progress.setLabelText(tr("Recibiendo Arquitectura... Espera por favor"));
        }        
        if (i==1)
        {
            arqt = drake.getArquitectura();
            progress.setLabelText(tr("Recibiendo Usuario... Espera por favor"));
        }
        if (i==2)
        {
            user = drake.getUser();
            progress.setLabelText(tr("Recibiendo Tipo de Nucleo... Espera por favor"));
        }
        if (i==3)
        {
            Tip = drake.getTipKernel();
            progress.setLabelText(tr("Recibiendo Version del Nucleo... Espera por favor"));
        }
        if (i==4)
        {
            Ver = drake.getVerKernel();
            progress.setLabelText(tr("Recibiendo Revision del Nucleo... Espera por favor"));
        }
        if (i==5)
        {
            Rev = drake.getRevKernel();
            progress.setLabelText(tr("Recibiendo Directorio actual... Espera por favor"));
        }
        if (i==6)
        {
            Dir = drake.getDirActual();
            Vir = drake.getVirtual();
            progress.setLabelText(tr("Recibiendo Distro y version... Espera por favor"));
        }
        if (i==7)
        {
            Linux = drake.getLinux();
            progress.setLabelText(tr("Recibiendo Modulos instalados en el nucleo... Espera por favor"));
        }
        if (i==8)
        {
            Mod = drake.getModulo();
            progress.setLabelText(tr("Recibiendo Nombre de la Distro... Espera por favor"));
        }
        if (i==10)
        {
            Distro = drake.getDistrop();
            progress.setLabelText(tr("Recibiendo Memoria libre... Espera por favor"));
        }
        if (i==11)
        {
            free = drake.getFree();
            progress.setLabelText(tr("Recibiendo Espacio libre total... Espera por favor"));
        }
        if (i==12)
        {
            Total = drake.getDisco();
            progress.setLabelText(tr("Recibiendo Espacio libre de la raiz... Espera por favor"));
        }
        if (i==13)
        {
            Raiz = drake.getDiscR();
            Raiz=Raiz.right(6).left(3).remove("%");
            progress.setLabelText(tr("Recibiendo Espacio libre de home... Espera por favor"));
        }
        if (i==14)
        {
            Home = drake.getDiscH();
            Home=Home.right(10).left(3).remove("%");
            progress.setLabelText(tr("Recibiendo IP del router... Espera por favor"));
        }
        if (i==15)
        {
            ipRoute = drake.getIPRouter();
            QStringList Route = ipRoute.split(" ");
            ipRoute = Route.value(Route.count()-1);
            progress.setLabelText(tr("Recibiendo Resoluciones disponibles de pantalla... Espera por favor"));
        }
        if (i==16)
        {
            Resolution = drake.getResolucion();
            Resolution = Resolution.replace("minimum","Min.").replace("current","Actual").replace("maximum","Max.").remove("Screen 0:");
            progress.setLabelText(tr("Recibiendo Hostname... Espera por favor"));
        }
        if (i==17)
        {
            infoHost = drake.getHostname();
            progress.setLabelText(tr("Recibiendo Ethernet... Espera por favor"));
        }
        if (i==18)
        {
            Eth=drake.getEthernet();
            Eth=Eth.remove("          ");
            Eth=Eth.remove("RX bytes:");
            QStringList Eth0=Eth.split(" ");
            Eth = Eth0.value(0);
            EthF = Eth.toInt();
            progress.setLabelText(tr("Recibiendo Arquitectura... Espera por favor"));
        }
        if (i==19)
        {
            arqt = drake.getArquitectura();
            progress.setLabelText(tr("Recibiendo Distribucion... Espera por favor"));
        }
        if (i==20)
        {            
            dist = drake.getDistribucion();
            progress.setLabelText(tr("Recibiendo MAC... Espera por favor"));
        }
        if (i==21)
        {
            MAC = drake.getMAC(ipRoute);
            this->ui->label_161->setText(MAC);
            progress.setLabelText(tr("Configurando Estilo visual... Espera por favor"));
        }
        if (i==22)
        {
            if (Dato1 != 1280 || Dato2 != 1024)
            {
                if (Dato1 <= 1279 || Dato2 <= 1023)
                {
                    RX = 1;
                    ui->groupBox_4->hide();
                    ui->actionMostrar_Caracteristicas_especificas_de_tu_sistema_GNU_Linux->setVisible(false);
                    ui->lineEdit_14->setText(QString::fromUtf8(user));
                    ui->lineEdit_17->setText(QString::fromUtf8(Ver));
                    ui->lineEdit_20->setText(QString::fromUtf8(Tip));
                    ui->lineEdit_18->setText(QString::fromUtf8(Rev));
                    ui->lineEdit_19->setText(QString::fromUtf8(Resolution));
                    ui->textEdit_21->setText(QString::fromUtf8(Linux));
                    ui->lineEdit->setText(QString::fromUtf8(user));
                    ui->lineEdit_4->setText(QString::fromUtf8(Ver));
                    ui->lineEdit_5->setText(QString::fromUtf8(Tip));
                    ui->lineEdit_6->setText(QString::fromUtf8(Rev));
                    ui->lineEdit_7->setText(QString::fromUtf8(Resolution));
                    ui->textEdit_3->setText(QString::fromUtf8(Linux));
                    ui->lineEdit_15->setText(QString::fromUtf8(arqt));
                    ui->lineEdit_16->setText(QString::fromUtf8(dist));
                    ui->label_86->setText(QString::fromUtf8(release));
                    ui->lineEdit_2->setText(QString::fromUtf8(arqt));
                    ui->lineEdit_3->setText(QString::fromUtf8(dist));
                    ui->label_21->setText(QString::fromUtf8(release));
                }
                else
                    RX = 1;
            }
            else
            {
                RX = 0;
                ui->lineEdit->setText(QString::fromUtf8(user));
                ui->lineEdit_4->setText(QString::fromUtf8(Ver));
                ui->lineEdit_5->setText(QString::fromUtf8(Tip));
                ui->lineEdit_6->setText(QString::fromUtf8(Rev));
                ui->lineEdit_7->setText(QString::fromUtf8(Resolution));
                ui->textEdit_3->setText(QString::fromUtf8(Linux));
                ui->lineEdit_14->setText(QString::fromUtf8(user));
                ui->lineEdit_17->setText(QString::fromUtf8(Ver));
                ui->lineEdit_20->setText(QString::fromUtf8(Tip));
                ui->lineEdit_18->setText(QString::fromUtf8(Rev));
                ui->lineEdit_19->setText(QString::fromUtf8(Resolution));
                ui->textEdit_21->setText(QString::fromUtf8(Linux));
                ui->lineEdit_15->setText(QString::fromUtf8(arqt));
                ui->lineEdit_16->setText(QString::fromUtf8(dist));
                ui->label_86->setText(QString::fromUtf8(release));
                ui->lineEdit_2->setText(QString::fromUtf8(arqt));
                ui->lineEdit_3->setText(QString::fromUtf8(dist));
                ui->label_21->setText(QString::fromUtf8(release));
                ui->actionMostrar_Caracteristicas_especificas_de_tu_sistema_GNU_Linux->setVisible(false);
                ui->groupBox_4->show();
            }
            ui->textBrowser_2->setText(QString::fromUtf8(free));
            ui->textBrowser_3->setText(QString::fromUtf8(Total));
            ui->progressBar_2->setValue(Raiz.toInt());
            ui->progressBar_3->setValue(Home.toInt());
            ui->textEdit_2->setText(tr("<center><span style='font-size:12pt'><b>Sin alarmas activas"));
        }
    }
    progress.setValue(23);
    setUpdatesEnabled(true);
}

void recoverdrake::update()
{
    drakeSistema drake;
    free = drake.getFree();
    FreeTotal = drake.getFreeTotal();
    QString FTotal=FreeTotal.left(114).remove(0,85).left(9);
    QString FUsed=FreeTotal.left(114).remove(0,85).right(9);
    int Dif = 100-((FUsed.toInt()*100)/FTotal.toInt());
    ui->textBrowser_2->setText(QString::fromUtf8(free));
    ui->progressBar_4->setValue(Dif);
}

void recoverdrake::CrearUser()
{
    Refrescar();
    QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
    m.setText(tr("Es la primera vez que ejecutas RecoverDrake en esta version, por lo que tienes que crear un usuario nuevo con <b>Nivel 3</b>, ya que admin se ha deshabilitado para la proxima vez que accedas a RecoverDrake.<p>Si quieres habilitar de nuevo <b>admin</b> debera acceder a usuarios y volver a habilitarlo, pero no es aconsejable ya que cualquier puede acceder al programa sin un minimo de seguridad y puede desestabilizar el sistema.<p><b>PROCEDE CON CUIDADO!!!</b>."));
    m.exec();
    claves *clave=new claves(this);
    if (Stilo == "A")
        clave->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
    clave->exec();
    ui->progressBar->hide();
    ui->pushButton_2->hide();
    ui->label_13->hide();
    ui->tabWidget->setCurrentPage(pagina);
    ui->tabWidget_8->setCurrentPage(0);
}

void recoverdrake::Refrescar()
{
    pagina = ui->tabWidget->currentPageIndex();
    ui->tabWidget->setCurrentPage(0);
    ui->tabWidget_8->setCurrentPage(1);
    ui->progressBar->show();
    ui->pushButton_2->show();
    ui->label_13->show();
    drakeSistema drake;
    Total = drake.getDisco();
    ui->textBrowser_3->setText(QString::fromUtf8(Total));
    ui->pushButton->setEnabled(false);
    ui->pushButton_2->setEnabled(true);
    QSqlQuery queryConf(dbs);
    queryConf.exec("SELECT Audio128,Audio192,Audio320 FROM Opcion WHERE id=2");
    queryConf.first();
    QString cdad=queryConf.value(0).toString();
    QString cdad1=queryConf.value(1).toString();
    QString cdad2=queryConf.value(2).toString();
    if (cdad == "2")
        Audio="128k";
    else if (cdad1 == "2")
        Audio="192k";
    else if (cdad2 =="2")
        Audio="320k";
    QSqlQuery queryDalle(dbs);
    queryDalle.exec("SELECT zip_pa,sf_pa,mxs_pa,camaleon2_pa,camaleon1_pa,hachapro_pa,hacha2_pa,hacha1_pa,generico_pa,efsplitter_pa,camouflage_pa FROM Opcion2 WHERE id=2");
    queryDalle.first();
    QString Dalle1=queryDalle.value(0).toString();
    QString Dalle2=queryDalle.value(1).toString();
    QString Dalle3=queryDalle.value(2).toString();
    QString Dalle4=queryDalle.value(3).toString();
    QString Dalle5=queryDalle.value(4).toString();
    QString Dalle6=queryDalle.value(5).toString();
    QString Dalle7=queryDalle.value(6).toString();
    QString Dalle8=queryDalle.value(7).toString();
    QString Dalle9=queryDalle.value(8).toString();
    QString Dalle10=queryDalle.value(9).toString();
    QString Dalle11=queryDalle.value(10).toString();
    if (Dalle1 == "2")
        split="zip";
    else if (Dalle2 == "2")
        split="sf";
    else if (Dalle3 =="2")
        split="mxs";
    else if (Dalle4 =="2")
        split="kamaleon2";
    else if (Dalle5 =="2")
        split="kamaleon1";
    else if (Dalle6 =="2")
        split="hachapro";
    else if (Dalle7 =="2")
        split="hacha2";
    else if (Dalle8 =="2")
        split="hacha1";
    else if (Dalle9 =="2")
        split="generico";
    else if (Dalle10 =="2")
        split="efsplitter";
    else if (Dalle11=="2")
        split="camouflage";
    QSqlQuery queryTalla(dbs);
    queryTalla.exec("SELECT tamano1,tamano2,tamano3,tamano4,tamano5 FROM Opcion1 WHERE id=2");
    queryTalla.first();
    QString Talla1=queryTalla.value(0).toString();
    QString Talla2=queryTalla.value(1).toString();
    QString Talla3=queryTalla.value(2).toString();
    QString Talla4=queryTalla.value(3).toString();
    QString Talla5=queryTalla.value(4).toString();
    if (Talla1 == "2")
        talla="51200";
    else if (Talla2 == "2")
        talla="102400";
    else if (Talla3 =="2")
        talla="204800";
    else if (Talla4 =="2")
        talla="409600";
    else if (Talla5 =="2")
        talla="512000";
    QSqlQuery queryVelocidad(dbs);
    queryVelocidad.exec("SELECT Velocidad2x,Velocidad4x,Velocidad8x,Velocidad16x,Velocidad32x FROM Opcion4 WHERE id=2");
    queryVelocidad.first();
    QString Veloz1=queryVelocidad.value(0).toString();
    QString Veloz2=queryVelocidad.value(1).toString();
    QString Veloz3=queryVelocidad.value(2).toString();
    QString Veloz4=queryVelocidad.value(3).toString();
    QString Veloz5=queryVelocidad.value(4).toString();
    if (Veloz1 == "2")
        velocidad="2";
    else if (Veloz2 == "2")
        velocidad="4";
    else if (Veloz3 =="2")
        velocidad="8";
    else if (Veloz4 =="2")
        velocidad="16";
    else if (Veloz5 =="2")
        velocidad="32";
    QSqlQuery queryDev(dbs);
    queryDev.exec("SELECT Numero1,Numero2,Numero3 FROM Opcion3 WHERE id=2");
    queryDev.first();
    QString Dev1=queryDev.value(0).toString();
    QString Dev2=queryDev.value(1).toString();
    QString Dev3=queryDev.value(2).toString();
    Dev=""+Dev1+","+Dev2+","+Dev3+"";
    QSqlQuery queryResolucion(dbs);
    queryResolucion.exec("SELECT i480,i576,i2_576,p720,p1080,kapy FROM Opcion5 WHERE id=2");
    queryResolucion.first();
    QString Resol1=queryResolucion.value(0).toString();
    QString Resol2=queryResolucion.value(1).toString();
    QString Resol3=queryResolucion.value(2).toString();
    QString Resol4=queryResolucion.value(3).toString();
    QString Resol5=queryResolucion.value(4).toString();
    QString Resol6=queryResolucion.value(4).toString();
    if (Resol1 == "2")
        resolucion="480x720";
    else if (Resol2 == "2")
        resolucion="576x720";
    else if (Resol3 == "2")
        resolucion="1024x576";
    else if (Resol4 == "2")
        resolucion="720x1280";
    else if (Resol5 == "2")
        resolucion="1080x1920";
    else if (Resol6 == "2")
        resolucion="592x352";
    QSqlQuery queryTime(dbs);
    queryTime.exec("SELECT tiempo120,tiempo90,tiempo60,tiempo30 FROM Parental WHERE id=2");
    queryTime.first();
    QString Time1=queryTime.value(0).toString();
    QString Time2=queryTime.value(1).toString();
    QString Time3=queryTime.value(2).toString();
    QString Time4=queryTime.value(3).toString();
    if (Time1 == "2")
    {
        tiempo="120";
        Ta = "01";
        Tb = "59";
        Tc = "59";
    }
    else if (Time2 == "2")
    {
        tiempo="90";
        Ta = "01";
        Tb = "29";
        Tc = "59";
    }
    else if (Time3 == "2")
    {
        tiempo="60";
        Ta = "0";
        Tb = "59";
        Tc = "59";
    }
    else if (Time4 == "2")
    {
        tiempo="30";
        Ta = "0";
        Tb = "29";
        Tc = "59";
    }
    QSqlQuery queryWifi(dbs);
    queryWifi.exec("SELECT essid,conexion FROM wifi WHERE id=2");
    queryWifi.first();
    Essid=queryWifi.value(0).toString();
    ConectWifi=queryWifi.value(1).toString();
    QSqlQuery queryethernet(dbs);
    queryethernet.exec("SELECT conexion FROM ethernet WHERE id=2");
    queryethernet.first();
    ConectEthernet=queryethernet.value(0).toString();
    QSqlQuery queryRed(dbs);
    queryRed.exec("SELECT ethernet,wifi FROM red WHERE id=2");
    queryRed.first();
    QString Red1=queryRed.value(0).toString();
    QString Red2=queryRed.value(1).toString();
    if (Red1 == "2")
        TipoRed = "ETH";
    else if (Red2 == "2")
        TipoRed = "WIF";
    ui->pushButton->setEnabled(true);
}

void recoverdrake::Actualizar()
{
    ui->tabWidget->setCurrentPage(pagina);
    ui->tabWidget_8->setCurrentPage(0);
    ui->progressBar->hide();
    ui->pushButton_2->hide();
    ui->label_13->hide();
    QSqlQuery queryWifi(dbs);
    queryWifi.exec("SELECT essid,conexion FROM wifi WHERE id=2");
    queryWifi.first();
    Essid=queryWifi.value(0).toString();
    ConectWifi=queryWifi.value(1).toString();
    QSqlQuery queryethernet(dbs);
    queryethernet.exec("SELECT conexion FROM ethernet WHERE id=2");
    queryethernet.first();
    ConectEthernet=queryethernet.value(0).toString();
    QSqlQuery queryRed(dbs);
    queryRed.exec("SELECT ethernet,wifi FROM red WHERE id=2");
    queryRed.first();
    QString Red1=queryRed.value(0).toString();
    QString Red2=queryRed.value(1).toString();
    if (Red1 == "2")
        TipoRed = "ETH";
    else if (Red2 == "2")
        TipoRed = "WIF";
    ui->pushButton->setEnabled(true);
    ui->pushButton_2->setEnabled(false);
    ui->progressBar_2->setValue(Raiz.toInt());
    ui->progressBar_3->setValue(Home.toInt());
    drakeSistema drake;
    Raiz = drake.getDiscR();
    Home = drake.getDiscH();
    IPconexion = drake.getIPconexion("www.google.com");
    if (IPconexion == "")
        IPconexion = drake.getIPconexion("www.ebay.com");
    if (IPconexion == "")
        IPconexion = drake.getIPconexion("www.wikipedia.org");
    ip = drake.getIP();
    Resolution = drake.getResolucion();
    Resolution = Resolution.replace("minimum","Min.").replace("current","Actual").replace("maximum","Max.").remove("Screen 0:");
    Home=Home.right(10).left(3).remove("%");
    Raiz=Raiz.right(6).left(3).remove("%");
    ui->textEdit_9->setText(QString::fromUtf8(rpm));
    ui->textEdit_6->setText(QString::fromUtf8(du));
    ui->lineEdit->setText(QString::fromUtf8(user));
    ui->lineEdit_2->setText(QString::fromUtf8(arqt));
    ui->lineEdit_3->setText(QString::fromUtf8(dist));
    ui->lineEdit_4->setText(QString::fromUtf8(Ver));
    ui->lineEdit_5->setText(QString::fromUtf8(Tip));
    ui->lineEdit_6->setText(QString::fromUtf8(Rev));
    ui->lineEdit_7->setText(QString::fromUtf8(Resolution));
    ui->textEdit_3->setText(QString::fromUtf8(Linux));
    ui->textEdit_10->setText(QString::fromUtf8(Pci));
    ui->textEdit_11->setText(QString::fromUtf8(infoPro));
    ui->textEdit_5->setText(QString::fromUtf8(Mod));
    ui->textEdit_7->setText(QString::fromUtf8(repo));
    ui->textEdit_8->setText(QString::fromUtf8(red));
    ui->label_21->setText(QString::fromUtf8(release));
    ui->textBrowser_2->setText(QString::fromUtf8(free));
    ui->textBrowser_3->setText(QString::fromUtf8(Total));
    ui->progressBar_2->setValue(Raiz.toInt());
    ui->progressBar_3->setValue(Home.toInt());
    ui->textEdit_12->setText(QString::fromUtf8(Bios));
    ui->label_7->setText(Usu);
    ui->label_9->setText(Nivel);
    ui->label_161->setText(MAC);
    if (ipRoute!="")
    {
        if (EthF > 0)
            this->ui->label_22->setText(""+ipRoute+"");
        else
            this->ui->label_22->setText(""+ipRoute+" / "+Essid+"");
    }
    else if (ipRoute == "")
        this->ui->label_22->setText(tr("Utilizando Ethernet"));
    if (ip == "")
        this->ui->label_19->setText(tr("Sin Acceso a Red"));
    else if (ip != "")
        this->ui->label_19->setText(QString::fromUtf8(ip));
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+tr("-- <FONT COLOR=\"BLUE\"><B>...ESPERANDO NUEVA ACCION/PROCESO A REALIZAR...</B>"));
}

void recoverdrake::ActualizarTodo()
{ 
    QFuture<void> f1 = QtConcurrent::run(this, &recoverdrake::Paquetes);
    Q_UNUSED(f1);
    setUpdatesEnabled(false);
    QProgressDialog progress(tr("Actualizando configuraciones... Espera por favor"), tr("Cancelar"), 0, 8, this);
    progress.show();
    for(int i=0;i<8;i++)
    {
        qApp->processEvents();
        progress.setValue(i);
        if (progress.wasCanceled())
            break;
        if (i==0)
        {
            Stilo = "B";
            QSqlQuery queryDefecto(dbs);
            queryDefecto.exec("SELECT Defecto FROM Miscelanea WHERE id=2");
            queryDefecto.first();
            cantidadDefecto=queryDefecto.value(0).toString();
            if (cantidadDefecto == "0")
            {
                ui->menuBar->setStyleSheet("font:Bold; font: 8pt; color: rgb(255, 255, 255); alternate-background-color: rgb(213, 209, 207); gridline-color: rgb(214, 214, 214); border-left-color: rgb(0, 0, 255); border-bottom-color: rgb(0, 0, 255); border-right-color: rgb(0, 0, 255); border-top-color: rgb(0, 0, 255); selection-background-color: rgb(229, 229, 172); background-color: rgb(50, 50, 37); border-color: rgb(170, 170, 0)");
                ui->toolBar->setStyleSheet("background-color: rgb(77, 77, 57)");
                ui->toolBar_2->setStyleSheet("background-color: rgb(77, 77, 57)");
                QSqlQuery query47(dbs);
                query47.exec("SELECT Fuente FROM Font WHERE id=2");
                query47.first();
                cantidad47=query47.value(0).toString();
                QSqlQuery query48(dbs);
                query48.exec("SELECT Estilo FROM Font WHERE id=2");
                query48.first();
                cantidad48=query48.value(0).toString();
                QSqlQuery query49(dbs);
                query49.exec("SELECT Talla FROM Font WHERE id=2");
                query49.first();
                cantidad49=query49.value(0).toString();
                if (cantidad48 == "Regular")
                {
                    DatoTalla = "normal";
                    DatoNegro = "normal";
                }
                if (cantidad48 == "Italic")
                {
                    DatoTalla = "italic";
                    DatoNegro = "normal";
                }
                if (cantidad48 == "Bold Italic")
                {
                    DatoTalla = "italic";
                    DatoNegro = "bold";
                }
                if (cantidad48 == "Bold")
                {
                    DatoTalla = "normal";
                    DatoNegro = "bold";
                }
                QSqlQuery query50(dbs);
                query50.exec("SELECT ColorTexto FROM Color WHERE id=2");
                query50.first();
                cantidad50=query50.value(0).toString();
                QSqlQuery query51(dbs);
                query51.exec("SELECT ColorFondo FROM Color WHERE id=2");
                query51.first();
                cantidad51=query51.value(0).toString();
                Stilo = "A";
                setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            }
        }
        if (i==1)
        {
            QString Menus;
            QSqlQuery queryMenu(dbs);
            queryMenu.exec("SELECT Tipo_Menu FROM Menus WHERE id=2");
            queryMenu.first();
            Menus=queryMenu.value(0).toString();
            if (Menus == "0")
            {
                ui->actionSalvaguardar_rpm_s->setVisible(false);
                ui->actionRecuperar_rpm_s->setVisible(false);
                ui->actionEliminar_paquetes_huerfanos->setVisible(false);
                ui->actionRecuperar_paquetes_huerfanos_Eliminados->setVisible(false);
                ui->actionActualizar_sistema->setVisible(false);
                ui->menuAvi_a->menuAction()->setVisible(false);
                ui->menuConvertir_mpg_a->menuAction()->setVisible(false);
                ui->menuConvertir_wmv_a->menuAction()->setVisible(false);
                ui->menuConvertir_flv_a->menuAction()->setVisible(false);
                ui->menuConvertir_3gp_a->menuAction()->setVisible(false);
                ui->menuConvertir_mp4_a->menuAction()->setVisible(false);
                ui->menuConvertir_mp3_a->menuAction()->setVisible(false);
                ui->menuConvertir_wma_a->menuAction()->setVisible(false);
                ui->menuConvertir_wav_a->menuAction()->setVisible(false);
                ui->menuConvertir_ac3_a->menuAction()->setVisible(false);
                ui->actionHacer_CD_de_video->setVisible(false);
                ui->actionHacer_CD_DVD_de_audio->setVisible(false);
                ui->actionHacer_CD_DVD_de_datos->setVisible(false);
                ui->actionHacer_DVD_de_video->setVisible(false);
                ui->actionMantenimiento_de_rpm_s->setVisible(true);
                ui->actionActualizar_sistema_interactivo->setVisible(true);
                ui->actionEliminiar_Recuperar_paquetes_huerfanos_interactivo->setVisible(true);
                ui->actionConversor_de_formatos_de_Audio_Interactivo->setVisible(true);
                ui->actionConversor_de_formatos_de_video_Interactivo->setVisible(true);
                ui->actionGrabador_de_CD_DVD_Interactivo->setVisible(true);
            }
            else if (Menus == "1")
            {
                ui->actionActualizar_sistema_interactivo->setVisible(false);
                ui->actionEliminiar_Recuperar_paquetes_huerfanos_interactivo->setVisible(false);
                ui->actionConversor_de_formatos_de_Audio_Interactivo->setVisible(false);
                ui->actionMantenimiento_de_rpm_s->setVisible(false);
                ui->actionConversor_de_formatos_de_video_Interactivo->setVisible(false);
                ui->actionGrabador_de_CD_DVD_Interactivo->setVisible(false);
                ui->actionSalvaguardar_rpm_s->setVisible(true);
                ui->actionRecuperar_rpm_s->setVisible(true);
                ui->actionEliminar_paquetes_huerfanos->setVisible(true);
                ui->actionRecuperar_paquetes_huerfanos_Eliminados->setVisible(true);
                ui->actionActualizar_sistema->setVisible(true);
                ui->menuAvi_a->menuAction()->setVisible(true);
                ui->menuConvertir_mpg_a->menuAction()->setVisible(true);
                ui->menuConvertir_wmv_a->menuAction()->setVisible(true);
                ui->menuConvertir_flv_a->menuAction()->setVisible(true);
                ui->menuConvertir_3gp_a->menuAction()->setVisible(true);
                ui->menuConvertir_mp4_a->menuAction()->setVisible(true);
                ui->menuConvertir_mp3_a->menuAction()->setVisible(true);
                ui->menuConvertir_wma_a->menuAction()->setVisible(true);
                ui->menuConvertir_wav_a->menuAction()->setVisible(true);
                ui->menuConvertir_ac3_a->menuAction()->setVisible(true);
                ui->actionHacer_CD_de_video->setVisible(true);
                ui->actionHacer_CD_DVD_de_audio->setVisible(true);
                ui->actionHacer_CD_DVD_de_datos->setVisible(true);
                ui->actionHacer_DVD_de_video->setVisible(true);
            }
            else if (Menus == "2")
            {
                ui->actionSalvaguardar_rpm_s->setVisible(true);
                ui->actionRecuperar_rpm_s->setVisible(true);
                ui->actionEliminar_paquetes_huerfanos->setVisible(true);
                ui->actionRecuperar_paquetes_huerfanos_Eliminados->setVisible(true);
                ui->actionActualizar_sistema->setVisible(true);
                ui->menuAvi_a->menuAction()->setVisible(true);
                ui->menuConvertir_mpg_a->menuAction()->setVisible(true);
                ui->menuConvertir_wmv_a->menuAction()->setVisible(true);
                ui->menuConvertir_flv_a->menuAction()->setVisible(true);
                ui->menuConvertir_3gp_a->menuAction()->setVisible(true);
                ui->menuConvertir_mp4_a->menuAction()->setVisible(true);
                ui->menuConvertir_mp3_a->menuAction()->setVisible(true);
                ui->menuConvertir_wma_a->menuAction()->setVisible(true);
                ui->menuConvertir_wav_a->menuAction()->setVisible(true);
                ui->menuConvertir_ac3_a->menuAction()->setVisible(true);
                ui->actionActualizar_sistema_interactivo->setVisible(true);
                ui->actionEliminiar_Recuperar_paquetes_huerfanos_interactivo->setVisible(true);
                ui->actionConversor_de_formatos_de_Audio_Interactivo->setVisible(true);
                ui->actionConversor_de_formatos_de_video_Interactivo->setVisible(true);
                ui->actionMantenimiento_de_rpm_s->setVisible(true);
                ui->actionHacer_CD_de_video->setVisible(true);
                ui->actionHacer_CD_DVD_de_audio->setVisible(true);
                ui->actionHacer_CD_DVD_de_datos->setVisible(true);
                ui->actionHacer_DVD_de_video->setVisible(true);
                ui->actionGrabador_de_CD_DVD_Interactivo->setVisible(true);
            }
        }
        if (i==2)
        {
            QSqlQuery consola(dbs);
            consola.exec("SELECT Fondo FROM consola WHERE id=2");
            consola.first();
            QString konsola=consola.value(0).toString();
            if (konsola == "0")
                ui->textEdit->setStyleSheet("background-color: rgb(0, 0, 0); color: rgb(255, 255, 255); font-size: 9pt; font-family: Sans Serif");
            else if (konsola == "2")
                ui->textEdit->setStyleSheet(QString::fromUtf8("background-color: rgb(0, 0, 0); border-image: url(:/Imagenes/fondoKonsole.png); color: rgb(255, 255, 255); font: 9pt \"Sans Serif\";"));
        }
        if (i==3)
        {
            QString Aplicacion;
            QSqlQuery queryAplicacion(dbs);
            queryAplicacion.exec("SELECT Aplicacion FROM Aplicacion WHERE id=2");
            queryAplicacion.first();
            Aplicacion=queryAplicacion.value(0).toString();
            if (Aplicacion == "0")
                Window = 0;
            else if (Aplicacion == "1")
                Window = 1;
        }
        if (i==4)
        {
            QString chat;
            QSqlQuery queryChat(dbs);
            queryChat.exec("SELECT visionado FROM chat WHERE id=2");
            queryChat.first();
            chat=queryChat.value(0).toString();
            if (chat == "0")
                Chat = 0;
            else if (chat == "1")
                Chat = 1;
            ui->pushButton_50->hide();
            if (Chat == 1)
                ui->pushButton_49->setText(tr("Ir a Canal IRC::#blogdrake"));
            else if (Chat == 0)
                ui->pushButton_49->setText(tr("Mostrar Canal IRC::#blogdrake"));
        }
        if (i==5)
        {
            drakeSistema drake;
            QString X = drake.getResolution();
            QStringList LasX = X.split(" ");
            QString X2 = LasX.value(3);
            QStringList Parcial2 = X2.split("x");
            Dato1 = Parcial2.value(0).toInt();
            Dato2 = Parcial2.value(1).toInt();
            if (Dato1 >= 1280 || Dato2 >= 1024)
            {
                if (Dato1 == 1280 && Dato2 == 1024)
                    RX = 0;
                else
                    RX = 1;
                QString Formato;
                QSqlQuery queryFormato(dbs);
                queryFormato.exec("SELECT Aspecto FROM Formato WHERE id=2");
                queryFormato.first();
                Formato=queryFormato.value(0).toString();
                if (Formato == "0")
                    Aspecto = 0;
                else if (Formato == "1")
                    Aspecto = 1;
                if (Aspecto == 1)
                {
                    ui->tabWidget_8->insertTab(2,ui->tab_11,"Sistema");
                    ui->tabWidget_8->setTabIcon(0,QIcon(":/Imagenes/ejecutar.png"));
                    if (RX == 0)
                    {
                        ui->actionMostrar_Caracteristicas_especificas_de_tu_sistema_GNU_Linux->setVisible(false);
                        ui->groupBox_4->show();
                    }
                    else
                    {
                        ui->actionMostrar_Caracteristicas_especificas_de_tu_sistema_GNU_Linux->setVisible(true);
                        ui->groupBox_4->hide();
                    }
                }
                else if (Aspecto == 0)
                {
                    int Pos = ui->tabWidget_8->indexOf(ui->tab_11);
                    ui->tabWidget_8->removeTab(Pos);
                    if (RX == 1)
                    {
                        ui->actionMostrar_Caracteristicas_especificas_de_tu_sistema_GNU_Linux->setVisible(true);
                        ui->groupBox_4->hide();
                    }
                    else
                    {
                        ui->actionMostrar_Caracteristicas_especificas_de_tu_sistema_GNU_Linux->setVisible(false);
                        ui->groupBox_4->show();
                    }
                }
            }
        }
        if (i==6)
        {
            QSqlQuery queryDependencia(dbs);
            queryDependencia.exec("SELECT Dependencias FROM Miscelanea WHERE id=2");
            queryDependencia.first();
            Dependencia=queryDependencia.value(0).toString();
        }
        if (i==7)
        {
            QString activo;
            int banda1,banda2,banda3,banda4,banda5,banda6,banda7,banda8,banda9,banda10;
            QSqlQuery Efectos(dbs);
            Efectos.exec("SELECT activo,banda1,banda2,banda3,banda4,banda5,banda6,banda7,banda8,banda9,banda10 FROM Ecualizador WHERE id=2");
            Efectos.first();
            if (Efectos.isValid())
            {
                activo=Efectos.value(0).toString();
                banda1=Efectos.value(1).toInt();
                banda2=Efectos.value(2).toInt();
                banda3=Efectos.value(3).toInt();
                banda4=Efectos.value(4).toInt();
                banda5=Efectos.value(5).toInt();
                banda6=Efectos.value(6).toInt();
                banda7=Efectos.value(7).toInt();
                banda8=Efectos.value(8).toInt();
                banda9=Efectos.value(9).toInt();
                banda10=Efectos.value(10).toInt();
            }
            if (activo == "Si")
            {
                QList<Phonon::EffectParameter> parameters = effect->parameters();
                foreach(Phonon::EffectParameter parameter, parameters)
                {
                    if (parameter.name() == "band0")
                        effect->setParameterValue(parameter,banda1);
                    else if (parameter.name() == "band1")
                        effect->setParameterValue(parameter,banda2);
                    else if (parameter.name() == "band2")
                        effect->setParameterValue(parameter,banda3);
                    else if (parameter.name() == "band3")
                        effect->setParameterValue(parameter,banda4);
                    else if (parameter.name() == "band4")
                        effect->setParameterValue(parameter,banda5);
                    else if (parameter.name() == "band5")
                        effect->setParameterValue(parameter,banda6);
                    else if (parameter.name() == "band6")
                        effect->setParameterValue(parameter,banda7);
                    else if (parameter.name() == "band7")
                        effect->setParameterValue(parameter,banda8);
                    else if (parameter.name() == "band8")
                        effect->setParameterValue(parameter,banda9);
                    else if (parameter.name() == "band9")
                        effect->setParameterValue(parameter,banda10);
                }
            }
        }        
    }
    progress.setValue(8);
    setUpdatesEnabled(true);
}

void recoverdrake::Arranque()
{   
    QStringList comandos;
    bool opcion;
    bool opcion2;
    bool opcion3;
    bool opcion6;
    bool opcion1;
    bool opcion4;
    bool opcion5;
    bool opcion7;
    bool opcion8;
    bool opcion9;
    bool opcion10;
    bool opcion11;
    bool opcion12;
    bool opcion13;
    bool opcion14;
    setUpdatesEnabled(false);
    QProgressDialog progress(tr("Preparando arranque... Espera por favor"), tr("Cancelar"), 0, 16, this);
    progress.show();
    for(i=0;i<16;i++)
    {
        qApp->processEvents();
        progress.setValue(i);
        if (progress.wasCanceled())
            break;
        if (i==0)
        {
           QSqlQuery queryReg(dbs);
           queryReg.exec("SELECT serie FROM Registro");
           queryReg.first();
           QString Registro=queryReg.value(0).toString();
           if (Registro != "")
               ui->label_65->setText(tr("<FONT COLOR=\"BLUE\">Version registrada nº ")+Registro+".");
           else
               ui->label_65->setText(tr("<FONT COLOR=\"RED\">Version no registrada."));
        }
        if (i==1)
        {
           if (RX == 0)
               ui->groupBox_4->show();
           else
               ui->groupBox_4->hide();
           ui->pushButton_2->hide();
           ui->progressBar->hide();
           ui->label_13->hide();
           ui->tabWidget->setCurrentPage(pagina);
           ui->tabWidget_8->setCurrentPage(0);
           ui->webView->hide();
           SegundaFuncion = 0;
        }
        if (i==2)
        {
           opcion4=ui->actionActivar_Logs_de_sucesos->isChecked();
           opcion1=ui->actionComprabar_depndencias_RecoverDrake->isChecked();
           opcion5=ui->actionActivar_Mensajes_de_aplicaciones->isChecked();
           opcion7=ui->actionActivar_Comprobaci_n_de_wifi->isChecked();
           opcion=ui->actionActivar_Desactivar_inicio_con_Linux->isChecked();
           opcion2=ui->actionSugerencias_y_avisos->isChecked();
           opcion3=ui->actionMinimizar_al_Salir->isChecked();
           opcion6=ui->actionDesactivar_pantalla_inicio->isChecked();
           opcion8=ui->actionSupervisar_visualizacion_previa_en_dolphin->isChecked();
           if (RX == 1)
               opcion9=ui->actionMostrar_Caracteristicas_especificas_de_tu_sistema_GNU_Linux->isChecked();
           opcion10=ui->actionLiberar_memoria_de_Cache->isChecked();
           opcion11=ui->actionDesactivar_Barra_de_menu_superios->isChecked();
           opcion12=ui->actionDesactivar_Barra_de_menu_inferior->isChecked();
           opcion13=ui->actionBloquear_salvapantallas->isChecked();
           opcion14=ui->actionActivar_control_de_vigilancia_de_error_de_sesiones->isChecked();
           QSettings seting("myorg","Aplica");
           seting.setValue("opcion1",opcion1);
           seting.setValue("opcion4",opcion4);
           seting.setValue("opcion5",opcion5);
           seting.setValue("opcion7",opcion7);
           seting.setValue("opcion8",opcion8);
           seting.setValue("opcion9",opcion9);
           seting.setValue("opcion10",opcion10);
           seting.setValue("opcion11",opcion11);
           seting.setValue("opcion12",opcion12);
           seting.setValue("opcion13",opcion13);
           seting.setValue("opcion14",opcion14);
           seting.value("opcion",false);
           seting.value("opcion2",false);
           seting.value("opcion3",false);
           seting.value("opcion6",false);
           if (opcion == true)
           {
               ui->actionActivar_Desactivar_inicio_con_Linux->setIcon(QIcon(":/Imagenes/good.png"));
               QString hora = QTime::currentTime().toString("hh:mm:ss");
               ui->textEdit_4->append(""+hora+"-- Inicio con Linux activado.");
           }
        }
        if (i==3)
        {
           if (opcion2 == true)
           {
               ui->actionSugerencias_y_avisos->setIcon(QIcon(":/Imagenes/good.png"));
               QString hora = QTime::currentTime().toString("hh:mm:ss");
               ui->textEdit_4->append(""+hora+"-- Sugerencias y avisos activado.");
           }
        }
        if (i==4)
        {
           if (opcion3 == true)
           {
               ui->actionMinimizar_al_Salir->setIcon(QIcon(":/Imagenes/good.png"));
               QString hora = QTime::currentTime().toString("hh:mm:ss");
               ui->textEdit_4->append(""+hora+"-- Minimizar al salir activado.");
           }
        }
        if (i==5)
        {
            if (opcion6 == true)
            {
                ui->actionDesactivar_pantalla_inicio->setIcon(QIcon(":/Imagenes/good.png"));
                QString hora = QTime::currentTime().toString("hh:mm:ss");
                ui->textEdit_4->append(""+hora+"-- <b><FONT COLOR=\"RED\">Desactivada pantalla de inicio.");
            }
        }
        if (i==6)
        {
            if (opcion4==true)
            {
                Logs = "S";
                ui->actionActivar_Logs_de_sucesos->setIcon(QIcon(":/Imagenes/good.png"));
                system("echo >> /usr/share/RecoverDrake/RecoverDrake.log");
                system("echo ############################################################### >> /usr/share/RecoverDrake/RecoverDrake.log");
                system("echo ############################################################### >> /usr/share/RecoverDrake/RecoverDrake.log");
                system(QString::fromUtf8("echo Fecha de ingreso... >> /usr/share/RecoverDrake/RecoverDrake.log"));
                system("date >> /usr/share/RecoverDrake/RecoverDrake.log");
                system("echo ############################################################### >> /usr/share/RecoverDrake/RecoverDrake.log");
                system("echo ############################################################### >> /usr/share/RecoverDrake/RecoverDrake.log");
                QString hora = QTime::currentTime().toString("hh:mm:ss");
                ui->textEdit_4->append(""+hora+"-- Log de sucesos activado.");
            }
        }
        if (i==7)
        {
            if (opcion5==true)
            {
                ui->actionActivar_Mensajes_de_aplicaciones->setIcon(QIcon(":/Imagenes/good.png"));
                Mensaka="Activo";
                QString hora = QTime::currentTime().toString("hh:mm:ss");
                ui->textEdit_4->append(""+hora+"-- <b><FONT COLOR=\"RED\">Mensajes de aplicaciones desactivado.");
            }
        }
        if (i==8)
        {
            if (opcion11==true)
            {
                ui->actionDesactivar_Barra_de_menu_superios->setIcon(QIcon(":/Imagenes/good.png"));
                QString hora = QTime::currentTime().toString("hh:mm:ss");
                ui->textEdit_4->append(""+hora+"-- <b><FONT COLOR=\"RED\">Barra de menu superior desactivada.");
                ui->toolBar->hide();
                Puntero1 = 1;
            }
        }
        if (i==8)
        {
            if (opcion12==true)
            {
                ui->actionDesactivar_Barra_de_menu_inferior->setIcon(QIcon(":/Imagenes/good.png"));
                QString hora = QTime::currentTime().toString("hh:mm:ss");
                ui->textEdit_4->append(""+hora+"-- <b><FONT COLOR=\"RED\">Barra de menu inferior desactivada.");
                ui->toolBar_2->hide();
                Puntero = 1;
            }
        }
        if (i==9)
        {
            if (opcion7==true)
            {
                if ( TipoRed == "ETH")
                {
                    if (ConectEthernet == "Sin definir")
                    {
                        int respuesta = 0;
                        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Red Ethernet")),
                                    QString::fromUtf8(tr("<center><b>Definir datos de conexion</b></center><p>"
                                    "No tienes definido la Conexion de tu red en las preferencias.<p>"
                                    "Son necesarias para que puedas controlar tu ethernet.<p>"
                                    "Se accedera a las preferencias para que puedas definirlas.<p>"
                                    "Luego tendras que volver a marcar la opcion de Activar comprobacion de red.<p>"
                                    "&iquest;Acceder a la configuración de red?")), QMessageBox::Ok, QMessageBox::No);
                        if (respuesta == QMessageBox::Ok)
                        {
                            opciones *opcion=new opciones(this);
                            if (Stilo == "A")
                                opcion->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                            opcion->exec();
                            this->Actualizar();
                            ui->actionActivar_Comprobaci_n_de_wifi->setChecked(false);
                        }
                        else
                        {
                            ui->tabWidget->setCurrentPage(pagina);
                            ui->tabWidget_8->setCurrentPage(0);
                            return;
                        }
                    }
                    ui->actionActivar_Comprobaci_n_de_wifi->setIcon(QIcon(":/Imagenes/good.png"));
                    QString hora = QTime::currentTime().toString("hh:mm:ss");
                    ui->textEdit_4->append(""+hora+"-- Comprobacion de wifi/ethernet activada.");
                    Wf = 1;
                    ControlWifi = new QTimer(this);
                    connect(ControlWifi, SIGNAL(timeout()), this, SLOT(CtrlWifi()));
                    ControlWifi->start(300000);
                }
                else if ( TipoRed == "WIF")
                {
                    if (Essid == "Sin definir" || ConectWifi == "Sin Definir")
                    {
                        int respuesta = 0;
                        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Red Wifi")),
                                    QString::fromUtf8(tr("<center><b>Definir datos de conexion</b></center><p>"
                                    "No tienes definido el Essid o Conexion de tu red en las preferencias.<p>"
                                    "Son necesarias para que puedas controlar tu wifi.<p>"
                                    "Se accedera a las preferencias para que puedas definirlas.<p>"
                                    "Luego tendras que volver a marcar la opcion de Activar comprobacion de red.<p>"
                                    "&iquest;Acceder a la configuración de red?")), QMessageBox::Ok, QMessageBox::No);
                        if (respuesta == QMessageBox::Ok)
                        {
                            opciones *opcion=new opciones(this);
                            if (Stilo == "A")
                                opcion->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                            opcion->exec();
                            this->Actualizar();
                            ui->actionActivar_Comprobaci_n_de_wifi->setChecked(false);
                        }
                        else
                        {
                            ui->tabWidget->setCurrentPage(pagina);
                            ui->tabWidget_8->setCurrentPage(0);
                            return;
                        }
                    }
                    ui->actionActivar_Comprobaci_n_de_wifi->setIcon(QIcon(":/Imagenes/good.png"));
                    QString hora = QTime::currentTime().toString("hh:mm:ss");
                    ui->textEdit_4->append(""+hora+"-- Comprobacion de wifi/ethernet activada.");
                    Wf = 1;
                    ControlWifi = new QTimer(this);
                    connect(ControlWifi, SIGNAL(timeout()), this, SLOT(CtrlWifi()));
                    ControlWifi->start(300000);
                }
            }
        }
        if (i==10)
        {
            if (opcion8==true)
            {
               ui->actionSupervisar_visualizacion_previa_en_dolphin->setIcon(QIcon(":/Imagenes/good.png"));
               QString hora = QTime::currentTime().toString("hh:mm:ss");
               ui->textEdit_4->append(""+hora+"-- Supervisar uso excesivo de memoria por Dolphin activado.");
               ControlDolphin = new QTimer(this);
               connect(ControlDolphin, SIGNAL(timeout()), this, SLOT(CtrlDolphin()));
               ControlDolphin->start(300000);
            }
        }
        if (i==11)
        {
            if (opcion9 == true)
            {
                if (Aspecto == 0)
                {
                    if (RX == 1)
                    {
                        ui->actionMostrar_Caracteristicas_especificas_de_tu_sistema_GNU_Linux->setIcon(QIcon(":/Imagenes/good.png"));
                        QString hora = QTime::currentTime().toString("hh:mm:ss");
                        ui->textEdit_4->append(""+hora+"-- Mostrar \"Caracteristicas especificas de tu sistemas GNU/Linux\".");
                        ui->groupBox_4->show();
                        ui->pushButton_9->setText(tr("Ocultar \"Caracteristicas especificas de tu sistema GNU/Linux\""));
                    }
                }
            }
        }
        if (i==12)
        {
            if (opcion10 == true)
            {
                ui->actionLiberar_memoria_de_Cache->setIcon(QIcon(":/Imagenes/good.png"));
                QString hora = QTime::currentTime().toString("hh:mm:ss");
                ui->textEdit_4->append(""+hora+"-- Liberador de memoria de Cache activado.");
                ControlCache = new QTimer(this);
                connect(ControlCache, SIGNAL(timeout()), this, SLOT(CtrlCache()));
                ControlCache->start(600000);
                QFuture<void> f1 = QtConcurrent::run(this, &recoverdrake::Liberador);
                Q_UNUSED(f1);
            }
        }
        if (i==13)
        {
            if (opcion13 == true)
            {
               ui->actionBloquear_salvapantallas->setIcon(QIcon(":/Imagenes/good.png"));
               QString hora = QTime::currentTime().toString("hh:mm:ss");
               ui->textEdit_4->append(""+hora+"-- Bloqueo de Salvapantallas activado.");
               ControlScreen = new QTimer(this);
               connect(ControlScreen, SIGNAL(timeout()), this, SLOT(CtrlScreen()));
               ControlScreen->start(30000);
            }
        }
        if (i==14)
        {
            if (opcion14 == true)
            {
               ui->actionActivar_control_de_vigilancia_de_error_de_sesiones->setIcon(QIcon(":/Imagenes/good.png"));
               QString hora = QTime::currentTime().toString("hh:mm:ss");
               ui->textEdit_4->append(""+hora+tr("-- Control de error de sesiones activado."));
               ControlSesion = new QTimer(this);
               connect(ControlSesion, SIGNAL(timeout()), this, SLOT(CtrlSesion()));
               ControlSesion->start(3600000);
            }
        }
        if (i==15)
        {
            if (opcion1==true)
            {
                ui->actionComprabar_depndencias_RecoverDrake->setIcon(QIcon(":/Imagenes/good.png"));
                QString hora = QTime::currentTime().toString("hh:mm:ss");
                ui->textEdit_4->append(""+hora+"-- Comprobacion de dependencias activada.");
                Reconfigurar = "Si";
                QString cmdx=QString::fromUtf8(tr("echo Comprobando dependencias necesarias..."));
                QString comando="urpmi -a --auto --force zenity";
                QString comando1="urpmi -a --auto --force sudo";
                QString comando2="urpmi -a --auto --force bash";
                QString comando3="urpmi -a --auto --force kwrite";
                QString comando4="urpmi -a --auto --force stdc++";
                QString comando5="urpmi -a --auto --force ndiswrapper";
                QString comando6="urpmi -a --auto --force photorec";
                QString comando7="urpmi -a --auto --force testdisk";
                QString comando8="urpmi -a --auto --force ntfs-config";
                QString comando9="urpmi -a --auto --force cdparanoia";
                QString comando10="urpmi -a --auto --force lame";
                QString comando11="urpmi -a --auto --force ffmpeg";
                QString comando12="urpmi -a --auto --force dvdauthor";
                QString comando13="urpmi -a --auto --force parole";
                QString comando14="urpmi -a --auto --force tar";
                QString comando15="urpmi -a --auto --force alien";
                QString comando16="urpmi -a --auto --force fakeroot";
                QString comando17="urpmi -a --auto --force rpmdrake";
                QString comando18="urpmi -a --auto --force mkvtoolnix";
                QString comando19="urpmi -a --auto --force clamav";
                QString comando20="urpmi -a --auto --force dolphin";
                QString comando21;
                if (arqt =="x86_64")
                    comando21="urpmi -a --auto --force lib64qtgui4";
                else
                    comando21="urpmi -a --auto --force libqtgui4";
                QString comando22="urpmi -a --auto --force unrar";
                QString comando23="urpmi -a --auto --force mencoder";
                QString comando24="urpmi -a --auto --force gnome-utils ";
                QString comando25="urpmi -a --auto --force real-codecs";
                QString comando26="urpmi -a --auto --force win32-codecs";
                QString comando27="urpmi -a --auto --force xanim-codecs";
                QString comando28="urpmi -a --auto --force libquicktime";
                QString comando29;
                int Eliminar = 0;
                if (arqt =="x86_64")
                {
                    comando29="urpmi -a --auto --force lib64quicktime0";
                    Eliminar = 1;
                }
                QString comando30="urpmi -a --auto --force libquicktime-x264";
                QString comando31="urpmi -a --auto --force libquicktime-lame";
                QString comando32="urpmi -a --auto --force libquicktime-faad";
                QString comando33="urpmi -a --auto --force libquicktime-faac";
                QString comando34="urpmi -a --auto --force faad2";
                QString comando35="urpmi -a --auto --force xine-faad";
                QString comando36="urpmi -a --auto --force faac";
                QString comando37="urpmi -a --auto --force libamrnb3";
                QString comando38="urpmi -a --auto --force libamrwb3";
                QString comando39="urpmi -a --auto --force amrnb";
                QString comando40="urpmi -a --auto --force amrwb";
                QString comando41="urpmi -a --auto --force libnotify";
                QString comando42="urpmi -a --auto --force id3lib";
                QString comando43="urpmi -a --auto --force lame";
                QString comando44="urpmi -a --auto --force gstreamer0.10-a52dec";
                QString comando45="urpmi -a --auto --force gstreamer0.10-amrnb";
                QString comando46="urpmi -a --auto --force gstreamer0.10-amrwb";
                QString comando47="urpmi -a --auto --force gstreamer0.10-faad";
                QString comando48="urpmi -a --auto --force gstreamer0.10-faac";
                QString comando49="urpmi -a --auto --force gstreamer0.10-ffmpeg";
                QString comando50="urpmi -a --auto --force gstreamer0.10-lame";
                QString comando51="urpmi -a --auto --force gzip";
                QString comando52="urpmi -a --auto --force imagemagick";
                QString comando53="urpmi -a --auto --force dvd+rw-tools";
                QString comando54="urpmi -a --auto --force ccd2iso";
                QString comando55="urpmi -a --auto --force mdf2iso";
                QString comando56="urpmi -a --auto --force cdi2iso";
                QString comando57="urpmi -a --auto --force gstreamer0.10-flac";
                QString comando58="urpmi -a --auto --force gstreamer0.10-cdio";
                QString comando59="urpmi -a --auto --force gstreamer0.10-cdparanoia";
                QString comando60="urpmi -a --auto --force mencoder";
                QString comando61="urpmi -a --auto --force transcode";
                QString comando62="urpmi -a --auto --force gstreamer0.10-mms";
                QString comando63="urpmi -a --auto --force convmv";
                QString comando64="urpmi -a --auto --force cdrkit";
                QString comando65="urpmi -a --auto --force cdrdao";
                QString comando66="urpmi -a --auto --force unzip";
                QString comando67="urpmi -a --auto --force dalle";
                QString comando68="urpmi -a --auto --force lsdvd";
                QString comando69="urpmi -a --auto --force vcdimager";
                QString comando70="urpmi -a --auto --force nmap";
                QString comando71="urpmi -a --auto --force iptables";
                QString comando72="urpmi -a --auto --force konsole";
                QString comando73="urpmi -a --auto --force grub";
                QString comando74="urpmi -a --auto --force grub2";
                QString comando75="urpmi -a --auto --force syslinux";
                QString comando76="urpmi -a --auto --force file-roller";
                QString comando77="urpmi -a --auto --force mtools";
                QString comando78="urpmi -a --auto --force qemu";
                QString comando79="urpmi -a --auto --force gcstar";
                QString comando80="urpmi -a --auto --force x11vnc";
                QString comando81="urpmi -a --auto --force mutt";
                QString comando82="urpmi -a --auto --force sendmail";
                QString comando83="urpmi -a --auto --force ssmtp";
                QString comando84="urpmi -a --auto --force tigervnc";
                QString comando85="urpmi -a --auto --force transmission-cli";
                QString comando86="urpmi -a --auto --force firefox";
                QString comando87="urpmi -a --auto --force dvdbackup";
                QString comando88="urpmi -a --auto --force gcc";
                QString comando89="urpmi -a --auto --force make";
                QString comando90,comando91;
                if (arqt =="x86_64")
                {
                    comando90="urpmi -a --auto --force lib64ncurses-devel";
                    comando91="urpmi -a --auto --force lib64ncursesw-devel";
                }
                else
                {
                    comando90="urpmi -a --auto --force libncurses-devel";
                    comando91="urpmi -a --auto --force libncursesw-devel";
                }
                QString comando92="urpmi -a --auto --force id3v2";
                QString comando93="urpmi -a --auto --force pulseaudio-utils";
                QString comando94;
                if (arqt =="x86_64")
                    comando94="urpmi -a --auto --force lib64qrencode-devel";
                else
                    comando94="urpmi -a --auto --force libqrencode-devel";
                QString comando95 = "urpmi -a --auto --force bzip2";
                QString comando96 = "urpmi -a --auto --force zip";
                QString comando98 = "urpmi -a --auto --force arj";
                QString comando99 = "urpmi -a --auto --force p7zip";
                QString comando100 = "urpmi -a --auto --force tree";
                QString comando101 = "urpmi -a --auto --force hexedit";
                QString comando102 = "urpmi -a --auto --force webmin";
                QString comando103;
                if (arqt =="x86_64")
                    comando103 = "urpmi -a --auto --force lib64qtermwidget-devel";
                else
                    comando103 = "urpmi -a --auto --force libqtermwidget-devel";
                comandos << cmdx << comando << comando1 << comando2 << comando3 << comando4 << comando5 << comando6 << comando7 << comando8 << comando9 << comando10;
                comandos << comando11 << comando12 << comando13 << comando14 << comando15 << comando16 << comando17 << comando18 << comando19 << comando20;
                if (Eliminar == 1)
                     comandos << comando21 << comando22 << comando23 << comando24 << comando25 << comando26 << comando27 << comando28 << comando29 << comando30;
                else if (Eliminar == 0)
                     comandos << comando21 << comando22 << comando23 << comando24 << comando25 << comando26 << comando27 << comando28 << comando30;
                comandos << comando31 << comando32 << comando33 << comando34 << comando35 << comando36 << comando37 << comando38 << comando39 << comando40;
                comandos << comando41 << comando42 << comando43 << comando44 << comando45 << comando46 << comando47 << comando48 << comando49 << comando50;
                comandos << comando51 << comando52 << comando53 << comando54 << comando55 << comando56 << comando57 << comando58 << comando59 << comando60;
                comandos << comando61 << comando62 << comando63 << comando64 << comando65 << comando66 << comando67 << comando68 << comando69 << comando70 << comando71 << comando72;
                comandos << comando73 << comando74 << comando75 << comando76 << comando77 << comando78 << comando79 << comando80 << comando81 << comando82 << comando83 << comando84;
                comandos << comando85 << comando86 << comando87 << comando88 << comando89 << comando90 << comando91 << comando92 << comando93 << comando94;
                comandos << comando95 << comando96 << comando98 << comando99 << comando100 << comando101 << comando102 << comando103;
                QString cm, cmd, cmd1, cmd2, cmd3, cmd4;
                if (nrg2iso == "0")
                {
                    cm = QString::fromUtf8(tr("echo Descargando paquete solicitado..."));
                    cmd = "wget http://gregory.kokanosky.free.fr/v4/linux/nrg2iso-0.2-SuSE9_br.i586.rpm";
                    cmd1 = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
                    cmd2 ="urpmi --auto --force nrg2iso-0.2-SuSE9_br.i586.rpm";
                    cmd3 = tr("echo Limpiando temporales...");
                    cmd4 = "rm -vf nrg2iso-0.2-SuSE9_br.i586.rpm";
                    comandos << cm << cmd << cmd1 << cmd2 << cmd3 << cmd4;
                }
                QString cmr, cmdr, cmd1r, cmd2r, cmd3r, cmd4r, x64, x86;
                if (rar == "0")
                {
                    cmr = QString::fromUtf8(tr("echo Descargando paquete solicitado..."));
                    if (arqt =="x86_64")
                    {
                         cmdr = "wget ftp://download.asso-linux-online.fr/download/packages-mlo/Mageia/4/x86_64/nonfree/rar-5.0.0-2.nonfree.mga4.x86_64.rpm";
                         x64 = "rar-5.0.0-2.nonfree.mga4.x86_64.rpm";
                    }
                    else
                    {
                        cmdr = "wget ftp://download.asso-linux-online.fr/download/packages-mlo/Mageia/4/i586/nonfree/rar-5.0.0-2.nonfree.mga4.i586.rpm";
                        x86 = "rar-5.0.0-2.nonfree.mga4.i586.rpm";
                    }
                    cmd1r = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
                    if (arqt =="x86_64")
                    {
                         cmd2r ="urpmi --auto --force %1";
                         cmd2r=cmd2r.arg(x64);
                    }
                    else
                    {
                        cmd2r ="urpmi --auto --force %1";
                        cmd2r=cmd2r.arg(x86);
                    }
                    cmd3r = tr("echo Limpiando temporales...");
                    if (arqt =="x86_64")
                    {
                         cmd4r = "rm -vf %1";
                         cmd4r=cmd4r.arg(x64);
                    }
                    else
                    {
                        cmd4r = "rm -vf %1";
                        cmd4r=cmd4r.arg(x86);
                    }
                    comandos << cmr << cmdr << cmd1r << cmd2r << cmd3r << cmd4r;
                }
                QString cmrZ, cmdrZ, cmd1rZ, cmd2rZ, cmd3rZ, cmd4rZ;
                if (zoo == "0")
                {
                    cmrZ = QString::fromUtf8(tr("echo Descargando paquete solicitado..."));
                    if (arqt =="x86_64")
                    {
                         cmdrZ = "wget http://mirror.rosalab.ru/rosa/rosa2012.1/repository/x86_64/restricted/release/zoo-2.10-6-plf2012.1.x86_64.rpm";
                         x64 = "zoo-2.10-6-plf2012.1.x86_64.rpm";
                    }
                    else
                    {
                        cmdrZ = "wget http://mirror.rosalab.ru/rosa/rosa2012.1/repository/i586/restricted/release/zoo-2.10-6-plf2012.1.i586.rpm";
                        x86 = "zoo-2.10-6-plf2012.1.i586.rpm";
                    }
                    cmd1rZ = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
                    if (arqt =="x86_64")
                    {
                         cmd2rZ ="urpmi --auto --force %1";
                         cmd2rZ=cmd2rZ.arg(x64);
                    }
                    else
                    {
                        cmd2rZ ="urpmi --auto --force %1";
                        cmd2rZ=cmd2rZ.arg(x86);
                    }
                    cmd3rZ = tr("echo Limpiando temporales...");
                    if (arqt =="x86_64")
                    {
                         cmd4rZ = "rm -vf %1";
                         cmd4rZ=cmd4rZ.arg(x64);
                    }
                    else
                    {
                        cmd4rZ = "rm -vf %1";
                        cmd4rZ=cmd4rZ.arg(x86);
                    }
                    comandos << cmrZ << cmdrZ << cmd1rZ << cmd2rZ << cmd3rZ << cmd4rZ;
                }
                if (mib != 0)
                    delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count();
                mib->Valor(valor,0);
                mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro);
                mib->iniciarProceso();
            }
            else if (opcion1 != true)
            {
                if (Dependencia == "0")
                {
                    QString hora = QTime::currentTime().toString("hh:mm:ss");
                    ui->textEdit_4->append(""+hora+"-- <b><FONT COLOR=\"RED\">ATENCION: LA COMPROBACION DE DEPENDENCIAS NO ESTA ACTIVADA, PUEDE NO FUNCIONAR CORRECTAMENTE.");
                    int respuesta = 0;
                    respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Comprobar dependencias de uso")),
                               QString::fromUtf8(tr("<center><b>Comprobar dependencias para RecoverDrake</b></center><p>"
                                  "<b>IMPORTANTE:</b> He observado que tienes la comprobacion de dependencias "
                                  "deshabilitada...no es un buen consejo, ya que para realizar todos los "
                                  "procesos de RecoverDrake, son necesarios paquetes externos que deberian "
                                  "estar totalmente configurados y funcionando al 100%.<p>"
                                  "&iquest;Comprobar dependencias para el buen uso de RecoverDrake?")), QMessageBox::Ok, QMessageBox::No);
                    if (respuesta == QMessageBox::Ok)
                    {
                        Refrescar();
                        Reconfigurar = "Si";
                        QString cmdx=QString::fromUtf8(tr("echo Buscando dependencias necesarias e instalando..."));
                        QString comando="urpmi -a --auto --force zenity";
                        QString comando1="urpmi -a --auto --force sudo";
                        QString comando2="urpmi -a --auto --force bash";
                        QString comando3="urpmi -a --auto --force kwrite";
                        QString comando4="urpmi -a --auto --force stdc++";
                        QString comando5="urpmi -a --auto --force ndiswrapper";
                        QString comando6="urpmi -a --auto --force photorec";
                        QString comando7="urpmi -a --auto --force testdisk";
                        QString comando8="urpmi -a --auto --force ntfs-config";
                        QString comando9="urpmi -a --auto --force cdparanoia";
                        QString comando10="urpmi -a --auto --force lame";
                        QString comando11="urpmi -a --auto --force ffmpeg";
                        QString comando12="urpmi -a --auto --force dvdauthor";
                        QString comando13="urpmi -a --auto --force parole";
                        QString comando14="urpmi -a --auto --force tar";
                        QString comando15="urpmi -a --auto --force alien";
                        QString comando16="urpmi -a --auto --force fakeroot";
                        QString comando17="urpmi -a --auto --force rpmdrake";
                        QString comando18="urpmi -a --auto --force mkvtoolnix";
                        QString comando19="urpmi -a --auto --force clamav";
                        QString comando20="urpmi -a --auto --force dolphin";
                        QString comando21;
                        if (arqt =="x86_64")
                            comando21="urpmi -a --auto --force lib64qtgui4";
                        else
                            comando21="urpmi -a --auto --force libqtgui4";
                        QString comando22="urpmi -a --auto --force unrar";
                        QString comando23="urpmi -a --auto --force mencoder";
                        QString comando24="urpmi -a --auto --force gnome-utils ";
                        QString comando25="urpmi -a --auto --force real-codecs";
                        QString comando26="urpmi -a --auto --force win32-codecs";
                        QString comando27="urpmi -a --auto --force xanim-codecs";
                        QString comando28="urpmi -a --auto --force libquicktime";
                        QString comando29;
                        int Eliminar = 0;
                        if (arqt =="x86_64")
                        {
                            comando29="urpmi -a --auto --force lib64quicktime0";
                            Eliminar = 1;
                        }
                        QString comando30="urpmi -a --auto --force libquicktime-x264";
                        QString comando31="urpmi -a --auto --force libquicktime-lame";
                        QString comando32="urpmi -a --auto --force libquicktime-faad";
                        QString comando33="urpmi -a --auto --force libquicktime-faac";
                        QString comando34="urpmi -a --auto --force faad2";
                        QString comando35="urpmi -a --auto --force xine-faad";
                        QString comando36="urpmi -a --auto --force faac";
                        QString comando37="urpmi -a --auto --force libamrnb3";
                        QString comando38="urpmi -a --auto --force libamrwb3";
                        QString comando39="urpmi -a --auto --force amrnb";
                        QString comando40="urpmi -a --auto --force amrwb";
                        QString comando41="urpmi -a --auto --force libnotify";
                        QString comando42="urpmi -a --auto --force id3lib";
                        QString comando43="urpmi -a --auto --force lame";
                        QString comando44="urpmi -a --auto --force gstreamer0.10-a52dec";
                        QString comando45="urpmi -a --auto --force gstreamer0.10-amrnb";
                        QString comando46="urpmi -a --auto --force gstreamer0.10-amrwb";
                        QString comando47="urpmi -a --auto --force gstreamer0.10-faad";
                        QString comando48="urpmi -a --auto --force gstreamer0.10-faac";
                        QString comando49="urpmi -a --auto --force gstreamer0.10-ffmpeg";
                        QString comando50="urpmi -a --auto --force gstreamer0.10-lame";
                        QString comando51="urpmi -a --auto --force gzip";
                        QString comando52="urpmi -a --auto --force imagemagick";
                        QString comando53="urpmi -a --auto --force dvd+rw-tools";
                        QString comando54="urpmi -a --auto --force ccd2iso";
                        QString comando55="urpmi -a --auto --force mdf2iso";
                        QString comando56="urpmi -a --auto --force cdi2iso";
                        QString comando57="urpmi -a --auto --force gstreamer0.10-flac";
                        QString comando58="urpmi -a --auto --force gstreamer0.10-cdio";
                        QString comando59="urpmi -a --auto --force gstreamer0.10-cdparanoia";
                        QString comando60="urpmi -a --auto --force mencoder";
                        QString comando61="urpmi -a --auto --force transcode";
                        QString comando62="urpmi -a --auto --force gstreamer0.10-mms";
                        QString comando63="urpmi -a --auto --force convmv";
                        QString comando64="urpmi -a --auto --force cdrkit";
                        QString comando65="urpmi -a --auto --force cdrdao";
                        QString comando66="urpmi -a --auto --force unzip";
                        QString comando67="urpmi -a --auto --force dalle";
                        QString comando68="urpmi -a --auto --force lsdvd";
                        QString comando69="urpmi -a --auto --force vcdimager";
                        QString comando70="urpmi -a --auto --force nmap";
                        QString comando71="urpmi -a --auto --force iptables";
                        QString comando72="urpmi -a --auto --force konsole";
                        QString comando73="urpmi -a --auto --force grub";
                        QString comando74="urpmi -a --auto --force grub2";
                        QString comando75="urpmi -a --auto --force syslinux";
                        QString comando76="urpmi -a --auto --force file-roller";
                        QString comando77="urpmi -a --auto --force mtools";
                        QString comando78="urpmi -a --auto --force qemu";
                        QString comando79="urpmi -a --auto --force gcstar";
                        QString comando80="urpmi -a --auto --force x11vnc";
                        QString comando81="urpmi -a --auto --force mutt";
                        QString comando82="urpmi -a --auto --force sendmail";
                        QString comando83="urpmi -a --auto --force ssmtp";
                        QString comando84="urpmi -a --auto --force tigervnc";
                        QString comando85="urpmi -a --auto --force transmission-cli";
                        QString comando86="urpmi -a --auto --force firefox";
                        QString comando87="urpmi -a --auto --force dvdbackup";
                        QString comando88="urpmi -a --auto --force gcc";
                        QString comando89="urpmi -a --auto --force make";
                        QString comando90,comando91;
                        if (arqt =="x86_64")
                        {
                            comando90="urpmi -a --auto --force lib64ncurses-devel";
                            comando91="urpmi -a --auto --force lib64ncursesw-devel";
                        }
                        else
                        {
                            comando90="urpmi -a --auto --force libncurses-devel";
                            comando91="urpmi -a --auto --force libncursesw-devel";
                        }
                        QString comando92="urpmi -a --auto --force id3v2";
                        QString comando93="urpmi -a --auto --force pulseaudio-utils";
                        QString comando94;
                        if (arqt =="x86_64")
                            comando94="urpmi -a --auto --force lib64qrencode-devel";
                        else
                            comando94="urpmi -a --auto --force libqrencode-devel";
                        QString comando95 = "urpmi -a --auto --force bzip2";
                        QString comando96 = "urpmi -a --auto --force zip";
                        QString comando98 = "urpmi -a --auto --force arj";
                        QString comando99 = "urpmi -a --auto --force p7zip";
                        QString comando100 = "urpmi -a --auto --force tree";
                        QString comando101 = "urpmi -a --auto --force hexedit";
                        QString comando102 = "urpmi -a --auto --force webmin";
                        QString comando103;
                        if (arqt =="x86_64")
                            comando103 = "urpmi -a --auto --force lib64qtermwidget-devel";
                        else
                            comando103 = "urpmi -a --auto --force libqtermwidget-devel";
                        comandos << cmdx << comando << comando1 << comando2 << comando3 << comando4 << comando5 << comando6 << comando7 << comando8 << comando9 << comando10;
                        comandos << comando11 << comando12 << comando13 << comando14 << comando15 << comando16 << comando17 << comando18 << comando19 << comando20;
                        if (Eliminar == 1)
                             comandos << comando21 << comando22 << comando23 << comando24 << comando25 << comando26 << comando27 << comando28 << comando29 << comando30;
                        else if (Eliminar == 0)
                             comandos << comando21 << comando22 << comando23 << comando24 << comando25 << comando26 << comando27 << comando28 << comando30;
                        comandos << comando31 << comando32 << comando33 << comando34 << comando35 << comando36 << comando37 << comando38 << comando39 << comando40;
                        comandos << comando41 << comando42 << comando43 << comando44 << comando45 << comando46 << comando47 << comando48 << comando49 << comando50;
                        comandos << comando51 << comando52 << comando53 << comando54 << comando55 << comando56 << comando57 << comando58 << comando59 << comando60;
                        comandos << comando61 << comando62 << comando63 << comando64 << comando65 << comando66 << comando67 << comando68 << comando69 << comando70 << comando71 << comando72;
                        comandos << comando73 << comando74 << comando75 << comando76 << comando77 << comando78 << comando79 << comando80 << comando81 << comando82 << comando83 << comando84;
                        comandos << comando85 << comando86 << comando87 << comando88 << comando89 << comando90 << comando91 << comando92 << comando93 << comando94;
                        comandos << comando95 << comando96 << comando98 << comando99 << comando100 << comando101 << comando102 << comando103;
                        QString cm, cmd, cmd1, cmd2, cmd3, cmd4;
                        if (nrg2iso == "0")
                        {
                            cm = QString::fromUtf8(tr("echo Descargando paquete solicitado..."));
                            cmd = "wget http://gregory.kokanosky.free.fr/v4/linux/nrg2iso-0.2-SuSE9_br.i586.rpm";
                            cmd1 = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
                            cmd2 ="urpmi --auto --force nrg2iso-0.2-SuSE9_br.i586.rpm";
                            cmd3 = tr("echo Limpiando temporales...");
                            cmd4 = "rm -vf nrg2iso-0.2-SuSE9_br.i586.rpm";
                            comandos << cm << cmd << cmd1 << cmd2 << cmd3 << cmd4;
                        }
                        QString cmr, cmdr, cmd1r, cmd2r, cmd3r, cmd4r, x64, x86;
                        if (rar == "0")
                        {
                            cmr = QString::fromUtf8(tr("echo Descargando paquete solicitado..."));
                            if (arqt =="x86_64")
                            {
                                 cmdr = "wget ftp://download.asso-linux-online.fr/download/packages-mlo/Mageia/4/x86_64/nonfree/rar-5.0.0-2.nonfree.mga4.x86_64.rpm";
                                 x64 = "rar-5.0.0-2.nonfree.mga4.x86_64.rpm";
                            }
                            else
                            {
                                cmdr = "wget ftp://download.asso-linux-online.fr/download/packages-mlo/Mageia/4/i586/nonfree/rar-5.0.0-2.nonfree.mga4.i586.rpm";
                                x86 = "rar-5.0.0-2.nonfree.mga4.i586.rpm";
                            }
                            cmd1r = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
                            if (arqt =="x86_64")
                            {
                                 cmd2r ="urpmi --auto --force %1";
                                 cmd2r=cmd2r.arg(x64);
                            }
                            else
                            {
                                cmd2r ="urpmi --auto --force %1";
                                cmd2r=cmd2r.arg(x86);
                            }
                            cmd3r = tr("echo Limpiando temporales...");
                            if (arqt =="x86_64")
                            {
                                 cmd4r = "rm -vf %1";
                                 cmd4r=cmd4r.arg(x64);
                            }
                            else
                            {
                                cmd4r = "rm -vf %1";
                                cmd4r=cmd4r.arg(x86);
                            }
                            comandos << cmr << cmdr << cmd1r << cmd2r << cmd3r << cmd4r;
                        }
                        QString cmrZ, cmdrZ, cmd1rZ, cmd2rZ, cmd3rZ, cmd4rZ;
                        if (zoo == "0")
                        {
                            cmrZ = QString::fromUtf8(tr("echo Descargando paquete solicitado..."));
                            if (arqt =="x86_64")
                            {
                                 cmdrZ = "wget http://mirror.rosalab.ru/rosa/rosa2012.1/repository/x86_64/restricted/release/zoo-2.10-6-plf2012.1.x86_64.rpm";
                                 x64 = "zoo-2.10-6-plf2012.1.x86_64.rpm";
                            }
                            else
                            {
                                cmdrZ = "wget http://mirror.rosalab.ru/rosa/rosa2012.1/repository/i586/restricted/release/zoo-2.10-6-plf2012.1.i586.rpm";
                                x86 = "zoo-2.10-6-plf2012.1.i586.rpm";
                            }
                            cmd1rZ = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
                            if (arqt =="x86_64")
                            {
                                 cmd2rZ ="urpmi --auto --force %1";
                                 cmd2rZ=cmd2rZ.arg(x64);
                            }
                            else
                            {
                                cmd2rZ ="urpmi --auto --force %1";
                                cmd2rZ=cmd2rZ.arg(x86);
                            }
                            cmd3rZ = tr("echo Limpiando temporales...");
                            if (arqt =="x86_64")
                            {
                                 cmd4rZ = "rm -vf %1";
                                 cmd4rZ=cmd4rZ.arg(x64);
                            }
                            else
                            {
                                cmd4rZ = "rm -vf %1";
                                cmd4rZ=cmd4rZ.arg(x86);
                            }
                            comandos << cmrZ << cmdrZ << cmd1rZ << cmd2rZ << cmd3rZ << cmd4rZ;
                        }
                        if (mib != 0)
                            delete mib;
                        mib = new DrakeProcesos(comandos, this);
                        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                        connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                        int valor= comandos.count();
                        mib->Valor(valor,0);
                        mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro);
                        mib->iniciarProceso();
                    }
                    else
                    {
                        this->Actualizar();
                        ui->tabWidget->setCurrentPage(pagina);
                        ui->tabWidget_8->setCurrentPage(0);
                        return;
                    }
                }
                else if (Dependencia == "2")
                {
                    QString hora = QTime::currentTime().toString("hh:mm:ss");
                    ui->textEdit_4->append(""+hora+"-- <b><FONT COLOR=\"RED\">ATENCION: LA COMPROBACION DE DEPENDENCIAS NO ESTA ACTIVADA, PUEDE NO FUNCIONAR CORRECTAMENTE.");
                }
            }
        }
     }
     progress.setValue(16);
     setUpdatesEnabled(true);
     ui->tabWidget->setCurrentPage(pagina);
     ui->tabWidget_8->setCurrentPage(0);
     return;
}

void recoverdrake::Liberador()
{
    system("sync && sysctl vm.drop_caches=3");
}


void recoverdrake::on_actionComprobar_dependencias_triggered()
{    
       UpDate = 1;
       QString hora = QTime::currentTime().toString("hh:mm:ss");
       ui->textEdit_4->append(""+hora+"-- Accion: Comprobar dependencias.");
       Refrescar();
       QStringList comandos;
       int respuesta = 0;
       respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Comprobar dependencias de uso")),
                  QString::fromUtf8(tr("<center><b>Comprobar dependencias para RecoverDrake</b></center><p>"
                     "<b>IMPORTANTE:</b> Se procede a comprobar la integridad de funcionamiento "
                     "de RecoverDrake, realizando la busqueda de paquetes externos necesarios y "
                     "que deberian estar totalmente configurados y funcionando al 100%.<p>"
                     "&iquest;Comprobar dependencias para el buen uso de RecoverDrake?")), QMessageBox::Ok, QMessageBox::No);
       if (respuesta == QMessageBox::Ok)
       {
           Reconfigurar = "Si";
           QString cmdx=QString::fromUtf8(tr("echo Buscando dependencias necesarias e instalando..."));
           QString comando="urpmi -a --auto --force zenity";
           QString comando1="urpmi -a --auto --force sudo";
           QString comando2="urpmi -a --auto --force bash";
           QString comando3="urpmi -a --auto --force kwrite";
           QString comando4="urpmi -a --auto --force stdc++";
           QString comando5="urpmi -a --auto --force ndiswrapper";
           QString comando6="urpmi -a --auto --force photorec";
           QString comando7="urpmi -a --auto --force testdisk";
           QString comando8="urpmi -a --auto --force ntfs-config";
           QString comando9="urpmi -a --auto --force cdparanoia";
           QString comando10="urpmi -a --auto --force lame";
           QString comando11="urpmi -a --auto --force ffmpeg";
           QString comando12="urpmi -a --auto --force dvdauthor";
           QString comando13="urpmi -a --auto --force parole";
           QString comando14="urpmi -a --auto --force tar";
           QString comando15="urpmi -a --auto --force alien";
           QString comando16="urpmi -a --auto --force fakeroot";
           QString comando17="urpmi -a --auto --force rpmdrake";
           QString comando18="urpmi -a --auto --force mkvtoolnix";
           QString comando19="urpmi -a --auto --force clamav";
           QString comando20="urpmi -a --auto --force dolphin";
           QString comando21;
           if (arqt =="x86_64")
               comando21="urpmi -a --auto --force lib64qtgui4";
           else
               comando21="urpmi -a --auto --force libqtgui4";
           QString comando22="urpmi -a --auto --force unrar";
           QString comando23="urpmi -a --auto --force mencoder";
           QString comando24="urpmi -a --auto --force gnome-utils ";
           QString comando25="urpmi -a --auto --force real-codecs";
           QString comando26="urpmi -a --auto --force win32-codecs";
           QString comando27="urpmi -a --auto --force xanim-codecs";
           QString comando28="urpmi -a --auto --force libquicktime";
           QString comando29;
           int Eliminar = 0;
           if (arqt =="x86_64")
           {
               comando29="urpmi -a --auto --force lib64quicktime0";
               Eliminar = 1;
           }
           QString comando30="urpmi -a --auto --force libquicktime-x264";
           QString comando31="urpmi -a --auto --force libquicktime-lame";
           QString comando32="urpmi -a --auto --force libquicktime-faad";
           QString comando33="urpmi -a --auto --force libquicktime-faac";
           QString comando34="urpmi -a --auto --force faad2";
           QString comando35="urpmi -a --auto --force xine-faad";
           QString comando36="urpmi -a --auto --force faac";
           QString comando37="urpmi -a --auto --force libamrnb3";
           QString comando38="urpmi -a --auto --force libamrwb3";
           QString comando39="urpmi -a --auto --force amrnb";
           QString comando40="urpmi -a --auto --force amrwb";
           QString comando41="urpmi -a --auto --force libnotify";
           QString comando42="urpmi -a --auto --force id3lib";
           QString comando43="urpmi -a --auto --force lame";
           QString comando44="urpmi -a --auto --force gstreamer0.10-a52dec";
           QString comando45="urpmi -a --auto --force gstreamer0.10-amrnb";
           QString comando46="urpmi -a --auto --force gstreamer0.10-amrwb";
           QString comando47="urpmi -a --auto --force gstreamer0.10-faad";
           QString comando48="urpmi -a --auto --force gstreamer0.10-faac";
           QString comando49="urpmi -a --auto --force gstreamer0.10-ffmpeg";
           QString comando50="urpmi -a --auto --force gstreamer0.10-lame";
           QString comando51="urpmi -a --auto --force gzip";
           QString comando52="urpmi -a --auto --force imagemagick";
           QString comando53="urpmi -a --auto --force dvd+rw-tools";
           QString comando54="urpmi -a --auto --force ccd2iso";
           QString comando55="urpmi -a --auto --force mdf2iso";
           QString comando56="urpmi -a --auto --force cdi2iso";
           QString comando57="urpmi -a --auto --force gstreamer0.10-flac";
           QString comando58="urpmi -a --auto --force gstreamer0.10-cdio";
           QString comando59="urpmi -a --auto --force gstreamer0.10-cdparanoia";
           QString comando60="urpmi -a --auto --force mencoder";
           QString comando61="urpmi -a --auto --force transcode";
           QString comando62="urpmi -a --auto --force gstreamer0.10-mms";
           QString comando63="urpmi -a --auto --force convmv";
           QString comando64="urpmi -a --auto --force cdrkit";
           QString comando65="urpmi -a --auto --force cdrdao";
           QString comando66="urpmi -a --auto --force unzip";
           QString comando67="urpmi -a --auto --force dalle";
           QString comando68="urpmi -a --auto --force lsdvd";
           QString comando69="urpmi -a --auto --force vcdimager";
           QString comando70="urpmi -a --auto --force nmap";
           QString comando71="urpmi -a --auto --force iptables";
           QString comando72="urpmi -a --auto --force konsole";
           QString comando73="urpmi -a --auto --force grub";
           QString comando74="urpmi -a --auto --force grub2";
           QString comando75="urpmi -a --auto --force syslinux";
           QString comando76="urpmi -a --auto --force file-roller";
           QString comando77="urpmi -a --auto --force mtools";
           QString comando78="urpmi -a --auto --force qemu";
           QString comando79="urpmi -a --auto --force gcstar";
           QString comando80="urpmi -a --auto --force x11vnc";
           QString comando81="urpmi -a --auto --force mutt";
           QString comando82="urpmi -a --auto --force sendmail";
           QString comando83="urpmi -a --auto --force ssmtp";
           QString comando84="urpmi -a --auto --force tigervnc";
           QString comando85="urpmi -a --auto --force transmission-cli";
           QString comando86="urpmi -a --auto --force firefox";
           QString comando87="urpmi -a --auto --force dvdbackup";
           QString comando88="urpmi -a --auto --force gcc";
           QString comando89="urpmi -a --auto --force make";
           QString comando90,comando91;
           if (arqt =="x86_64")
           {
               comando90="urpmi -a --auto --force lib64ncurses-devel";
               comando91="urpmi -a --auto --force lib64ncursesw-devel";
           }
           else
           {
               comando90="urpmi -a --auto --force libncurses-devel";
               comando91="urpmi -a --auto --force libncursesw-devel";
           }
           QString comando92="urpmi -a --auto --force id3v2";
           QString comando93="urpmi -a --auto --force pulseaudio-utils";
           QString comando94;
           if (arqt =="x86_64")
               comando94="urpmi -a --auto --force lib64qrencode-devel";
           else
               comando94="urpmi -a --auto --force libqrencode-devel";
           QString comando95 = "urpmi -a --auto --force bzip2";
           QString comando96 = "urpmi -a --auto --force zip";
           QString comando98 = "urpmi -a --auto --force arj";
           QString comando99 = "urpmi -a --auto --force p7zip";
           QString comando100 = "urpmi -a --auto --force tree";
           QString comando101 = "urpmi -a --auto --force hexedit";
           QString comando102 = "urpmi -a --auto --force webmin";
           QString comando103;
           if (arqt =="x86_64")
               comando103 = "urpmi -a --auto --force lib64qtermwidget-devel";
           else
               comando103 = "urpmi -a --auto --force libqtermwidget-devel";
           comandos << cmdx << comando << comando1 << comando2 << comando3 << comando4 << comando5 << comando6 << comando7 << comando8 << comando9 << comando10;
           comandos << comando11 << comando12 << comando13 << comando14 << comando15 << comando16 << comando17 << comando18 << comando19 << comando20;
           if (Eliminar == 1)
                comandos << comando21 << comando22 << comando23 << comando24 << comando25 << comando26 << comando27 << comando28 << comando29 << comando30;
           else if (Eliminar == 0)
                comandos << comando21 << comando22 << comando23 << comando24 << comando25 << comando26 << comando27 << comando28 << comando30;
           comandos << comando31 << comando32 << comando33 << comando34 << comando35 << comando36 << comando37 << comando38 << comando39 << comando40;
           comandos << comando41 << comando42 << comando43 << comando44 << comando45 << comando46 << comando47 << comando48 << comando49 << comando50;
           comandos << comando51 << comando52 << comando53 << comando54 << comando55 << comando56 << comando57 << comando58 << comando59 << comando60;
           comandos << comando61 << comando62 << comando63 << comando64 << comando65 << comando66 << comando67 << comando68 << comando69 << comando70 << comando71 << comando72;
           comandos << comando73 << comando74 << comando75 << comando76 << comando77 << comando78 << comando79 << comando80 << comando81 << comando82 << comando83 << comando84;
           comandos << comando85 << comando86 << comando87 << comando88 << comando89 << comando90 << comando91 << comando92 << comando93 << comando94;
           comandos << comando95 << comando96 << comando98 << comando99 << comando100 << comando101 << comando102 << comando103;
           QString cm, cmd, cmd1, cmd2, cmd3, cmd4;
           if (nrg2iso == "0")
           {
               cm = QString::fromUtf8(tr("echo Descargando paquete solicitado..."));
               cmd = "wget http://gregory.kokanosky.free.fr/v4/linux/nrg2iso-0.2-SuSE9_br.i586.rpm";
               cmd1 = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
               cmd2 ="urpmi --auto --force nrg2iso-0.2-SuSE9_br.i586.rpm";
               cmd3 = tr("echo Limpiando temporales...");
               cmd4 = "rm -vf nrg2iso-0.2-SuSE9_br.i586.rpm";
               comandos << cm << cmd << cmd1 << cmd2 << cmd3 << cmd4;
           }
           QString cmr, cmdr, cmd1r, cmd2r, cmd3r, cmd4r, x64, x86;
           if (rar == "0")
           {
               cmr = QString::fromUtf8(tr("echo Descargando paquete solicitado..."));
               if (arqt =="x86_64")
               {
                    cmdr = "wget ftp://download.asso-linux-online.fr/download/packages-mlo/Mageia/4/x86_64/nonfree/rar-5.0.0-2.nonfree.mga4.x86_64.rpm";
                    x64 = "rar-5.0.0-2.nonfree.mga4.x86_64.rpm";
               }
               else
               {
                   cmdr = "wget ftp://download.asso-linux-online.fr/download/packages-mlo/Mageia/4/i586/nonfree/rar-5.0.0-2.nonfree.mga4.i586.rpm";
                   x86 = "rar-5.0.0-2.nonfree.mga4.i586.rpm";
               }
               cmd1r = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
               if (arqt =="x86_64")
               {
                    cmd2r ="urpmi --auto --force %1";
                    cmd2r=cmd2r.arg(x64);
               }
               else
               {
                   cmd2r ="urpmi --auto --force %1";
                   cmd2r=cmd2r.arg(x86);
               }
               cmd3r = tr("echo Limpiando temporales...");
               if (arqt =="x86_64")
               {
                    cmd4r = "rm -vf %1";
                    cmd4r=cmd4r.arg(x64);
               }
               else
               {
                   cmd4r = "rm -vf %1";
                   cmd4r=cmd4r.arg(x86);
               }
               comandos << cmr << cmdr << cmd1r << cmd2r << cmd3r << cmd4r;
           }
           QString cmrZ, cmdrZ, cmd1rZ, cmd2rZ, cmd3rZ, cmd4rZ;
           if (zoo == "0")
           {
               cmrZ = QString::fromUtf8(tr("echo Descargando paquete solicitado..."));
               if (arqt =="x86_64")
               {
                    cmdrZ = "wget http://mirror.rosalab.ru/rosa/rosa2012.1/repository/x86_64/restricted/release/zoo-2.10-6-plf2012.1.x86_64.rpm";
                    x64 = "zoo-2.10-6-plf2012.1.x86_64.rpm";
               }
               else
               {
                   cmdrZ = "wget http://mirror.rosalab.ru/rosa/rosa2012.1/repository/i586/restricted/release/zoo-2.10-6-plf2012.1.i586.rpm";
                   x86 = "zoo-2.10-6-plf2012.1.i586.rpm";
               }
               cmd1rZ = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
               if (arqt =="x86_64")
               {
                    cmd2rZ ="urpmi --auto --force %1";
                    cmd2rZ=cmd2rZ.arg(x64);
               }
               else
               {
                   cmd2rZ ="urpmi --auto --force %1";
                   cmd2rZ=cmd2rZ.arg(x86);
               }
               cmd3rZ = tr("echo Limpiando temporales...");
               if (arqt =="x86_64")
               {
                    cmd4rZ = "rm -vf %1";
                    cmd4rZ=cmd4rZ.arg(x64);
               }
               else
               {
                   cmd4rZ = "rm -vf %1";
                   cmd4rZ=cmd4rZ.arg(x86);
               }
               comandos << cmrZ << cmdrZ << cmd1rZ << cmd2rZ << cmd3rZ << cmd4rZ;
           }
           if (mib != 0)
               delete mib;
           mib = new DrakeProcesos(comandos, this);
           connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
           connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
           connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
           int valor= comandos.count();
           mib->Valor(valor,0);
           mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro);
           mib->iniciarProceso();
       }
       else
       {
           ui->tabWidget->setCurrentPage(pagina);
           ui->tabWidget_8->setCurrentPage(0);
           return;
       }
}

void recoverdrake::on_actionSugerencias_y_avisos_triggered(bool a)
{
    Refrescar();
    QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
    bool opcion2;
    opcion2=ui->actionSugerencias_y_avisos->isChecked();
    QSettings seting("myorg","Aplica");
    seting.setValue("opcion2",opcion2);
    if (a==true)
     {
        m.setText(tr("Se ha activado las sugerencias al inicio de RecoverDrake"));
        ui->actionSugerencias_y_avisos->setIcon(QIcon(":/Imagenes/good.png"));
        QString hora = QTime::currentTime().toString("hh:mm:ss");
        ui->textEdit_4->append(""+hora+"-- Sugerencias de inicio activadas.");
     }
    else
    {
        m.setText(tr("Se ha desactivado las sugerencias al inicio de RecoverDrake.<p>""Utiliza esta opcion para volver a activarla."));
        ui->actionSugerencias_y_avisos->setIcon(QIcon(""));
        QString hora = QTime::currentTime().toString("hh:mm:ss");
        ui->textEdit_4->append(""+hora+"-- <b><FONT COLOR=\"RED\">Sugerencias de inicio desactivas");
    }
    m.exec();
    ui->progressBar->hide();
    ui->pushButton_2->hide();
    ui->label_13->hide();
    ui->tabWidget->setCurrentPage(pagina);
    ui->tabWidget_8->setCurrentPage(0);
}

void recoverdrake::on_actionMostrar_Caracteristicas_especificas_de_tu_sistema_GNU_Linux_triggered(bool i)
{
    Refrescar();
    QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
    bool opcion9;
    opcion9=ui->actionMostrar_Caracteristicas_especificas_de_tu_sistema_GNU_Linux->isChecked();
    QSettings seting("myorg","Aplica");
    seting.setValue("opcion9",opcion9);
    if (i==true)
    {
        m.setText(tr("Se muestran las Caracteristicas especificas de tu sistema GNU/Linux."));
        ui->actionMostrar_Caracteristicas_especificas_de_tu_sistema_GNU_Linux->setIcon(QIcon(":/Imagenes/good.png"));
        QString hora = QTime::currentTime().toString("hh:mm:ss");
        ui->textEdit_4->append(""+hora+"-- Mostrar \"Caracteristicas especificas de tu sistemas GNU/Linux\".");
        ui->groupBox_4->show();
        ui->pushButton_9->setText(tr("Ocultar \"Caracteristicas especificas de tu sistema GNU/Linux\""));        
        this->showMaximized();
        RX = 1;
    }
    else
    {
        m.setText(tr("Se ocultan las Caracteristicas especificas de tu sistema GNU/Linux."));
        ui->actionMostrar_Caracteristicas_especificas_de_tu_sistema_GNU_Linux->setIcon(QIcon(""));
        QString hora = QTime::currentTime().toString("hh:mm:ss");
        ui->textEdit_4->append(""+hora+"-- <b><FONT COLOR=\"RED\">Ocultar \"Caracteristicas especificas de tu sistemas GNU/Linux\".");
        ui->groupBox_4->hide();
        ui->pushButton_9->setText(tr("Mostrar \"Caracteristicas especificas de tu sistema GNU/Linux\""));
        this->showMaximized();
        RX = 0;
    }
    m.exec();
    ui->progressBar->hide();
    ui->pushButton_2->hide();
    ui->label_13->hide();
    ui->tabWidget->setCurrentPage(pagina);
    ui->tabWidget_8->setCurrentPage(0);
}

void recoverdrake::on_actionActivar_Mensajes_de_aplicaciones_triggered(bool f)
{
    Refrescar();
    QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
    bool opcion5;
    opcion5=ui->actionActivar_Mensajes_de_aplicaciones->isChecked();
    QSettings seting("myorg","Aplica");
    seting.setValue("opcion5",opcion5);
    if (f==true)
     {
        m.setText(tr("Se ha desactivado los mensajes de explicacion de utilidades."));
        Mensaka="Activo";
        ui->actionActivar_Mensajes_de_aplicaciones->setIcon(QIcon(":/Imagenes/good.png"));
        QString hora = QTime::currentTime().toString("hh:mm:ss");
        ui->textEdit_4->append(""+hora+"-- <b><FONT COLOR=\"RED\">Desactivados los mensajes de explicacion de utilidades.");
     }
    else
    {
        m.setText(tr("Se ha activado los mensajes de explicacion de utilidades de RecoverDrake.<p>""Utiliza esta opcion para volver a desactivarla."));
        Mensaka="Desactivo";
        ui->actionActivar_Mensajes_de_aplicaciones->setIcon(QIcon(""));
        QString hora = QTime::currentTime().toString("hh:mm:ss");
        ui->textEdit_4->append(""+hora+"-- Activados los mensajes de explicacion de utilidades.");
    }
    m.exec();
    ui->progressBar->hide();
    ui->pushButton_2->hide();
    ui->label_13->hide();
    ui->tabWidget->setCurrentPage(pagina);
    ui->tabWidget_8->setCurrentPage(0);
}

void recoverdrake::on_actionUsuarios_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Usuarios.");
    Desbloquear *pass=new Desbloquear(this);
    if (Stilo == "A")
        pass->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
    pass->exec();
    DatoRev=pass->Resultado;
    if (DatoRev == "1")
    {
        Refrescar();
        claves *clave=new claves();
        if (Stilo == "A")
            clave->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        clave->exec();
    }
    else if(DatoRev == "0")
    {
        ui->tabWidget->setCurrentPage(pagina);
        ui->tabWidget_8->setCurrentPage(0);
        return;
    }
    ui->progressBar->hide();
    ui->pushButton_2->hide();
    ui->label_13->hide();
    ui->tabWidget->setCurrentPage(pagina);
    ui->tabWidget_8->setCurrentPage(0);
}

void recoverdrake::on_actionOpciones_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Preferencias.");
    opciones *opcion=new opciones(this);
    if (Stilo == "A")
        opcion->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
    opcion->exec();
    this->ActualizarTodo();
}

void recoverdrake::on_actionComprabar_depndencias_RecoverDrake_triggered(bool c)
{
   UpDate = 1;
   Refrescar();
   QStringList comandos;
   QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
   bool opcion1;
   opcion1=ui->actionComprabar_depndencias_RecoverDrake->isChecked();
   QSettings seting("myorg","Aplica");
   seting.setValue("opcion1",opcion1);
   if (c==true)
    {
       ui->actionComprabar_depndencias_RecoverDrake->setIcon(QIcon(":/Imagenes/good.png"));
       QString hora = QTime::currentTime().toString("hh:mm:ss");
       ui->textEdit_4->append(""+hora+"-- Comprobacion de dependencias activadas.");
       int respuesta = 0;
       respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Comprobar dependencias de uso")),
                  QString::fromUtf8(tr("<center><b>Comprobar dependecias para RecoverDrake</b></center><p>"
                     "<b>IMPORTANTE:</b> Esta opcion se utiliza para saber y actualizar "
                     "todas las dependencias necesarias para un buen uso de RecoverDrake, "
                     "ya que necesita de varios paquetes externos que deben estar "
                     "debidamente configurados e instalados para tener al 100% nuestra "
                     "utilidad.<p>"
                     "<B>NOTA: Debes esperar a que termine completamente el proceso seleccionado, "
                     "el cual te sera notificado cuando finalice en la consola de procesos.</B><p>"
                     "&iquest;Comprobar dependencias para el buen uso de RecoverDrake?")), QMessageBox::Ok, QMessageBox::No);
       if (respuesta == QMessageBox::Ok)
       {
           m.setText(tr("Se ha activado la comprobacion de dependencias de RecoverDrake. Se procedera a realizar la comprobacion."));
           Reconfigurar = "Si";
           QString cmdx=QString::fromUtf8(tr("echo Buscando dependencias necesarias e instalando..."));
           QString comando="urpmi -a --auto --force zenity";
           QString comando1="urpmi -a --auto --force sudo";
           QString comando2="urpmi -a --auto --force bash";
           QString comando3="urpmi -a --auto --force kwrite";
           QString comando4="urpmi -a --auto --force stdc++";
           QString comando5="urpmi -a --auto --force ndiswrapper";
           QString comando6="urpmi -a --auto --force photorec";
           QString comando7="urpmi -a --auto --force testdisk";
           QString comando8="urpmi -a --auto --force ntfs-config";
           QString comando9="urpmi -a --auto --force cdparanoia";
           QString comando10="urpmi -a --auto --force lame";
           QString comando11="urpmi -a --auto --force ffmpeg";
           QString comando12="urpmi -a --auto --force dvdauthor";
           QString comando13="urpmi -a --auto --force parole";
           QString comando14="urpmi -a --auto --force tar";
           QString comando15="urpmi -a --auto --force alien";
           QString comando16="urpmi -a --auto --force fakeroot";
           QString comando17="urpmi -a --auto --force rpmdrake";
           QString comando18="urpmi -a --auto --force mkvtoolnix";
           QString comando19="urpmi -a --auto --force clamav";
           QString comando20="urpmi -a --auto --force dolphin";
           QString comando21;
           if (arqt =="x86_64")
               comando21="urpmi -a --auto --force lib64qtgui4";
           else
               comando21="urpmi -a --auto --force libqtgui4";
           QString comando22="urpmi -a --auto --force unrar";
           QString comando23="urpmi -a --auto --force mencoder";
           QString comando24="urpmi -a --auto --force gnome-utils ";
           QString comando25="urpmi -a --auto --force real-codecs";
           QString comando26="urpmi -a --auto --force win32-codecs";
           QString comando27="urpmi -a --auto --force xanim-codecs";
           QString comando28="urpmi -a --auto --force libquicktime";
           QString comando29;
           int Eliminar = 0;
           if (arqt =="x86_64")
           {
               comando29="urpmi -a --auto --force lib64quicktime0";
               Eliminar = 1;
           }
           QString comando30="urpmi -a --auto --force libquicktime-x264";
           QString comando31="urpmi -a --auto --force libquicktime-lame";
           QString comando32="urpmi -a --auto --force libquicktime-faad";
           QString comando33="urpmi -a --auto --force libquicktime-faac";
           QString comando34="urpmi -a --auto --force faad2";
           QString comando35="urpmi -a --auto --force xine-faad";
           QString comando36="urpmi -a --auto --force faac";
           QString comando37="urpmi -a --auto --force libamrnb3";
           QString comando38="urpmi -a --auto --force libamrwb3";
           QString comando39="urpmi -a --auto --force amrnb";
           QString comando40="urpmi -a --auto --force amrwb";
           QString comando41="urpmi -a --auto --force libnotify";
           QString comando42="urpmi -a --auto --force id3lib";
           QString comando43="urpmi -a --auto --force lame";
           QString comando44="urpmi -a --auto --force gstreamer0.10-a52dec";
           QString comando45="urpmi -a --auto --force gstreamer0.10-amrnb";
           QString comando46="urpmi -a --auto --force gstreamer0.10-amrwb";
           QString comando47="urpmi -a --auto --force gstreamer0.10-faad";
           QString comando48="urpmi -a --auto --force gstreamer0.10-faac";
           QString comando49="urpmi -a --auto --force gstreamer0.10-ffmpeg";
           QString comando50="urpmi -a --auto --force gstreamer0.10-lame";
           QString comando51="urpmi -a --auto --force gzip";
           QString comando52="urpmi -a --auto --force imagemagick";
           QString comando53="urpmi -a --auto --force dvd+rw-tools";
           QString comando54="urpmi -a --auto --force ccd2iso";
           QString comando55="urpmi -a --auto --force mdf2iso";
           QString comando56="urpmi -a --auto --force cdi2iso";
           QString comando57="urpmi -a --auto --force gstreamer0.10-flac";
           QString comando58="urpmi -a --auto --force gstreamer0.10-cdio";
           QString comando59="urpmi -a --auto --force gstreamer0.10-cdparanoia";
           QString comando60="urpmi -a --auto --force mencoder";
           QString comando61="urpmi -a --auto --force transcode";
           QString comando62="urpmi -a --auto --force gstreamer0.10-mms";
           QString comando63="urpmi -a --auto --force convmv";
           QString comando64="urpmi -a --auto --force cdrkit";
           QString comando65="urpmi -a --auto --force cdrdao";
           QString comando66="urpmi -a --auto --force unzip";
           QString comando67="urpmi -a --auto --force dalle";
           QString comando68="urpmi -a --auto --force lsdvd";
           QString comando69="urpmi -a --auto --force vcdimager";
           QString comando70="urpmi -a --auto --force nmap";
           QString comando71="urpmi -a --auto --force iptables";
           QString comando72="urpmi -a --auto --force konsole";
           QString comando73="urpmi -a --auto --force grub";
           QString comando74="urpmi -a --auto --force grub2";
           QString comando75="urpmi -a --auto --force syslinux";
           QString comando76="urpmi -a --auto --force file-roller";
           QString comando77="urpmi -a --auto --force mtools";
           QString comando78="urpmi -a --auto --force qemu";
           QString comando79="urpmi -a --auto --force gcstar";
           QString comando80="urpmi -a --auto --force x11vnc";
           QString comando81="urpmi -a --auto --force mutt";
           QString comando82="urpmi -a --auto --force sendmail";
           QString comando83="urpmi -a --auto --force ssmtp";
           QString comando84="urpmi -a --auto --force tigervnc";
           QString comando85="urpmi -a --auto --force transmission-cli";
           QString comando86="urpmi -a --auto --force firefox";
           QString comando87="urpmi -a --auto --force dvdbackup";
           QString comando88="urpmi -a --auto --force gcc";
           QString comando89="urpmi -a --auto --force make";
           QString comando90,comando91;
           if (arqt =="x86_64")
           {
               comando90="urpmi -a --auto --force lib64ncurses-devel";
               comando91="urpmi -a --auto --force lib64ncursesw-devel";
           }
           else
           {
               comando90="urpmi -a --auto --force libncurses-devel";
               comando91="urpmi -a --auto --force libncursesw-devel";
           }
           QString comando92="urpmi -a --auto --force id3v2";
           QString comando93="urpmi -a --auto --force pulseaudio-utils";
           QString comando94;
           if (arqt =="x86_64")
               comando94="urpmi -a --auto --force lib64qrencode-devel";
           else
               comando94="urpmi -a --auto --force libqrencode-devel";
           QString comando95 = "urpmi -a --auto --force bzip2";
           QString comando96 = "urpmi -a --auto --force zip";
           QString comando98 = "urpmi -a --auto --force arj";
           QString comando99 = "urpmi -a --auto --force p7zip";
           QString comando100 = "urpmi -a --auto --force tree";
           QString comando101 = "urpmi -a --auto --force hexedit";
           QString comando102 = "urpmi -a --auto --force webmin";
           QString comando103;
           if (arqt =="x86_64")
               comando103 = "urpmi -a --auto --force lib64qtermwidget-devel";
           else
               comando103 = "urpmi -a --auto --force libqtermwidget-devel";
           comandos << cmdx << comando << comando1 << comando2 << comando3 << comando4 << comando5 << comando6 << comando7 << comando8 << comando9 << comando10;
           comandos << comando11 << comando12 << comando13 << comando14 << comando15 << comando16 << comando17 << comando18 << comando19 << comando20;
           if (Eliminar == 1)
                comandos << comando21 << comando22 << comando23 << comando24 << comando25 << comando26 << comando27 << comando28 << comando29 << comando30;
           else if (Eliminar == 0)
                comandos << comando21 << comando22 << comando23 << comando24 << comando25 << comando26 << comando27 << comando28 << comando30;
           comandos << comando31 << comando32 << comando33 << comando34 << comando35 << comando36 << comando37 << comando38 << comando39 << comando40;
           comandos << comando41 << comando42 << comando43 << comando44 << comando45 << comando46 << comando47 << comando48 << comando49 << comando50;
           comandos << comando51 << comando52 << comando53 << comando54 << comando55 << comando56 << comando57 << comando58 << comando59 << comando60;
           comandos << comando61 << comando62 << comando63 << comando64 << comando65 << comando66 << comando67 << comando68 << comando69 << comando70 << comando71 << comando72;
           comandos << comando73 << comando74 << comando75 << comando76 << comando77 << comando78 << comando79 << comando80 << comando81 << comando82 << comando83 << comando84;
           comandos << comando85 << comando86 << comando87 << comando88 << comando89 << comando90 << comando91 << comando92 << comando93 << comando94;
           comandos << comando95 << comando96 << comando98 << comando99 << comando100 << comando101 << comando102 << comando103;
           QString cm, cmd, cmd1, cmd2, cmd3, cmd4;
           if (nrg2iso == "0")
           {
               cm = QString::fromUtf8(tr("echo Descargando paquete solicitado..."));
               cmd = "wget http://gregory.kokanosky.free.fr/v4/linux/nrg2iso-0.2-SuSE9_br.i586.rpm";
               cmd1 = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
               cmd2 ="urpmi --auto --force nrg2iso-0.2-SuSE9_br.i586.rpm";
               cmd3 = tr("echo Limpiando temporales...");
               cmd4 = "rm -vf nrg2iso-0.2-SuSE9_br.i586.rpm";
               comandos << cm << cmd << cmd1 << cmd2 << cmd3 << cmd4;
           }
           QString cmr, cmdr, cmd1r, cmd2r, cmd3r, cmd4r, x64, x86;
           if (rar == "0")
           {
               cmr = QString::fromUtf8(tr("echo Descargando paquete solicitado..."));
               if (arqt =="x86_64")
               {
                    cmdr = "wget ftp://download.asso-linux-online.fr/download/packages-mlo/Mageia/4/x86_64/nonfree/rar-5.0.0-2.nonfree.mga4.x86_64.rpm";
                    x64 = "rar-5.0.0-2.nonfree.mga4.x86_64.rpm";
               }
               else
               {
                   cmdr = "wget ftp://download.asso-linux-online.fr/download/packages-mlo/Mageia/4/i586/nonfree/rar-5.0.0-2.nonfree.mga4.i586.rpm";
                   x86 = "rar-5.0.0-2.nonfree.mga4.i586.rpm";
               }
               cmd1r = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
               if (arqt =="x86_64")
               {
                    cmd2r ="urpmi --auto --force %1";
                    cmd2r=cmd2r.arg(x64);
               }
               else
               {
                   cmd2r ="urpmi --auto --force %1";
                   cmd2r=cmd2r.arg(x86);
               }
               cmd3r = tr("echo Limpiando temporales...");
               if (arqt =="x86_64")
               {
                    cmd4r = "rm -vf %1";
                    cmd4r=cmd4r.arg(x64);
               }
               else
               {
                   cmd4r = "rm -vf %1";
                   cmd4r=cmd4r.arg(x86);
               }
               comandos << cmr << cmdr << cmd1r << cmd2r << cmd3r << cmd4r;
           }
           QString cmrZ, cmdrZ, cmd1rZ, cmd2rZ, cmd3rZ, cmd4rZ;
           if (zoo == "0")
           {
               cmrZ = QString::fromUtf8(tr("echo Descargando paquete solicitado..."));
               if (arqt =="x86_64")
               {
                    cmdrZ = "wget http://mirror.rosalab.ru/rosa/rosa2012.1/repository/x86_64/restricted/release/zoo-2.10-6-plf2012.1.x86_64.rpm";
                    x64 = "zoo-2.10-6-plf2012.1.x86_64.rpm";
               }
               else
               {
                   cmdrZ = "wget http://mirror.rosalab.ru/rosa/rosa2012.1/repository/i586/restricted/release/zoo-2.10-6-plf2012.1.i586.rpm";
                   x86 = "zoo-2.10-6-plf2012.1.i586.rpm";
               }
               cmd1rZ = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
               if (arqt =="x86_64")
               {
                    cmd2rZ ="urpmi --auto --force %1";
                    cmd2rZ=cmd2rZ.arg(x64);
               }
               else
               {
                   cmd2rZ ="urpmi --auto --force %1";
                   cmd2rZ=cmd2rZ.arg(x86);
               }
               cmd3rZ = tr("echo Limpiando temporales...");
               if (arqt =="x86_64")
               {
                    cmd4rZ = "rm -vf %1";
                    cmd4rZ=cmd4rZ.arg(x64);
               }
               else
               {
                   cmd4rZ = "rm -vf %1";
                   cmd4rZ=cmd4rZ.arg(x86);
               }
               comandos << cmrZ << cmdrZ << cmd1rZ << cmd2rZ << cmd3rZ << cmd4rZ;
           }
           if (mib != 0)
               delete mib;
           mib = new DrakeProcesos(comandos, this);
           connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
           connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
           connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
           int valor= comandos.count();
           mib->Valor(valor,0);
           mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro);
           mib->iniciarProceso();
       }
       ui->actionComprabar_depndencias_RecoverDrake->setChecked(false);
       opcion1=ui->actionComprabar_depndencias_RecoverDrake->isChecked();
       QSettings seting("myorg","Aplica");
       seting.setValue("opcion1",opcion1);
       ui->tabWidget->setCurrentPage(pagina);
       ui->tabWidget_8->setCurrentPage(0);
       return;
    }
   else
   {
       QString hora = QTime::currentTime().toString("hh:mm:ss");
       ui->textEdit_4->append(""+hora+"-- <b><FONT COLOR=\"RED\">ATENCION: LA COMPROBACION DE DEPENDENCIAS NO ESTA ACTIVADA, PUEDE NO FUNCIONAR CORRECTAMENTE.");
       m.setText(tr("Se ha desactivado la comprobacion de dependencias de RecoverDrake.<p>""Utiliza esta opcion para volver a activarla."));
       ui->actionComprabar_depndencias_RecoverDrake->setIcon(QIcon(""));
   }
   m.exec();
}

void recoverdrake::on_actionEliminar_Repositorios_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Eliminar repositorios.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Eliminar repositorios")),
               QString::fromUtf8(tr("<center><b>Eliminar repositorios configurados</b></center><p>"
                  "<b>IMPORTANTE:</b> Esta opcion solo es valida, si los repositorios "
                  "estan fallando, ya que los elimina y los vuelve a crear con "
                  "una nueva configuracion.<p>"
                  "Procede con cuidado!!!<p>"
                  "Como su nombre indica, tras una instalacion limpia, se "
                  "quedan instalados como repositorios los soportes del "
                  "DVD/CD de instalacion, pues con esta opcion se pueden "
                  "eliminar y dejar limpios todos los soportes.<p>"
                  "Tambien sirve cuando tienes algun grupo de repositorios "
                  "\"problematicos\" y quieres cambiarlos o cualquier otro tipo "
                  "de problemas de configuracion de los mismos.<p>"
                  "<B>NOTA: Debes esperar a que termine completamente el proceso seleccionado, "
                  "el cual te sera notificado cuando finalice en la consola de procesos.</B><p>"
                  "&iquest;Eliminar repositorios instalados?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta = QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok)
    {
        QString cmd =QString::fromUtf8(tr("echo Eliminando repositorios..."));
        QString comando="urpmi.removemedia -a";
        QStringList comandos;
        comandos<< cmd << comando;
        if (mib != 0)
            delete otros;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
        connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        connect(mib, SIGNAL(finProceso()), this, SLOT(on_actionOficiales_triggered()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
        SegundaFuncion = 1;
    }
    else
    {
        ui->tabWidget->setCurrentPage(pagina);
        ui->tabWidget_8->setCurrentPage(0);
        return;
    }
}

void recoverdrake::on_actionOficiales_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Repositorios oficiales.");
    if (SegundaFuncion == 1)
    {
        disconnect(mib, SIGNAL(finProceso()), this, SLOT(on_actionOficiales_triggered()));
        SegundaFuncion = 0;
    }
    Refrescar();
    int respuesta = 0;
    if(Distro=="Mandriva")
    {
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Instalar repositorios oficiales")),
                   QString::fromUtf8(tr("<center><b>Oficiales</b></center><p>"
                      "Configuracion de los repositorios Oficiales.<p>"
                      "Estos repositorios como su nombre indica son los garantizados "
                      "por Mandriva y son necesarios para tenerlo todo actualizado "
                      "y poder disponer de los paquetes que Mandriva nos deja a nuestro "
                      "alcance.<p>"
                      "Representan el conjunto de repositoriosa Main, Contrib, non-free "
                      "y sus respectivos \"updates\" y \"backports\"<p>"
                      "<B>NOTA: Debes esperar a que termine completamente el proceso seleccionado, "
                      "el cual te sera notificado cuando finalice en la consola de procesos.</B><p>"
                      "&iquest;Instalar repositorios Oficiales (Recomendado)?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
            if (respuesta == QMessageBox::Ok)
            {
                QString cmd=QString::fromUtf8(tr("echo Instalando repositorios oficiales..."));
                QString comando="urpmi.addmedia --wget --distrib --mirrorlist \"http://api.mandriva.com/mirrors/basic.%1.%2.list\"";
                comando = comando.arg(dist).arg(arqt);
                QStringList comandos;
                comandos<< cmd << comando;
                if (mib != 0)
                    delete otros;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                connect(mib, SIGNAL(finProceso()), this, SLOT(on_actionPLF_triggered()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
                SegundaFuncion=1;
            }
            else
            {
                ui->tabWidget->setCurrentPage(pagina);
                ui->tabWidget_8->setCurrentPage(0);
                return;
            }
        }
        else if(Distro == "Mageia")
        {
            if (Mensaka!="Activo")
            {
                respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Instalar repositorios oficiales")),
                       QString::fromUtf8(tr("<center><b>Oficiales</b></center><p>"
                          "Configuracion de los repositorios Oficiales.<p>"
                          "Estos repositorios como su nombre indica son los garantizados "
                          "por Mageia y son necesarios para tenerlo todo actualizado "
                          "y poder disponer de los paquetes que Mageia nos deja a nuestro "
                          "alcance.<p>"
                          "Representan el conjunto de repositorios core, nonfree, tainted "
                          "y sus respectivos \"updates\" y \"backports\"<p>"
                          "<B>NOTA: Debes esperar a que termine completamente el proceso seleccionado, "
                          "el cual te sera notificado cuando finalice en la consola de procesos.</B><p>"
                          "&iquest;Instalar repositorios Oficiales (Recomendado)?")), QMessageBox::Ok, QMessageBox::No);
            }
            else
            {
                respuesta=QMessageBox::Ok;
            }
            if (respuesta == QMessageBox::Ok)
            {
                QString cmd=QString::fromUtf8(tr("echo Instalando repositorios oficiales..."));
                QString comando="urpmi.addmedia --wget --distrib --mirrorlist";
                comando = comando.arg(dist).arg(arqt);
                QStringList comandos;
                comandos<< cmd << comando;
                if (mib != 0)
                    delete otros;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count();
                mib->Valor(valor,0);
                mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro);
                mib->iniciarProceso();
            }
        }
        else
        {
            ui->tabWidget->setCurrentPage(pagina);
            ui->tabWidget_8->setCurrentPage(0);
            return;
        }
}

void recoverdrake::on_actionPLF_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Repositorios PLF.");
    if (SegundaFuncion == 1)
    {
    disconnect(mib, SIGNAL(finProceso()), this, SLOT(on_actionPLF_triggered()));
    SegundaFuncion =0;
    }
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Instalar repositorios PLF")),
               QString::fromUtf8(tr("<center><b>PLF</b></center><p>"

                  "Configuracion de los repositorios PLF.<p>"

                  "Corresponden al grupo \"Penguin Liberation Front\" mas "
                  "conocidos como PLF y es un grupo de paquetes altamente "
                  "recomendado.<P>"

                  "Representan el conjunto de repositorios non-free y free "
                  "y sus respectivos \"updates\" y \"backports\"<p>"

                  "<B>NOTA: Debes esperar a que termine completamente el proceso seleccionado, "
                  "el cual te sera notificado cuando finalice en la consola de procesos.</B><p>"

                  "&iquest;Instalar repositorios PLF (Recomendado)?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

        QString cmd2;
        QString cmd=QString::fromUtf8(tr("echo Instalando repositorios Penguin Liberation Front..."));
        if (dist == "2011.0")
        {
            cmd2 = "urpmi.addmedia --distrib --mirrorlist \"http://urpmi.mandriva.ru/lists/ru/rest.%1.%2.list\"";
            cmd2 = cmd2.arg(dist).arg(arqt);
        }
        else
        {
            cmd2 = "urpmi.addmedia --wget --distrib --mirrorlist \"http://plf.zarb.org/mirrors/%1.%2.list\"";
            cmd2 = cmd2.arg(dist).arg(arqt);
        }
        QStringList comandos;
        comandos<< cmd << cmd2;
        if (mib != 0)
            delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
        connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionMIB_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Repositorios MIB.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Instalar repositorios MIB")),
               QString::fromUtf8(tr("<center><b>MIB</b></center><p>"

                  "Configuracion de los repositorios MIB.<p>"

                  "Corresponden al grupo \"Mandriva International Backports\" mas "
                  "conocidos como MIB o \"Mandriva Italian Backports\" de origen "
                  "italiano y es un grupo de paquetes mas moderno e incluso no "
                  "distribuidos en otros repositorios, pero suelen causar problemas "
                  "con los repositorios oficiales, por lo que recomiendo que esten "
                  "inhabilitados desde inicio y solo habilitar cuando se necesite "
                  "un paquete en particular.<p>"

                  "Representan el conjunto de repositorios Basic_32 y Experto_32.<p>"

                  "<B>NOTA: Debes esperar a que termine completamente el proceso seleccionado, "
                  "el cual te sera notificado cuando finalice en la consola de procesos.</B><p>"

                  "&iquest;Instalar repositorios MIB?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

    QString cmd=QString::fromUtf8(tr("echo Instalando repositorios Mandriva Italian Backports..."));
    QString cmd1 = "urpmi.addmedia --wget --update MIB-basic_32 http://mib.pianetalinux.org/MIB/%1/32/basic/ with media_info/synthesis.hdlist.cz" ;
    cmd1 = cmd1.arg(dist);
    QString cmd2 = "urpmi.addmedia --wget MIB-experts_32 http://mib.pianetalinux.org/MIB/%1/32/experts/ with media_info/synthesis.hdlist.cz";
    cmd2 =  cmd2.arg(dist);
    QStringList comandos;
    comandos<< cmd << cmd1 << cmd2 ;

    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
    else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionBDK_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Repositorios Blogdrake.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Instalar repositorios BDK")),
               QString::fromUtf8(tr("<center><b>BDK</b></center><p>"

                  "Configuracion de los repositorios BDK.<p>"

                  "Somos, ya que me incluyo, el grupo \"blogdrake\", el foro "
                  "oficial de Mandriva en lengua espa&ntilde;ola y en nuestro "
                  "repositorio puedes encontrar versiones recientes de "
                  "paquetes actualizados y paquetes que no encontraras en "
                  "otros repositorios<p>"

                  "Al igual que MIB, deberia estar deshabilitado de comienzo "
                  "y habilitar en el momento de su uso, para evitar cualquier "
                  "incompatibilidad de software<p>"

                  "Representan el conjunto de repositorios free, noarch-free y "
                  "non-free.<p>"

                  "<B>NOTA: Debes esperar a que termine completamente el proceso seleccionado, "
                  "el cual te sera notificado cuando finalice en la consola de procesos.</B><p>"

                  "&iquest;Instalar repositorios BDK?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){
        QString cmd1;
        QString cmd;
        if(Distro=="Mandriva")
        {
            if (dist == "2010.2")
            {
                dist = "2010.1";
            }
            if (dist == "2011.0")
            {
                cmd=QString::fromUtf8(tr("echo Instalando repositorios Blogdrake..."));
                cmd1 ="urpmi.addmedia --wget --distrib --nopubkey ftp://ftp.blogdrake.net/mandriva/%1/%2";
                cmd1 = cmd1.arg(dist).arg(arqt);
            }
            else
            {
                cmd=QString::fromUtf8(tr("echo Instalando repositorios Blogdrake..."));
                cmd1 ="urpmi.addmedia --wget --distrib ftp://ftp.blogdrake.net/mandriva/%1/%2";
                cmd1 = cmd1.arg(dist).arg(arqt);
            }
        }
        else if (Distro=="Mageia")
        {
            cmd=QString::fromUtf8(tr("echo Instalando repositorios Blogdrake..."));
            cmd1 ="urpmi.addmedia --wget --distrib ftp://ftp.blogdrake.net/mageia/mageia%1/%2";
            cmd1 = cmd1.arg(dist).arg(arqt);
        }

    QStringList comandos;
    comandos<< cmd << cmd1;

    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
    else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionMUD_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Repositorios MUD.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Instalar repositorios MUD")),
               QString::fromUtf8(tr("<center><b>MUD</b></center><p>"

                  "Configuracion de los repositorios MUD.<p>"

                  "Corresponden al grupo \"Mandriva User Deutschland\" mas "
                  "conocido como MUD de origen Aleman y como MIB o BDK es un "
                  "desarrollo totalmente independiente, por lo que debe estar "
                  "deshabilitado desde inicio, por la similitud con el grupo "
                  "MIB o BDK.<P>"

                  "<B>NOTA: Debes esperar a que termine completamente el proceso seleccionado, "
                  "el cual te sera notificado cuando finalice en la consola de procesos.</B><p>"

                  "&iquest;Instalar repositorios MUD?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok)
    {

        if (dist == "2011.0")
        {
            QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr("En este momento no estan operativos los repositorios para la version "+dist+"<p>En el momento que "
                      "esten disponibles, seran incluidos en RecoverDrake.<p>Disculpa las molestias."));
            m.exec();
        }
        else
        {
            QString cmd=QString::fromUtf8(tr("echo Instalando repositorios Mandriva User Deustshland..."));
            QString cmd1 = "urpmi.addmedia --wget MUD-%2 ftp://ftp.mandrivauser.de/rpm/GPL/%1/%2/release/ with media_info/synthesis.hdlist.cz";
            cmd1 = cmd1.arg(dist).arg(arqt);

            QStringList comandos;
            comandos<< cmd << cmd1;

            if (mib != 0)
                delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
            connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
        }
    }
    else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionOtros_Manualmente_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Repositorios manuales.");
    Refrescar();
    int respuesta = 0;
    bool ok;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Instalacion manual de repositorios")),
                QString::fromUtf8(tr("<center><b>Instalar repositorio manualmente</b></center><p>"

                   "Este apartado solo sirve para poder introducir un "
                   "repositorio a mano, ya que hay muchos mas que no voy "
                   "a relacionar aqui que pueden ser de tu interes.<p>"

                   "Introduce el nombre con el que quieras que "
                   "se identificado y la direccion de la web.<P> "

                   "<FONT COLOR=\"RED\">Ejemplo:<p>"

                   "<FONT COLOR=\"RED\">KDE_452<p>"

                   "<FONT COLOR=\"RED\">ftp://ftp.kde.org/pub/kde/stable/4.5.0/Mandriva/2010.1/i586/<p>"

                   "<B>NOTA: Debes esperar a que termine completamente el proceso seleccionado, "
                   "el cual te sera notificado cuando finalice en la consola de procesos.</B><p>"

                   "&iquest;Comenzar instalacion manual de repositorios?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){
               QString texto = QInputDialog::getText(this, QString::fromUtf8(tr("Instalacion manual de repositorios")),
               QString::fromUtf8(tr("Introduzca el nombre para identificar el repositorio.<P> "

                   "<FONT COLOR=\"RED\">Ejemplo:<p>"

                   "<FONT COLOR=\"RED\">KDE45_i586")),
                   QLineEdit::Normal,
                   "",
                   &ok);
                   if (ok && !texto.isEmpty()){
                         QString texto1 = QInputDialog::getText(this, QString::fromUtf8(tr("Instalacion manual de repositorios")),
                               QString::fromUtf8(tr("Introduzca la direccion web<p>"

                                  "<FONT COLOR=\"RED\">Ejemplo:<p>"

                                  "<FONT COLOR=\"RED\">ftp://ftp.kde.org/pub/kde/stable/4.5.0/Mandriva/2010.1/i586/<p>")),
                                  QLineEdit::Normal,
                                  "",
                                  &ok);
                        if (ok && !texto1.isEmpty())
                        {
                            QString text1 = texto1.remove("urpmi.addmedia").remove("with media_info/synthesis.hdlist.cz");
                            QString cm=QString::fromUtf8(tr("echo Instalando repositorios a mano..."));
                            QString cmd = "urpmi.addmedia %1 %2 with media_info/synthesis.hdlist.cz";
                            cmd = cmd.arg(texto).arg(text1);
                            QStringList comandos;
                            comandos<< cm << cmd;

                            if (mib != 0)
                                delete mib;
                            mib = new DrakeProcesos(comandos, this);
                            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                            connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
                        }
                        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
                }
        }
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionA_adir_todos_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Todos los repositorios.");
    Refrescar();
    int respuesta = 0;
    QStringList comandos;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Instalar todos los repositorios")),
               QString::fromUtf8(tr("<center><b>Instalar todos los repositorios</b></center><p>"

                  "Este apartado Si no se soluciona, realiza la instalacion masiva de todos "
                  "los repositorios incluidos por defectos, como pueden "
                  "ser OFICIALES, PLF, MIB, BDK y MUD.<P> "

                  "<B>NOTA: Debes esperar a que termine completamente el proceso seleccionado, "
                  "el cual te sera notificado cuando finalice en la consola de procesos.</B><p>"

                  "&iquest;Configurar todos los repositorios?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok)
    {
        QString cmd;
        if(Distro=="Mandriva")
        {
            cmd=QString::fromUtf8(tr("echo Instalando repositorios oficiales, PLF, MID, BDK Y MUD..."));
        }
        else if (Distro=="Mageia")
        {
            cmd=QString::fromUtf8(tr("echo Instalando repositorios oficiales y BDK..."));
        }
        QString cmd1 = "urpmi.addmedia --wget --distrib --mirrorlist";
        comandos << cmd << cmd1;
        QString cmd2;
        if(Distro=="Mandriva")
        {
            if (dist == "2011.0")
            {
                cmd2 = "urpmi.addmedia --distrib --mirrorlist \"http://urpmi.mandriva.ru/lists/ru/rest.%1.%2.list\"";
                cmd2 = cmd2.arg(dist).arg(arqt);
            }
            else
            {
                cmd2 = "urpmi.addmedia --wget --distrib --mirrorlist \"http://plf.zarb.org/mirrors/%1.%2.list\"";
                cmd2 = cmd2.arg(dist).arg(arqt);
            }
            QString cmd3 = "urpmi.addmedia --wget --update MIB-basic_32 http://mib.pianetalinux.org/MIB/%1/32/basic/ with media_info/synthesis.hdlist.cz" ;
            cmd3 = cmd3.arg(dist);
            QString cmd4 = "urpmi.addmedia --wget MIB-experts_32 http://mib.pianetalinux.org/MIB/%1/32/experts/ with media_info/synthesis.hdlist.cz";
            cmd4 =  cmd4.arg(dist);
            comandos << cmd2 << cmd3 << cmd4;
        }
        QString cmd5;
        if(Distro=="Mandriva")
        {
            if (dist == "2010.2")
            {
                dist = "2010.1";
            }
            if (dist == "2011.0")
            {
                cmd5 ="urpmi.addmedia --wget --distrib --nopubkey ftp://ftp.blogdrake.net/mandriva/%1/%2";
                cmd5 = cmd5.arg(dist).arg(arqt);
            }
            else
            {
                cmd5 ="urpmi.addmedia --wget --distrib ftp://ftp.blogdrake.net/mandriva/%1/%2";
                cmd5 = cmd5.arg(dist).arg(arqt);
            }
        }
        else if (Distro=="Mageia")
        {
            cmd5 ="urpmi.addmedia --wget --distrib ftp://ftp.blogdrake.net/mageia/mageia%1/%2";
            cmd5 = cmd5.arg(dist).arg(arqt);
        }
        comandos << cmd5;
        if(Distro=="Mandriva")
        {
            QString cmd6;
            if (dist == "2011.0")
            {
                cmd6 = "echo No es posible configurar este repositorio en este momento.";
            }
            else
            {
                cmd6 = "urpmi.addmedia --wget MUD-%2 ftp://ftp.mandrivauser.de/rpm/GPL/%1/%2/release/ with media_info/synthesis.hdlist.cz";
                cmd6 = cmd6.arg(dist).arg(arqt);
                comandos << cmd6;
            }
        }

        if (mib != 0)
            delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
        connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionActualizar_sistema_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Actualizar sistema (automatico).");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Actualizar sistema (automatico)")),
                           QString::fromUtf8(tr("<center><b>Actualizar sistema (automatico) </b></center><p>"

                           "Como su nombre indica, una vez configurados los "
                           "repositorios es importante hacer una actualizacion "
                           "para solucionar cualquier bugs, problema, etc.<p>"

                           "Dicha actualizacion se realiza de manera automatica, "
                           "para no tener que interactuar con la terminal.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Actualizar sistema de forma automatica?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

        QString cm=QString::fromUtf8(tr("echo Actualizando sistema, espera a que termine el proceso..."));
        QString cmd = "urpmi --wget --auto --force --auto-update -v";

        QStringList comandos;
        comandos<< cm << cmd;

        if (mib != 0)
            delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
        connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionEliminar_paquetes_huerfanos_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Eliminar paquetes huerfanos.");
    Refrescar();
    if (zenity == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"zenity\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Eliminar paquetes huerfanos (automatico)")),
                               QString::fromUtf8(tr("<center><b>Eliminar paquetes huerfanos (automatico)</b></center><p>"

                               "Su finalidad es el desinstalar del sistema todos los "
                               "paquetes que se quedan huerfanos por desinstalacion de "
                               "otros paquetes.<p>"

                               "Esta opcion se incluye como una opcion mas, pero no se "
                               "recomienda utilizarla, ya que se puede inutilizar el "
                               "sistema.<p>"

                               "<FONT COLOR=\"RED\">PROCEDA CON PRECAUCION!!!!<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Desinstalar paquetes huerfanos (NO recomendado)?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

            QString cm =QString::fromUtf8(tr("echo Eliminando paquetes huerfanos y creando salvaguarda..."));
            QString cmd = "RecoverOrphans";

            QStringList comandos;
            comandos<< cm << cmd;

            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
            connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionRecuperar_paquetes_huerfanos_Eliminados_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Recuperar paquetesa huerfanos.");
    Refrescar();
    if (zenity == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"zenity\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Recuperar paquetes huerfanos (automatico)")),
                               QString::fromUtf8(tr("<center><b>Recuperar paquetes huerfanos (automatico)</b></center><p>"

                               "Mediante esta opcion podemos recupera los paquetes "
                               "huerfanos eliminados, ya que los volvera a instalar.<p>"

                               "Es importante en el caso de inestabilidad del sistema.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Recuperar paquetes huerfanos eliminados?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

            QString cm=QString::fromUtf8(tr("echo Recuperando paquetes huerfanos..."));
            QString cmd = "RecoverResOrphans";

            QStringList comandos;
            comandos<< cm << cmd;

            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
            connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionSalvaguardar_rpm_s_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Salvaguardar rpms.");
    Refrescar();
    if (zenity == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"zenity\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Salvaguarda de rpms (automatico)")),
                               QString::fromUtf8(tr("<center><b>Salvaguarda de rpms (automatico)</b></center><p>"

                               "Crea un fichero .lst con la informacion de rpms de "
                               "su sistema, para ser utilizado en caso de necesidad.<p>"

                               "Es la opcion mas importante de RecoverDrake y para lo "
                               "que fue construido, ya que puedes exportar la lista a "
                               "otro equipo y hacer un mirror del original o por otro "
                               "lado, tras una instalacion de nueva version, se ejecuta "
                               "y vuelve a su estado original.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Realizar salvaguarda (Recomendado)?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

            QString cm=QString::fromUtf8(tr("echo Salvaguardando rpms instalados..."));
            QString cmd = "RecoverRpm";

            QStringList comandos;
            comandos<< cm << cmd;

            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
            connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionRecuperar_rpm_s_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Recuperar rpms.");
    Refrescar();
    if (zenity == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"zenity\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Recuperar salvaguarda de rpms (automatico)")),
                               QString::fromUtf8(tr("<center><b>Recuperar salvaguarda de rpms (automatico)</b></center><p>"

                               "IMPORTANTE: Esta opcion sirve para recuperar los "
                               "paquetes despues de la instalacion/actualizacion.<p>"

                               "Utilizelo solo para este proposito.<p>"

                               "NOTA: Si su /home esta en una particion aparte, "
                               "continue sin problemas, sino es asi, copie el fichero "
                               "denominado PackAntxxxxxx.lst en la ubicacion:<p>"

                               "/home/TU_USUARIO/Documentos<p>"

                               "sino expecifica otra ruta, antes de realizar este paso, "
                               "ya que sino es asi, no podra realizarlo.<p>"

                               "Instalara todos los paquetes guardados, desechando los "
                               "ya instalados.<p>"

                               "Para poder llevar un seguimiento se creara un fichero "
                               "denominado RegRecoverxxxxxx.lst con los procesos "
                               "realizados durante el volcado en la ubicacion:<p>"

                               "/home/TU_USUARIO/Documentos<p>"

                               "sino expecifica otra ruta.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Recuperar salvaguarda (Recomendado)?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

            QString cm=QString::fromUtf8(tr("echo Recuperando rpms instalados..."));
            QString cmd = "RecoverResRpm";

            QStringList comandos;
            comandos<< cm << cmd;

            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
            connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionSalvaguardar_copia_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Crear copia de seguridad.");
    Refrescar();
    if (zenity == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"zenity\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        if (gzip == "0")
        {
            QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"gzip\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
            m.exec();
        }
        else
        {
            if (tar == "0")
            {
                QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"tar\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
                m.exec();
            }
            else
            {
                int respuesta = 0;
                int respuesta1 = 0;
                if (Mensaka!="Activo")
                {
                    respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Copia de seguridad")),
                                       QString::fromUtf8(tr("<center><b>Copia de seguridad</b></center><p>"

                                       "Como su nombre indica, podemos hacer una copia de "
                                       "seguridad de nuestros datos y de cualquier "
                                       "directorio.<p>"

                                       "Generara la copia del respado en la ubicacion en su "
                                       "/home/TU_USUARIO/Documentos/ llamada RespaldoDrakexxxxxx.tar.gz "
                                       "sino se expecifica lo contrario.<p>"

                                       "En el caso de existir un fichero anterior con el mismo "
                                       "nombre sera actualizado.<p>"

                                       "<B>IMPORTANTE: No puede haber nombre de archivos con espacios "
                                       "ya que no se salvaguardaran por lo que para corregir dicho "
                                       "error, deberia renombrar los archivos con la opcion del menu "
                                       "de solucion a problemas/sustituir espacios en blanco en nombres "
                                       "de archivo.</B><p>"

                                       "<B>NOTA: Debes esperar a que termine completamente el "
                                       "proceso seleccionado, el cual te sera notificado "
                                       "cuando finalice en la consola de procesos.</B><p>"

                                       "&iquest;Realizar Backup?")), QMessageBox::Ok, QMessageBox::No);
                }
                else
                {
                    respuesta=QMessageBox::Ok;
                }
                if (respuesta == QMessageBox::Ok){
                    if (Mensaka!="Activo")
                    {
                        respuesta1= QMessageBox::question(this, QString::fromUtf8(tr("Comprobar nombres de archivos o directorios")),
                                           QString::fromUtf8(tr("<center><b>Comprobacion de nombres de archivos o directorios</b></center><p>"

                                           "Si elige esta opcion, evitara que puedan dar error cualquier fichero o directorio que "
                                           "quiera salvaguardar por que el nombre tenga espacios en blanco.<p>"

                                           "&iquest;Quiere comprobar espacios en blanco en nombre de archivos antes de continuarr?")), QMessageBox::Ok, QMessageBox::No);
                    }
                    else
                    {
                        respuesta1=QMessageBox::Ok;
                    }
                    if (respuesta1 == QMessageBox::Ok)
                    {
                        QString cm=QString::fromUtf8(tr("echo Comprobando nombres con espacios en blanco y realizando salvaguarda..."));
                        QString cmd = "RecoverRename";
                        QString cmd1 ="RecoverBackup";

                        QStringList comandos;
                        comandos<< cm << cmd << cmd1;

                        if (mib != 0)
                        delete mib;
                        mib = new DrakeProcesos(comandos, this);
                        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                        connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
                    }
                    else
                    {
                        QString cm=QString::fromUtf8(tr("echo Realizando salvaguarda..."));
                        QString cmd = "RecoverBackup";

                        QStringList comandos;
                        comandos<< cm << cmd;

                        if (mib != 0)
                        delete mib;
                        mib = new DrakeProcesos(comandos, this);
                        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                        connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
                    }
                }
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
            }
        }
    }
}

void recoverdrake::on_actionRecuperar_copia_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Recuperar copia de seguridad.");
    Refrescar();
    if (tar == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"tar\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        int respuesta1 =0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Restaurar copia de seguridad")),
                               QString::fromUtf8(tr("<center><b>Restaurar copia de seguridad</b></center><p>"

                               "Como su nombre indica, podemos restaurar los datos "
                               "anteriormente salvados a su ubicacion original. "
                               "salvo que se le de otra ruta.<p>"

                               "Instalara todos los datos guardados, sobreescribiendo "
                               "los ya instalados, en el que caso de que existan.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Restaurar backup?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){
            if (Mensaka!="Activo")
            {
                respuesta1 = QMessageBox::question(this, QString::fromUtf8(tr("Eleccion de destino")),
                                   QString::fromUtf8(tr("<center><b>Eleccion de destino</b></center><p>"

                                   "&iquest;Elegir destino de restauracion?")), QMessageBox::Ok, QMessageBox::No);
            }
            else
            {
                respuesta1=QMessageBox::Ok;
            }
            if (respuesta1 == QMessageBox::Ok)
            {
                        QString path=tr("/home/%1/Documentos/");
                        path=path.arg(user);

                        QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir copia de seguridad")),
                                            path,trUtf8(tr("Fichero comprimido .taz.gz (*.tar.gz)")));
                        if (fileNameOrigen.isEmpty())
                        {
                            ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                            return;
                        }
                        QString fileNameDirectori = QFileDialog::getExistingDirectory(this,QString::fromUtf8(tr("Donde descomprimir?")),path,QFileDialog::ShowDirsOnly);
                        if (fileNameDirectori.isEmpty())
                        {
                            ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                            return;
                        }
                        QString cm =QString::fromUtf8(tr("echo Restaurando copia de seguridad..."));
                        QString cmd = "su - %1 -c \"tar -xzvf %2 --directory=%3\"";
                        cmd = cmd.arg(user).arg(fileNameOrigen).arg(fileNameDirectori);

                        QStringList comandos;
                        comandos<< cm << cmd;

                        if (mib != 0)
                        delete mib;
                        mib = new DrakeProcesos(comandos, this);
                        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                        connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
            }
            else
            {
                QString path=tr("/home/%1/Documentos/");
                path=path.arg(user);

                QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir copia de seguridad")),
                                    path,trUtf8(tr("Fichero comprimido .taz.gz (*.tar.gz)")));
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString cm =QString::fromUtf8(tr("echo Restaurando copia de seguridad..."));
                QString cmd = "su - %1 -c \"tar -xzvf %2 --directory=/\"";
                cmd = cmd.arg(user).arg(fileNameOrigen);

                QStringList comandos;
                comandos<< cm << cmd;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            }
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
        }
}

void recoverdrake::on_actionPreparar_kernel_para_autocompilaci_n_DKMS_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar DKMS para autocompilacion.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Preparar kernel para autocompilacion")),
                           QString::fromUtf8(tr("<center><b>Preparar kernel para autocompilacion</b></center><p>"

                           "A quien no le ha pasado, que al intentar compilar los DKMS, le han "
                           "dado error, por la necesidad de fuentes y codigo source sobre el "
                           "kernel activo, a la vez de no tener instaladas la librerias de "
                           "compilacion gcc<p>"

                           "Para poder solucionarlo, solo hay que ejecutar esta utilidad y "
                           "quedara resuelto.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Preparar autocompilacion?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

        QString cm =QString::fromUtf8(tr("echo Instalando los paquetes necesarios para el kernel..."));
        QString cmd = "urpmi --fuzzy --force -a --auto kernel-%1-devel-%2-%3";
        cmd = cmd.arg(Tip).arg(Ver).arg(Rev);
        QString cmd1 = "urpmi --fuzzy --force -a --auto kernel-%1-devel-latest";
        cmd1 = cmd1.arg(Tip);
        QString cmd2 = "urpmi --fuzzy --force -a --auto kernel-%1-latest";
        cmd2 = cmd2.arg(Tip);
        QString cmd3 = "urpmi --fuzzy --force -a --auto kernel-source-latest";
        QString cmd4 = "urpmi --fuzzy --force -a --auto kernel-source-%2-%3";
        cmd4 = cmd4.arg(Ver).arg(Rev);
        QString cmd5 = "urpmi --fuzzy --force -a --auto dkms";
        QString cmd6 = "urpmi --fuzzy --force -a --auto dkms-minimal";
        QString cmd7 = "urpmi --fuzzy --force -a --auto gcc gcc-c++ gcc-cpp";
        QString cmd8 = "urpmi --fuzzy --force -a --auto gcc-c++ gcc-cpp";
        QString cmd9 = "urpmi --fuzzy --force -a --auto gcc-cpp";
        QString cmd10 = "urpmi --fuzzy --force -a --auto task-c-devel";
        QString cmd11 = "urpmi --fuzzy --force -a --auto task-c++-devel";
        QString cmd12 = "urpmi --fuzzy --force -a --auto rpm-build";

        QStringList comandos;
        comandos<< cm << cmd << cmd1 << cmd2 << cmd3 << cmd4 << cmd5 << cmd6 << cmd7 << cmd8 << cmd9 << cmd10 << cmd11 << cmd12;

        if (mib != 0)
            delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
        connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_action_desde_CD_DVD_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Crear imagen ISO desde CD/DVD de datos.");
        Refrescar();
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Crear imagen ISO de un CD/DVD de datos")),
                               QString::fromUtf8(tr("<center><b>Crear imagen ISO de un CD/DVD de datos</b></center><p>"

                               "Podemos crear una imagen iso con el simple echo de ejecutar esta "
                               "utilidad.<p>"

                               "<b>Utilizar solo con CD/DVD de datos.<b><p>"                             

                               "<b>Introduzca el CD/DVD Origen en la unidad.<p>"

                               "<B>NOTA Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Crear imagen ISO de CD/DVD de datos?")), QMessageBox ::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path=tr("/home/%1/Documentos/imagen.iso");
                path=path.arg(user);

                QString fileNameDestino = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Salvar imagen ISO")),
                                    path,QString::fromUtf8(tr("Imagen ISO (*.iso)")));
                if (fileNameDestino.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName1 = fileNameDestino.replace(".iso","");
                QString cm = QString::fromUtf8(tr("echo Procesando (Suele ser prolongado). Espere por favor..."));
                QString cmd = "su - %1 -c \"dd if=/dev/cdrom of=%2.iso\"";
                cmd = cmd.arg(user).arg(fileName1);
                QStringList comandos;
                comandos << cm << cmd;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                connect(mib, SIGNAL(finProceso()), this, SLOT(on_actionMontar_imagen_ISO_triggered()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
                SegundaFuncion =1;}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_action_desde_CD_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Crear imagen ISO desde CD de audio.");
    Refrescar();
    if (cdrdao == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"cdrdao\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Crear imagen ISO de un CD de audio")),
                               QString::fromUtf8(tr("<center><b>Crear imagen ISO de un CD de audio</b></center><p>"

                               "Podemos crear una imagen iso con el simple echo de ejecutar esta "
                               "utilidad, manteniendo la estructura original del CD y por lo tanto "
                               "al quemarlo en un cd nuevo, quedara igual que el original.<p>"

                               "<b>Utilizar solo con CD de audio.<b><p>"

                               "Se crean dos ficheros, por un lado el fichero.iso y por otro lado "
                               "el fichero.toc, para poder luego crear una copia.<p>"

                               "<b>IMPORTANTE: Hay disco de audio originales que tiene un sistema "
                               "anticopia, por lo que hace casi imposible el crear una imagen iso "
                               "por lo que en el caso de que se estanque, la solucion pasa por "
                               "ripearlo con la opcion correspondiente y despues quemarlo en un CD "
                               "como disco de audio, solucionando asi el problema.<b><p>"

                               "<b>Introduzca el CD Origen en la unidad.<p>"

                               "<B>NOTA Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.<p>"

                               "ESTE PROCESO ES EXTREMADAMENTE LENTO.<B><p>"

                               "&iquest;Crear imagen ISO de CD de audio?")), QMessageBox ::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path=tr("/home/%1/Documentos/imagen.iso");
                path=path.arg(user);

                QString fileNameDestino = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Salvar imagen ISO")),
                                    path,QString::fromUtf8(tr("Imagen ISO (*.iso)")));
                if (fileNameDestino.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName1 = fileNameDestino.replace(".iso","");
                QString cm = QString::fromUtf8(tr("echo Procesando (Suele ser muy prolongado). Espere por favor..."));
                QString cmd = "su - %1 -c \"cdrdao read-cd --buffers 64 --driver generic-mmc-raw -v 2 --device /dev/cdrom --read-raw --datafile %2.iso %2.toc\"";
                cmd = cmd.arg(user).arg(fileName1);

                QStringList comandos;
                comandos << cm << cmd;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                connect(mib, SIGNAL(finProceso()), this, SLOT(on_actionMontar_imagen_ISO_triggered()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
                SegundaFuncion = 1;}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
   }
}

void recoverdrake::on_action_desde_directorio_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Crear imagen ISO desde directorio/archivo.");
    Refrescar();
    if (cdrkit == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"cdrkit\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Crear imagen ISO de un directorio/archivo")),
                               QString::fromUtf8(tr("<center><b>Crear imagen ISO de un directorio/archivo</b></center><p>"

                               "Podemos crear una imagen iso de cualquier directorio o archivos "
                               "con el simple echo de ejecutar esta "
                               "utilidad.<p>"

                               "<B>NOTA Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Crear imagen ISO de directorio/archivo?")), QMessageBox ::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok)
        {
            Localizador *Locate=new Localizador(this);
            if (Stilo == "A")
                Locate->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            Locate->showMaximized();
            Locate->exec();
            QString Loc=Locate->Local;
            if (Loc == "")
            {
                ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                return;
            }
            else if (Loc != "")
            {
                    QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                    m.setText(Loc);
                    m.exec();
                    QString path=tr("/home/%1/Documentos/imagen.iso");
                    path=path.arg(user);
                    QString fileNameDestino = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Salvar imagen ISO")),
                                        path,QString::fromUtf8(tr("Imagen ISO (*.iso)")));
                    if (fileNameDestino.isEmpty())
                    {
                       ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                       return;
                    }
                    Loc = Loc.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace("(","\\(").replace(")","\\)");
                    QString fileName1 = fileNameDestino.replace(".iso","");
                    fileName1 = fileName1.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace("(","\\(").replace(")","\\)");
                    QString cm=QString::fromUtf8(tr("echo Salvando imagen de directorio..."));
                    QString cmd = "su - %1 -c \"mkisofs -r -R -J -o %2.iso -graft-points %3\"";
                    cmd = cmd.arg(user).arg(fileName1).arg(Loc);
                    QStringList comandos;
                    comandos<< cm << cmd;
                    if (mib != 0)
                    delete mib;
                    mib = new DrakeProcesos(comandos, this);
                    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                    connect(mib, SIGNAL(finProceso()), this, SLOT(on_actionMontar_imagen_ISO_triggered()));
                    int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
                    SegundaFuncion = 1;
            }
        }
    }
}

void recoverdrake::on_actionMontar_imagen_ISO_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Montar imagen ISO.");
    if (SegundaFuncion == 1)
    {
    disconnect(mib, SIGNAL(finProceso()), this, SLOT(on_actionMontar_imagen_ISO_triggered()));
    SegundaFuncion =0;
    }
    Refrescar();
    if (ccd2iso == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ccd2iso\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        if (mdf2iso == "0")
        {
            QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"mdf2iso\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
            m.exec();
        }
        else
        {
            if (cdi2iso == "0")
            {
                QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"cdi2iso\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
                m.exec();
            }
            else
            {

                if (nrg2iso == "0")
                {
                    QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                    m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"nrg2iso\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
                    m.exec();
                }
                else
                {
                    QStringList comandos;
                    int respuesta = 0;
                    if (Mensaka!="Activo")
                    {
                        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Montar archivo de imagen")),
                                           QString::fromUtf8(tr("<center><b>Montar archivo de imagen</b></center><p>"

                                           "Puede que nos interese montar una imagen .iso para poder "
                                           "trabajar sobre ella, sin tener que grabarla en un CD/DVD.<P>"

                                           "Con esta utilidad, hacemos un montaje en nuestro disco "
                                           "duro sin tener que grabarla.<P>"

                                           "<B>NOTA Debes esperar a que termine completamente el "
                                           "proceso seleccionado, el cual te sera notificado "
                                           "cuando finalice en la consola de procesos.</B><p>"

                                           "&iquest;Montar archivo de imagen?")), QMessageBox::Ok, QMessageBox::No);
                    }
                    else
                    {
                        respuesta=QMessageBox::Ok;
                    }
                    if (respuesta == QMessageBox::Ok){

                            QString path=tr("/home/%1/Documentos/");
                            QString path2="/mnt/";
                            path=path.arg(user);
                            QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo imagen")),
                                                path,trUtf8(tr("Archivo de imagen (*.iso *.nrg *.img *.mdf *.cdi)")));
                            system ("mv -v '"+fileNameOrigen+"' `echo '"+fileNameOrigen+"' |tr ' ' '_'`");
                            system ("mv -v '"+fileNameOrigen+"' `echo '"+fileNameOrigen+"' |tr '&' 'y'`");
                            if (fileNameOrigen.isEmpty())
                            {
                                ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                                return;
                            }
                            QString fileNameDestino = QFileDialog::getExistingDirectory(this,QString::fromUtf8(tr("Destino de montaje")),path2,QFileDialog::ShowDirsOnly);
                            if (fileNameDestino.isEmpty())
                            {
                                ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                                return;
                            }
                            QString cm =QString::fromUtf8(tr("echo Montando imagen..."));
                            comandos<< cm;
                            if (fileNameOrigen.right(4) == ".iso")
                            {
                                QString fileName = fileNameOrigen.replace(" ", "_").replace("&","y");
                                QString fileNameDest = fileNameDestino.replace(" ", "_").replace("&","y");
                                QString cmd = "mount -t iso9660 -o loop %2 %3";
                                cmd = cmd.arg(fileName).arg(fileNameDest);
                                comandos<< cmd;
                            }
                            else if (fileNameOrigen.right(4) == ".nrg")
                            {
                                QString fileName = fileNameOrigen.replace(" ", "_").replace("&","y").replace(".nrg","");
                                QString fileNameDest = fileNameDestino.replace(" ", "_").replace("&","y");
                                QString cm1= "nrg2iso %2.nrg %3.iso";
                                cm1 = cm1.arg(fileName).arg(fileName);
                                QString cmd = "mount -t iso9660 -o loop %2.iso %3";
                                cmd = cmd.arg(fileName).arg(fileNameDest);
                                comandos<< cm1 << cmd;
                            }
                            else if (fileNameOrigen.right(4) == ".img")
                            {
                                QString fileName = fileNameOrigen.replace(" ", "_").replace("&","y").replace(".img","");
                                QString fileNameDest = fileNameDestino.replace(" ", "_").replace("&","y");
                                QString cm1= "ccd2iso %2.img %3.iso";
                                cm1 = cm1.arg(fileName).arg(fileName);
                                QString cmd = "mount -t iso9660 -o loop %2.iso %3";
                                cmd = cmd.arg(fileName).arg(fileNameDest);
                                comandos<< cm1 << cmd;
                            }
                            else if (fileNameOrigen.right(4) == ".mdf")
                            {
                                QString fileName = fileNameOrigen.replace(" ", "_").replace("&","y").replace(".mdf","");
                                QString fileNameDest = fileNameDestino.replace(" ", "_").replace("&","y");
                                QString cm1= "mdf2iso %2.mdf %3.iso";
                                cm1 = cm1.arg(fileName).arg(fileName);
                                QString cmd = "mount -t iso9660 -o loop %2.iso %3";
                                cmd = cmd.arg(fileName).arg(fileNameDest);
                                comandos<< cm1 << cmd;
                            }
                            else if (fileNameOrigen.right(4) == ".cdi")
                            {
                                QString fileName = fileNameOrigen.replace(" ", "_").replace("&","y").replace(".cdi","");
                                QString fileNameDest = fileNameDestino.replace(" ", "_").replace("&","y");
                                QString cm1= "cdi2iso %2.cdi %3.iso";
                                cm1 = cm1.arg(fileName).arg(fileName);
                                QString cmd = "mount -t iso9660 -o loop %2.iso %3";
                                cmd = cmd.arg(fileName).arg(fileNameDest);
                                comandos<< cm1 << cmd;
                            }

                            if (mib != 0)
                            delete mib;
                            mib = new DrakeProcesos(comandos, this);
                            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                            connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
                }
            }
        }
    }
}

void recoverdrake::on_actionDesmontar_imagen_ISO_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Desmontar imagen ISO.");
        Refrescar();
        int respuesta = 0;        
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Desmontar archivo de imagen")),
                               QString::fromUtf8(tr("<center><b>Desmontar archivo de imagen</b></center><p>"

                               "Una vez hemos acabado con la manipulacion de la imagen ISO "
                               "debemos desmontarla para poder dejar libre la memoria a la "
                               "vez que podemos manipular el fichero original ISO.<P>"

                               "<B>NOTA Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Desmontar archivo de imagen?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path="/mnt/";
                QString fileNameOrigen = QFileDialog::getExistingDirectory(this,QString::fromUtf8(tr("Ubicacion de origen de imagen montada")),path,QFileDialog::ShowDirsOnly);
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                int respuesta2 = 0;
                respuesta2 = QMessageBox::question(this, QString::fromUtf8(tr("Borrar directorio montado")),
                                       QString::fromUtf8(tr("<center><b>Borrar directorio montado</b></center><p>"

                                       "IMPORTANTE: Si marcas la opcion OK, tienes que tener muy en "
                                       "cuenta que el directorio donde has montado la imagen "
                                       "no es un directorio que tenia anteriormente datos, "
                                       "porque seran eliminados y puede causar graves da&ntilde;os.<p>"

                                       "Marque OK solo en el caso de haber creado a conciencia el "
                                       "directorio para montar la imagen.<p>"

                                       "PROCEDA CON MUCHA PRECAUCION.<P>"

                                       "<B>NOTA Debes esperar a que termine completamente el "
                                       "proceso seleccionado, el cual te sera notificado "
                                       "cuando finalice en la consola de procesos.</B><p>"

                                       "&iquest;Borrar directorio tras el desmontado?")), QMessageBox::Ok, QMessageBox::No);

                if (respuesta2 == QMessageBox::Ok){

                            QString cm =QString::fromUtf8(tr("echo Desmontando imagen y borrando directorio de ubicacion..."));
                            QString cmd2 ="fuser -k %2";
                            QString cmd = "umount %2";
                            QString cmd1 = "rm -vR -f %2";
                            cmd = cmd.arg(fileNameOrigen);
                            cmd1 = cmd1.arg(fileNameOrigen);
                            cmd2 = cmd2.arg(fileNameOrigen);
                            QStringList comandos;
                            comandos<< cm << cmd2 << cmd << cmd1;
                            if (mib != 0)
                            delete mib;
                            mib = new DrakeProcesos(comandos, this);
                            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                            connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso(); }

                else
                {
                    QString cd =QString::fromUtf8(tr("echo Desmontando imagen..."));
                    QString cmd2 ="fuser -k %2";
                    QString cmd = "umount %2";
                    cmd2 = cmd2.arg(fileNameOrigen);
                    cmd = cmd.arg(fileNameOrigen);

                    QStringList comandos;
                    comandos<< cd << cmd2 << cmd;

                    if (mib != 0)
                    delete mib;
                    mib = new DrakeProcesos(comandos, this);
                    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                    int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
                }
            }
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionBorrar_imagen_ISO_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Borrar imagen ISO.");
        Refrescar();
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Borrar archivo de imagen")),
                               QString::fromUtf8(tr("<center><b>Borrar archivo de imagen</b></center><p>"

                               "Con esta utilidad, hacemos un borrado de una imagen de nuestro disco "
                               "duro.<P>"

                               "<B>NOTA Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Borrar archivo de imagen?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path=tr("/home/%1/Documentos/");
                path=path.arg(user);

                QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Seleccionar archivo de imagen")),
                                    path,trUtf8(tr("Archivo de imagen (*.iso *.nrg *.img *.mdf *.cdi)")));
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString cm =QString::fromUtf8(tr("echo Borrando imagen..."));
                QString cmd = "rm -vf %2";
                cmd = cmd.arg(fileNameOrigen);

                QStringList comandos;
                comandos<< cm << cmd;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionDuplicar_disco_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Duplicar disco completo.");
    Refrescar();
    int respuesta = 0;
    bool ok;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Duplicar Disco Duro")),
                QString::fromUtf8(tr("<center><b>Duplicar Disco Duro</b></center><p>"

                   "Puede que quieras duplicar un disco, al haber instalado "
                   "uno mas grande y no quieras perder toda la configuracion "
                   "o sistema personalizado.<p>"

                   "Mediante este proceso, hacemos un duplicado exacto de "
                   "disco completo.<p>"

                   "<b>IMPORTANTE: Comprueba con sumo cuidadado que la unidad origen "
                   "y la unidad destino sen correctas.</b><p>"

                   "Para ello antes de realizar el proceso se accedera a los "
                   "discos para que no haya ningun tipo de duda. "
                   "Es importante que tomes nota del nombre de cada unidad.<p>"

                   "Hay que tener en cuenta tambien que el disco destino debe "
                   "ser igual en capacidad (o en todo caso mayor) que el disco "
                   "origen.<p>"

                   "<FONT COLOR=\"RED\">Por ejemplo:<p>"
                   "<FONT COLOR=\"RED\">sda (disco origen)<p>"
                   "<FONT COLOR=\"RED\">sdb (disco destino)<p>"

                   "<B>NOTA: Debes esperar a que termine completamente el proceso seleccionado, "
                   "el cual te sera notificado cuando finalice en la consola de procesos.</B><p>"

                   "&iquest;Duplicar disco duro completo?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){
        system("diskdrake");
               QString texto = QInputDialog::getText(this, QString::fromUtf8(tr("Disco Origen")),
               QString::fromUtf8(tr("Introduzca el nombre de disco <b>ORIGEN</b>.<P> "

                   "<FONT COLOR=\"RED\">Ejemplo:<p>"

                   "<FONT COLOR=\"RED\">sda<p>")),
                   QLineEdit::Normal,
                   "",
                   &ok);
                   if (ok && !texto.isEmpty()){
                         QString texto1 = QInputDialog::getText(this, QString::fromUtf8(tr("Disco Destino")),
                               QString::fromUtf8(tr("Introduzca el nombre de disco <b>DESTINO</B><p>"

                                  "<FONT COLOR=\"RED\">Ejemplo:<p>"

                                  "<FONT COLOR=\"RED\">sdb<p>")),
                                  QLineEdit::Normal,
                                  "",
                                  &ok);
                        if (ok && !texto1.isEmpty()){
                        QString cm =QString::fromUtf8(tr("echo Duplicando disco duro, por favor espera a que termine..."));
                        QString cmd = "dd if=/dev/%1 of=/dev/%2 bs=1M";
                        cmd = cmd.arg(texto).arg(texto1);
                        QStringList comandos;
                        comandos<< cm << cmd;

                        if (mib != 0)
                            delete mib;
                        mib = new DrakeProcesos(comandos, this);
                        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                        connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                }
        }
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionDuplicar_partici_n_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Duplicar particion.");
    Refrescar();
    int respuesta = 0;
    bool ok;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Duplicar Particion")),
                QString::fromUtf8(tr("<center><b>Duplicar Particion</b></center><p>"

                   "Puede que quieras duplicar una particion ya que la "
                   "capacidad se ha quedado peque&ntilde;a y quieras volcarla "
                   "a una mas grande.<p>"

                   "Mediante este proceso, hacemos un duplicado exacto de "
                   "una particion.<p>"

                   "<b>IMPORTANTE: Comprueba con sumo cuidadado que la particion "
                   "origen y la particion destino sen correctas.</b><p>"

                   "Para ello antes de realizar el proceso se accedera a las "
                   "particiones para que no haya ningun tipo de duda. "
                   "Es importante que tomes nota del nombre de cada particion.<p>"

                   "Hay que tener en cuenta tambien que la particion destino debe "
                   "ser igual en capacidad (o en todo caso mayor) que la particion "
                   "origen.<p>"

                   "<FONT COLOR=\"RED\">Por ejemplo:<p>"
                   "<FONT COLOR=\"RED\">sda1 (particion origen)<p>"
                   "<FONT COLOR=\"RED\">sda2 (particion destino)<p>"

                   "<B>NOTA: Debes esperar a que termine completamente el proceso seleccionado, "
                   "el cual te sera notificado cuando finalice en la consola de procesos.</B><p>"

                   "&iquest;Duplicar particion?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){
        system("diskdrake");
               QString texto = QInputDialog::getText(this, QString::fromUtf8(tr("Particion Origen")),
               QString::fromUtf8(tr("Introduzca el nombre de la particion <b>ORIGEN</b>.<P> "

                   "<FONT COLOR=\"RED\">Ejemplo:<p>"

                   "<FONT COLOR=\"RED\">sda1<p>")),
                   QLineEdit::Normal,
                   "",
                   &ok);
                   if (ok && !texto.isEmpty()){
                         QString texto1 = QInputDialog::getText(this, QString::fromUtf8(tr("Particion Destino")),
                               QString::fromUtf8(tr("Introduzca el nombre de la particion <b>DESTINO</B><p>"

                                  "<FONT COLOR=\"RED\">Ejemplo:<p>"

                                  "<FONT COLOR=\"RED\">sdb<p>")),
                                  QLineEdit::Normal,
                                  "",
                                  &ok);
                        if (ok && !texto1.isEmpty()){
                        QString cm =QString::fromUtf8(tr("echo Duplicando particion, por favor espera a que termine..."));
                        QString cmd = "dd if=/dev/%1 of=/dev/%2 bs=1M";
                        cmd = cmd.arg(texto).arg(texto1);
                        QStringList comandos;
                        comandos<< cm << cmd;

                        if (mib != 0)
                            delete mib;
                        mib = new DrakeProcesos(comandos, this);
                        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                        connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                }
        }
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionCrear_Usb_bootable_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Crear USB-Live bootable.");
    Refrescar();
    int respuesta = 0;
    bool ok;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Crear USB-Live")),
                QString::fromUtf8(tr("<center><b>Crear USB-Live</b></center><p>"

                   "Se puede crear un USB-Live para poder iniciar desde un USB "
                   "si no se dispone una unidad de CD/DVD como los peque&ntilde;os "
                   "portatiles que solo tienen puertos USB.<p>"

                   "Hay que tener disponible una imagen .iso del sistema operativo "
                   "a instalar en el USB, y claro esta, hay que disponer de un USB.<p>"

                   "<b>IMPORTANTE: Comprueba con sumo cuidadado que la unidad USB se "
                   "la correcta, ya que los datos de origen seran borrados.</b><p>"

                   "Para ello antes de realizar el proceso se accedera a los "
                   "discos para que no haya ningun tipo de duda y suele estar en la "
                   "ultima pesta&ntilde;a del diskdrake (fijate en el peso de la unidad).<p>"
                   "Es importante que tomes nota del nombre de cada unidad y compruebes "
                   "la capacidad para evitar sobresaltos.<p>"

                   "Este proceso puede tardar varios minutos.<p>"

                   "<FONT COLOR=\"RED\">Por ejemplo:<p>"
                   "<FONT COLOR=\"RED\">sdg (disco USB)<p>"

                   "<B>NOTA: Debes esperar a que termine completamente el proceso seleccionado, "
                   "el cual te sera notificado cuando finalice en la consola de procesos.</B><p>"

                   "&iquest;Crear USB-Live?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){
        system("diskdrake");
        QString path=tr("/home/%1/Escritorio/");
        path=path.arg(user);

        QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Imagen")),
                            path,trUtf8(tr("Imagen (*.iso *.img *.nrg)")));
        if (fileNameOrigen.isEmpty())
        {
            ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
            return;
        }
        QString texto = QInputDialog::getText(this, QString::fromUtf8(tr("Disco Usb")),
            QString::fromUtf8(tr("Introduzca el nombre de disco <b>USB</B><p>"

            "<FONT COLOR=\"RED\">Ejemplo:<p>"

            "<FONT COLOR=\"RED\">sdg<p>")),
        QLineEdit::Normal,
        "",
        &ok);
        if (ok && !texto.isEmpty()){
        QString cm =QString::fromUtf8(tr("echo Creando Usb-Live, por favor espera a que termine..."));
        QString cmd = "dd if=%1 of=/dev/%2 bs=2M";
        cmd = cmd.arg(fileNameOrigen).arg(texto);
        QStringList comandos;
        comandos<< cm << cmd;

        if (mib != 0)
            delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
        connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionFormatear_unidad_sin_recuperaci_n_posible_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Formatear disco a bajo nivel.");
    Refrescar();
    int respuesta = 0;
    bool ok;
    int i;
    int valor;
    QStringList comandos;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Formatear con destruccion de datos")),
                QString::fromUtf8(tr("<center><b>Formatear con destruccion de datos</b></center><p>"

                   "Puede que quieras formatear tu disco duro con la posibilidad de "
                   "que no se puedan recuperar los datos que hay en el disco de ninguna forma posible, ya se "
                   "porque quieres regalar el disco y no quieres entregar documentos privados o que tengas datos muy valiosos y "
                   "no quieras que sen leidos, como por ejemplo si tienes una "
                   "empresa y has decidido comprar un nuevo equipo con el disco duro mas potente y quieres deshacerte del viejo.<p>"

                   "Mediante este proceso, conseguimos dicho proposito con el metodo ZERO.<p>"

                   "<b>IMPORTANTE: Comprueba con sumo cuidadado que la unidad a formater se correcta.</b><p>"

                   "Para ello antes de realizar el proceso se accedera a los "
                   "discos para que no haya ningun tipo de duda. "
                   "Es importante que tomes nota del nombre de la unidad correcta.<p>"

                   "<FONT COLOR=\"RED\">Por ejemplo:<p>"
                   "<FONT COLOR=\"RED\">sda (disco a formatear)<p>"

                   "Luego se pedira la introduccion de las pasadas que quieras repetir el proceso "
                   "para conseguir el efecto desedo. Se recomienda 100 VECES como minimo, aunque "
                   "puede tardar bastante tiempo en acabar, pero el que algo quiere...<p>"

                   "<B>NOTA: Debes esperar a que termine completamente el proceso seleccionado, "
                   "el cual te sera notificado cuando finalice en la consola de procesos.</B><p>"

                   "&iquest;Formatear sin posibilidad de recuperacion?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){
        system("diskdrake");
               QString texto = QInputDialog::getText(this, QString::fromUtf8(tr("Disco a formatear")),
               QString::fromUtf8(tr("Introduzca el nombre de disco a<b> FORMATEAR</b>.<P> "

                   "<FONT COLOR=\"RED\">Ejemplo:<p>"

                   "<FONT COLOR=\"RED\">sda<p>")),
                   QLineEdit::Normal,
                   "",
                   &ok);
                   if (ok && !texto.isEmpty()){
                         QString texto1 = QInputDialog::getText(this, QString::fromUtf8(tr("Pasadas a realizar")),
                               QString::fromUtf8(tr("Introduzca el numero de pasadas a realizar.<p>"
                                  "<b>Se recomiendan 100 veces como minimo.</B><p>")),
                                  QLineEdit::Normal,
                                  "100",
                                  &ok);
                        if (ok && !texto1.isEmpty()){
                            for (i=0;i<texto1.toInt();i++)
                              {
                                  valor=i+1;
                                  QString cm =QString::fromUtf8("echo Formateando pasada numero "+QString::number(valor)+" de "+texto1+", por favor espera a que termine...");
                                  QString cmd = "dd if=/dev/zero of=/dev/%1 bs=1M";
                                  cmd = cmd.arg(texto);
                                  comandos<< cm << cmd;
                              }
                        if (mib != 0)
                            delete mib;
                        mib = new DrakeProcesos(comandos, this);
                        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                        connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                }
        }
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionSalvaguardar_ficheros_de_recuperaci_n_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Crear copia de ficheros de configuracion.");
    Refrescar();
    if (zenity == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"zenity\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        if (tar == "0")
        {
            QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"tar\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
            m.exec();
        }
        else
        {
            int respuesta = 0;
            if (Mensaka!="Activo")
            {
                respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Backup ficheros de configuracion")),
                                   QString::fromUtf8(tr("<center><b>Backup de ficheros de configuracion</b></center><p>"

                                   "En el directorio /etc que cuelga de la raiz, tenemos todas "
                                   "las configuraciones de nuestro equipo, tanto de usuarios, "
                                   "como de discos duros y un largo etc. de procesos que no nos "
                                   "gustaria perder, por lo que con esta utilidad, podemos "
                                   "guardarlos para mas tarde poder disponer de ellos.<p>"

                                   "Se guardan automaticamente los ficheros del directorio "
                                   "/etc y todos sus subdirectorios si no se expecifica lo "
                                   "contrario, ya que se puede elegir ficheros de configuracion "
                                   "independientes.<p>"

                                   "<B>NOTA: Debes esperar a que termine completamente el "
                                   "proceso seleccionado, el cual te sera notificado "
                                   "cuando finalice en la consola de procesos.</B><p>"

                                   "&iquest;Realizar Backup de configuracion?")), QMessageBox::Ok, QMessageBox::No);
            }
            else
            {
                respuesta=QMessageBox::Ok;
            }
            if (respuesta == QMessageBox::Ok){

                QString cm = QString::fromUtf8(tr("echo Realizando backup de configuraciones..."));
                QString cmd = "RecoverConf";

                QStringList comandos;
                comandos<< cm << cmd;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
            }
    }
}

void recoverdrake::on_actionRecuperar_ficheros_de_instalaci_n_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Recuperar ficheros de recuperacion.");
    Refrescar();
    if (tar == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"tar\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Restaurar ficheros de configuracion")),
                               QString::fromUtf8(tr("<center><b>Restaurar ficheros de configuracion</b></center><p>"

                               "Como su nombre indica, podemos restaurar los datos "
                               "anteriormente salvados a su ubicacion original "
                               "o destino marcado.<p>"

                               "<FONT COLOR=\"RED\">IMPORTANTE: Si el destino esta en la raiz "
                               "(/), se restaurara en la ubicacion original.<p>"

                               "Instalara todos los datos guardados, sobreescribiendo "
                               "los ya instalados, en el caso de existir.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Restaurar configuracion?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path=tr("/home/%1/Documentos/");
                path=path.arg(user);
                QString path1="/";
                path1=path1.arg(user);

                QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir copia de seguridad")),
                                    path,trUtf8(tr("Fichero comprimido .taz.bz2 (*.tar.bz2)")));
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileNameDirectori = QFileDialog::getExistingDirectory(this,QString::fromUtf8(tr("Donde descomprimir?")),path1,QFileDialog::ShowDirsOnly);
                if (fileNameDirectori.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString cm = QString::fromUtf8(tr("echo Recuperando backup de configuraciones..."));
                QString cmd = "tar -xjvf %2 --directory=%3";
                cmd = cmd.arg(fileNameOrigen).arg(fileNameDirectori);

                QStringList comandos;
                comandos<< cm << cmd;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
            }
}

void recoverdrake::on_actionA_adir_KDE_inestable_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Repositorio de KDE inestable");
    Refrescar();
    int respuesta = 0;
    bool ok;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Probar KDE inestable")),
                           QString::fromUtf8(tr("<center><b>Probar KDE inestable</b></center><p>"

                              "Cuantas veces has querido instalar una version de kde "
                              "superior y no soportada por Mandriva y te ha dado miedo de "
                              "que no respondiera el equipo tras el reinicio.<p>"

                              "Pues para los que tenemos \"versionitis\" llega esta "
                              "aplicacion, donde se pueden probar versiones inestables, "
                              "sin morir en el intento.<P>"

                              "Tal como nos dice su descripcion, de esta manera incluimos "
                              "el mirror del repositorio donde estan los paquetes a "
                              "actualizar del nuevo KDE que haya en el momento.<p>"

                              "En la primera parte de este proceso, pondremos el nombre "
                              "con el que se identificara internamente el repositorio "
                              "en nuestro sistema.<p>"

                              "En la segunda parte del proceso, se introduce la direccion "
                              "ftp/html donde estan colgados los ficheros a actualizar.<p>"

                              "Introduzca <b>SOLO</b> el nombre con el que quieras que "
                              "se identificado y la direccion de la web.<P>"

                              "<FONT COLOR=\"RED\">Ejemplo:<p>"

                              "<FONT COLOR=\"RED\">KDE_INESTABLE<p>"

                              "<FONT COLOR=\"RED\">ftp://ftp.kde.org/pub/kde/stable/4.5.0/Mandriva/2010.1/i586/<p>"

                              "<b><FONT COLOR=\"RED\">NUNCA</b> incluir la parte inicial que pone "
                              "<b>urpmi.addmedia</b> ni la parte final <b>with media_info/synthesis.hdlist.cz</b> "
                              "ya que esta parte, RecoverDrake, lo hace automaticamente.<p>"

                              "<B>NOTA: Debes esperar a que termine completamente el proceso seleccionado, "
                              "el cual te sera notificado cuando finalice en la consola de procesos.</B><p>"

                              "&iquest;Probar KDE inestable?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
               if (respuesta == QMessageBox::Ok){
                          QString texto = QInputDialog::getText(this, QString::fromUtf8(tr("Nombre identificativo de KDE inestable")),
                          QString::fromUtf8(tr("Introduzca el nombre para identificar el repositorio.<P> "

                              "<FONT COLOR=\"RED\">Ejemplo:<p>"

                              "<FONT COLOR=\"RED\">KDE_INESTABLE")),
                              QLineEdit::Normal,
                              "",
                              &ok);
                              if (ok && !texto.isEmpty()){
                                    QString texto1 = QInputDialog::getText(this, QString::fromUtf8(tr("Instalacion manual de repositorios")),
                                          QString::fromUtf8(tr("Introduzca la direccion web<p>"

                                             "<FONT COLOR=\"RED\">Ejemplo:<p>"

                                             "<FONT COLOR=\"RED\">ftp://ftp.kde.org/pub/kde/stable/4.5.0/Mandriva/2010.1/i586/<p>")),
                                             QLineEdit::Normal,
                                             "",
                                             &ok);
                                   if (ok && !texto1.isEmpty()){
                                   QString cm =QString::fromUtf8(tr("echo Instalando nombre del repositorio inestable de kde, solo instala el repositorio, pero no actualiza los paquetes..."));
                                   QString cmd = "urpmi.addmedia %1 %2 with media_info/synthesis.hdlist.cz";
                                   cmd = cmd.arg(texto).arg(texto1);
                                   QStringList comandos;
                                   comandos<< cm << cmd;

                                   if (mib != 0)
                                       delete mib;
                                   mib = new DrakeProcesos(comandos, this);
                                   connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                                   connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                                   connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                                   int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                           }
                   }
                   else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionActualizar_KDE_inestable_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Verificar compatibilidad de KDE inestable");
    Refrescar();
    int respuesta = 0;
    bool ok;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Comprobar compatibilidad de KDE inestable")),
                           QString::fromUtf8(tr("<center><b>Comprobar compatibilidad de KDE inestable</b></center><p>"

                              "Mediante esta opcion se hace una simulacion para "
                              "saber si habra problemas de compatibilidad o "
                              "errores apreciados.<p>"

                              "Introduzca el nombre con el que identifico el soporte<p>"

                              "<FONT COLOR=\"RED\">Ejemplo:<p>"

                              "<FONT COLOR=\"RED\">KDE_INESTABLE<p>"

                              "<B>NOTA: Debes esperar a que termine completamente el proceso seleccionado, "
                              "el cual te sera notificado cuando finalice en la consola de procesos.</B><p>"

                              "&iquest;Comprobar compatibilidad de KDE inestable?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
               if (respuesta == QMessageBox::Ok){
                          QString texto = QInputDialog::getText(this, QString::fromUtf8(tr("Nombre identificativo de KDE inestable")),
                          QString::fromUtf8(tr("Introduzca el nombre para identificar el repositorio.<P> "

                              "<FONT COLOR=\"RED\">Ejemplo:<p>"

                              "<FONT COLOR=\"RED\">KDE_INESTABLE")),
                              QLineEdit::Normal,
                              "",
                              &ok);
                              if (ok && !texto.isEmpty()){
                                   QString cm = QString::fromUtf8(tr("echo Comprobando la compatibilidad 100% del repositorio de kde inestable (Solo es una simulacion, si todo ha ido correcto podra instalarlo sin problemas)..."));
                                   QString cmd = "urpmi --auto --auto-update --test --media %1";
                                   cmd = cmd.arg(texto);
                                   QStringList comandos;
                                   comandos<< cm << cmd;

                                   if (mib != 0)
                                       delete mib;
                                   mib = new DrakeProcesos(comandos, this);
                                   connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                                   connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                                   connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                                   connect(mib, SIGNAL(finProceso()), this, SLOT(on_actionInstalar_KDE_inestable_triggered()));
                                   int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
                                   SegundaFuncion=1;}
                   }
                   else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionInstalar_KDE_inestable_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar KDE inestable");
    if (SegundaFuncion == 1)
    {
    disconnect(mib, SIGNAL(finProceso()), this, SLOT(on_actionInstalar_KDE_inestable_triggered()));
    SegundaFuncion = 0;
    }
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Instalar KDE inestable")),
                           QString::fromUtf8(tr("<center><b>Instalar KDE inestable</b></center><p>"

                              "Si la simulacion ha resultado positiva, ejecuta esta "
                              "opcion para instalar completamente el nuevo KDE.<p>"

                              "<B>NOTA: Debes esperar a que termine completamente el proceso seleccionado, "
                              "el cual te sera notificado cuando finalice en la consola de procesos.</B><p>"

                              "&iquest;Instalar KDE inestable?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
               if (respuesta == QMessageBox::Ok)
               {
                          QString cm = QString::fromUtf8(tr("echo Actualizando el repositorio \"versionitico\" de Kde inestable..."));
                          QString cmd1 = "urpmi --auto --auto-select";
                          QStringList comandos;
                          comandos<< cm << cmd1;
                          if (mib != 0)
                              delete mib;
                          mib = new DrakeProcesos(comandos, this);
                          connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                          connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                          connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                          int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionDesinstalar_KDE_inestable_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Desinstalar KDE inestable.");
    Refrescar();
    int respuesta = 0;
    bool ok;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Desinstalar KDE inestable")),
                           QString::fromUtf8(tr("<center><b>Desinstalar KDE inestable</b></center><p>"

                              "Si no nos convence la instalacion de la nueva version "
                              "de KDE, solo nos queda eliminar los paquetes nuevos que "
                              "se han instalado, eliminar el repositorio KDE4 que se ha "
                              "creado nuevamente y volver a instalar los paquetes que se "
                              "habian actualizado.<p>"

                              "DEBE eliminar el nombre del repositorio inestable para que "
                              "al eliminar y volver a actualizar no vuelva a coger los "
                              "paquetes actualizados.<p>"

                              "Con esta parte de la aplicacion, realizamos este proceso.<p>"

                              "<B>NOTA: Debes esperar a que termine completamente el proceso seleccionado, "
                              "el cual te sera notificado cuando finalice en la consola de procesos.</B><p>"

                              "&iquest;Desinstalar KDE inestable?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
               if (respuesta == QMessageBox::Ok){
                          QString texto = QInputDialog::getText(this, QString::fromUtf8(tr("Nombre identificativo de KDE inestable")),
                          QString::fromUtf8(tr("Introduzca el nombre para identificar el repositorio.<P> "

                              "<FONT COLOR=\"RED\">Ejemplo:<p>"

                              "<FONT COLOR=\"RED\">KDE_INESTABLE")),
                              QLineEdit::Normal,
                              "",
                              &ok);
                              if (ok && !texto.isEmpty()){
                                   QString cmd = QString::fromUtf8(tr("echo Removiendo repositorio %1"));
                                   QString cmd1 = "urpmi.removemedia %1";
                                   QString cmd2 = QString::fromUtf8(tr("echo Realizando desinstalacion de KDE..."));
                                   QString cmd3 = "urpme -v --auto --force -a kde";
                                   QString cmd4 = QString::fromUtf8(tr("echo Continuando con la restauracion de KDE..."));
                                   QString cmd5 = "urpmi --fuzzy -a --auto --force task-kde4";
                                   QString cmd51 = "urpmi --fuzzy -a --auto --force task-kde4-minimal";
                                   QString cmd6 = QString::fromUtf8(tr("echo Revisando paquetes KDE sin instalar..."));
                                   QString cmd7 = "urpmi --fuzzy -a --auto --force kde";
                                   cmd = cmd.arg(texto);
                                   cmd1 = cmd1.arg(texto);
                                   QStringList comandos;
                                   comandos<< cmd << cmd1 << cmd2 << cmd3 << cmd4 << cmd5 <<cmd51 << cmd6 << cmd7;

                                   if (mib != 0)
                                       delete mib;
                                   mib = new DrakeProcesos(comandos, this);
                                   connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                                   connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                                   connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                                   int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                                   else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
                }
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionSalvaguardar_Grub_de_arranque_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Guardar GRUB de arranque y tabla de particiones");
    Refrescar();
    int respuesta = 0;
    int respuesta1 =0;
    bool ok;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Backup del MBR del Grub")),
                           QString::fromUtf8(tr("<center><b>Backup del MBR del Grub</b></center><p>"

                           "El master boot record (MBR) es el primer sector (\"sector cero\") de un dispositivo "
                           "de almacenamiento de datos, como un disco duro. A veces, se emplea para el arranque "
                           "del sistema operativo instalando en el cargador bootstrap, otras veces es usado "
                           "para almacenar una tabla de particiones.<p>"

                           "<B>GUARDE LOS FICHEROS GENERADOS EN UN LUGAR SEGURO.<P>"
                           "SERAN DOS FICHEROS; UNO CON EL NOMBRE QUE HAYAS ELEGIDO Y CON EXTENSION .MBR "
                           "Y EL OTRO FIJO, DENOMINADO: tabla-particiones.sf<B><P>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Realizar Backup de MBR del Grub?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){
            QString path=tr("/home/%1/Documentos/");
            path=path.arg(user);

            QString texto = QInputDialog::getText(this, QString::fromUtf8(tr("Disco con sector de arranque")),
            QString::fromUtf8(tr("Introduzca el nombre de disco <b>ORIGEN</b>.<P> "

                "<FONT COLOR=\"RED\">Ejemplo:<p>"

                "<FONT COLOR=\"RED\">sda<p>")),
                QLineEdit::Normal,
                "sda",
                &ok);
                if (ok && !texto.isEmpty()){

                    respuesta1 = QMessageBox::question(this, QString::fromUtf8(tr("Tabla de particiones")),
                                           QString::fromUtf8(tr("<center><b>Tabla de particiones</b></center><p>"

                                           "Tambien puede hacer una backup de la tabla de particiones, ademas del "
                                           "MBR del Grub.<p>"

                                           "&iquest;Realizar Backup de la tabla de particiones?")), QMessageBox::Ok, QMessageBox::No);

                    if (respuesta1 == QMessageBox::Ok){

                        QString fileNameDirectori = QFileDialog::getExistingDirectory(this,QString::fromUtf8(tr("Donde guardar los ficheros .mbr y .sf?")),path,QFileDialog::ShowDirsOnly);
                        if (fileNameDirectori.isEmpty())
                        {
                            ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                            return;
                        }
                        QString cm =QString::fromUtf8(tr("echo Realizando backup del MBR..."));
                        QString cmd = "dd if=/dev/%1 of=%2/RecoverMBR.mbr bs=512 count=1";
                        QString cmd1 = QString::fromUtf8(tr("echo Creando tabla de particiones..."));
                        system("sfdisk -d /dev/'"+texto+"' > '"+fileNameDirectori+"'/tabla-particiones.sf");
                        cmd = cmd.arg(texto).arg(fileNameDirectori);
                        QStringList comandos;
                        comandos<< cm << cmd << cmd1;

                        if (mib != 0)
                            delete mib;
                        mib = new DrakeProcesos(comandos, this);
                        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                    else
                    {
                        QString fileNameDirectori = QFileDialog::getExistingDirectory(this,QString::fromUtf8(tr("Donde guardar los ficheros .mbr y .sf?")),path,QFileDialog::ShowDirsOnly);
                        if (fileNameDirectori.isEmpty())
                        {
                            ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                            return;
                        }
                        QString cm =QString::fromUtf8(tr("echo Realizando backup del MBR..."));
                        QString cmd = "dd if=/dev/%1 of=%2/RecoverMBR.mbr bs=512 count=1";
                        cmd = cmd.arg(texto).arg(fileNameDirectori);
                        QStringList comandos;
                        comandos<< cm << cmd;

                        if (mib != 0)
                            delete mib;
                        mib = new DrakeProcesos(comandos, this);
                        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                        connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                    }
              }
              else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionRecuperar_Grub_de_arranque_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Recuperar GRUB de arranque y tabla de particiones");
    Refrescar();
    if (kwrite == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"kwrite\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        int respuesta1 = 0;
        int respuesta2 = 0;
        bool ok;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Recuperar del MBR del Grub")),
                               QString::fromUtf8(tr("<center><b>Recuperar del MBR del Grub</b></center><p>"

                               "Con esta opcion recuperamos el master boot record (MBR) es el primer sector (\"sector cero\") de un dispositivo "
                               "de almacenamiento de datos, como un disco duro.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Realizar recuperacion de MBR del Grub?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok)
        {
                QString path=tr("/home/%1/Documentos/");
                path=path.arg(user);
                QString texto = QInputDialog::getText(this, QString::fromUtf8(tr("Disco destino con sector de arranque")),
                QString::fromUtf8(tr("Introduzca el nombre de disco <b>DESTINO</b>.<P> "

                    "<FONT COLOR=\"RED\">Ejemplo:<p>"

                    "<FONT COLOR=\"RED\">sda<p>")),
                    QLineEdit::Normal,
                    "sda",
                    &ok);
                    if (ok && !texto.isEmpty())
                    {
                        respuesta1 = QMessageBox::question(this, QString::fromUtf8(tr("Tabla de particiones")),
                                               QString::fromUtf8(tr("<center><b>Tabla de particiones</b></center><p>"

                                               "Tambien puedes recuperar la tabla de particiones, ademas del "
                                               "MBR del Grub.<p>"

                                               "Si elige esta opcion, se abrira diskdrake, para comprobar fisicamente "
                                               "que las unidades que se tienen en el fichero tabla-particiones.sf, "
                                               "corresponden realmente con las que hay fisicamente, ya que de no ser asi "
                                               "NO deberia utilizar esta recuperacion, ya que los resultados pueden ser "
                                               "fatales.<p>"

                                               "&iquest;Realizar recuperacion de la tabla de particiones?")), QMessageBox::Ok, QMessageBox::No);

                        if (respuesta1 == QMessageBox::Ok)
                        {
                            system("diskdrake");
                            QString fileNameSf = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir copia de pariticiones")),
                                                path,trUtf8(tr("Fichero de particiones .sf (*.sf)")));
                            if (fileNameSf.isEmpty())
                            {
                                ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                                return;
                            }
                            system("kwrite '"+fileNameSf+"'");
                            respuesta2 =QMessageBox::question(this, QString::fromUtf8(tr("Tabla de particiones")),
                                                              QString::fromUtf8(tr("<center><b>Tabla de particiones</b></center><p>"

                                                              "Si las particiones definidas en diskdrake son iguales a las que "
                                                              "hay en el fichero de recuperacion de la tabla de particiones, "
                                                              "denominado tabla-particiones.sf, puede continuar sin ningun "
                                                              "sobresalto.<p>"

                                                              "&iquest;Son correctas las particiones?")), QMessageBox::Ok, QMessageBox::No);

                                       if (respuesta2 == QMessageBox::Ok)
                                       {
                                            QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir copia de seguridad del MBR")),
                                                                path,trUtf8(tr("Fichero seguridad MBR .mbr (*.mbr)")));
                                            if (fileNameOrigen.isEmpty())
                                            {
                                                ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                                                return;
                                            }
                                            QString fileNameOrigen1 = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir copia de pariticiones")),
                                                                path,trUtf8(tr("Fichero de particiones .sf (*.sf)")));
                                            if (fileNameOrigen1.isEmpty())
                                            {
                                                ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                                                return;
                                            }
                                             QString cm = QString::fromUtf8(tr("echo Restaurando MBR del Grub..."));
                                             QString cmd = "dd if=%1 of=/dev/%2 bs=512 count=1";
                                             QString cmd1 = QString::fromUtf8(tr("echo Restaurando tabla de particiones..."));
                                             system("sfdisk /dev/'"+texto+"' < '"+fileNameOrigen1+"'/tabla-particiones.sf");
                                             cmd = cmd.arg(fileNameOrigen).arg(texto);
                                             QStringList comandos;
                                             comandos<< cm << cmd << cmd1;

                                             if (mib != 0)
                                                 delete mib;
                                             mib = new DrakeProcesos(comandos, this);
                                             connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                                             connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                                             connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                                             int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
                                       }
                                       else
                                       {
                                            QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir copia de seguridad del MBR")),
                                                                path,trUtf8(tr("Fichero seguridad MBR .mbr (*.mbr)")));
                                            if (fileNameOrigen.isEmpty())
                                            {
                                                ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                                                return;
                                            }
                                            QString cm = QString::fromUtf8(tr("echo Restaurando MBR del Grub..."));
                                            QString cmd = "dd if=%1 of=/dev/%2 bs=512 count=1";
                                            cmd = cmd.arg(fileNameOrigen).arg(texto);
                                            QStringList comandos;
                                            comandos<< cm << cmd;

                                            if (mib != 0)
                                                delete mib;
                                            mib = new DrakeProcesos(comandos, this);
                                            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                                            connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                                            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                                            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
                                       }                                       
                        }
                        else
                        {
                               QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir copia de seguridad del MBR")),
                                                        path,trUtf8(tr("Fichero seguridad MBR .mbr (*.mbr)")));
                               if (fileNameOrigen.isEmpty())
                               {
                                   ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                                   return;
                               }
                               QString cm = QString::fromUtf8(tr("echo Restaurando MBR del Grub..."));
                               QString cmd = "dd if=%1 of=/dev/%2 bs=512 count=1";
                               cmd = cmd.arg(fileNameOrigen).arg(texto);
                               QStringList comandos;
                               comandos<< cm << cmd;

                               if (mib != 0)
                                   delete mib;
                               mib = new DrakeProcesos(comandos, this);
                               connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                               connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                               connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                               int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
                        }                        
                    }
                    else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
        }
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionInstalar_paquete_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar paquetes");
        Refrescar();
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Instalar paquetes")),
                               QString::fromUtf8(tr("<center><b>Instalar paquetes</b></center><p>"

                               "Accedemos a la instalacion de paquetes de forma "
                               "grafica, donde podemos elegir cualquier paquete "
                               "que este en los repositorios configurados.<p>"

                               "&iquest;Instalar paquetes?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString cm = QString::fromUtf8(tr("echo Accediendo a instalador de forma grafica..."));
                QString cmd = "rpmdrake";

                QStringList comandos;
                comandos<< cm << cmd;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionKDE_2_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar KDE.");
        Refrescar();
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Instalar Kde")),
                               QString::fromUtf8(tr("<center><b>Instalar Kde</b></center><p>"

                               "Uno de los escritorios mas potentes y el que "
                               "utiliza por defecto Mandriva.<p>"

                               "Debido a su calidad y robusted, se necesita de un "
                               "gran equipo para poder sacarle todo el rendimiento "
                               "de lo que es capaz.<p>"

                               "Tiene una gran comunidad muy activa, detras de este"
                               "maravillo escritorio, el cual ha sido copiado en su "
                               "estilo por el inombrable 7.<p>"

                               "Altamente recomendable.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Instalar KDE (Recomendado)?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString cm =QString::fromUtf8(tr("echo Instalando paquete requerido..."));
                QString cmd = "urpmi --fuzzy -a --auto --force task-kde4";
                QString cmd1 = "urpmi --fuzzy -a --auto --force task-kde4-minimal";

                QStringList comandos;
                comandos<< cm << cmd << cmd1;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionGNOME_2_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar GNOME.");
        Refrescar();
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Instalar Gnome")),
                               QString::fromUtf8(tr("<center><b>Instalar Gnome</b></center><p>"

                               "Otros de los escritorios mas potentes y versatiles "
                               "que hay para Linux.<p>"

                               "Tambien es recomendable tenerlo instalado, ya que "
                               "nos puede sacar de algun apuro.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Instalar Gnome (Recomendado)?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString cm =QString::fromUtf8(tr("echo Instalando paquete requerido..."));
                QString cmd = "urpmi --fuzzy -a --auto --force task-gnome";
                QString cmd1 = "urpmi --fuzzy -a --auto --force task-gnome-minimal";

                QStringList comandos;
                comandos<< cm << cmd << cmd1;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionE17_2_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar E17.");
        Refrescar();
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Instalar E17")),
                               QString::fromUtf8(tr("<center><b>Instalar E17</b></center><p>"

                               "Tambien conocido como Enlightenment, es un escritorio "
                               "que utiliza pocos recursos a la vez que muy atractivo "
                               "y versatil<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Instalar E17?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString cm =QString::fromUtf8(tr("echo Instalando paquete requerido..."));
                QString cmd = "urpmi --fuzzy -a --auto --force task-e17";
                QString cmd1 = "urpmi --fuzzy -a --auto --force task-e17-minimal";

                QStringList comandos;
                comandos<< cm << cmd << cmd1;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionXFCE_2_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar XFCE.");
        Refrescar();
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Instalar Xfce")),
                               QString::fromUtf8(tr("<center><b>Instalar Xfce</b></center><p>"

                               "Personalmente este escritorio me gusta esteticamente, "
                               "pero he de reconocer que no es mi principal.<p>"

                               "Tiene un buen estilo, segun mi criterio, me recuerda "
                               "bastante al sistema Mac.<p>"

                               "<B>NOTA Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Instalar Xfce?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString cm =QString::fromUtf8(tr("echo Instalando paquete requerido..."));
                QString cmd = "urpmi --fuzzy -a --auto --force task-xfce";
                QString cmd1 = "urpmi --fuzzy -a --auto --force task-xfce-minimal";
                QString cmd2 = "urpmi --fuzzy -a --auto --force task-xfce-plugins";

                QStringList comandos;
                comandos<< cm << cmd << cmd1 << cmd2;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionEDE_2_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar EDE.");
        Refrescar();
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Instalar Ede")),
                               QString::fromUtf8(tr("<center><b>Instalar Ede</b></center><p>"

                               "Personalmente nunca lo he utilizado, pero como esta, lo "
                               "pongo.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Instalar Ede?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString cm =QString::fromUtf8(tr("echo Instalando paquete requerido..."));
                QString cmd = "urpmi --fuzzy -a --auto --force task-ede";

                QStringList comandos;
                comandos<< cm << cmd;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionLXDE_2_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar LXDE.");
        Refrescar();
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Instalar Lxde")),
                               QString::fromUtf8(tr("<center><b>Instalar Lxde</b></center><p>"

                               "Basado en Kde, pero mucho mas sencillo y ocupa muchos "
                               "menos recursos.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Instalar Lxde?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString cm =QString::fromUtf8(tr("echo Instalando paquete requerido..."));
                QString cmd = "urpmi --fuzzy -a --auto --force task-lxde";

                QStringList comandos;
                comandos<< cm << cmd;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionMOBLIN_2_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar MOBLIN.");
        Refrescar();
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Instalar Moblin")),
                               QString::fromUtf8(tr("<center><b>Instalar Moblin</b></center><p>"

                               "Es un escritorio orientado a notebook, por su sencillez, "
                               "ya que tienes todo lo que quieres a un simple click de "
                               "raton.<p>"

                               "<B>NOTA Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Instalar Moblin?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString cm =QString::fromUtf8(tr("echo Instalando paquete requerido..."));
                QString cmd = "urpmi --fuzzy -a --auto --force task-moblin";

                QStringList comandos;
                comandos<< cm << cmd;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionSUGAR_2_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar SUGAR.");
        Refrescar();
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Instalar Sugar")),
                               QString::fromUtf8(tr("<center><b>Instalar Sugar</b></center><p>"

                               "Un escritorio basado en gtk, pero que tampoco lo he "
                               "utilizado, por lo que no puedo decir como es, pero "
                               "estar...esta.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Instalar Sugar?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString cm =QString::fromUtf8(tr("echo Instalando paquete requerido..."));
                QString cmd = "urpmi --fuzzy -a --auto --force task-sugar";

                QStringList comandos;
                comandos<< cm << cmd;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionTodos_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar TODOS los escritorios.");
        Refrescar();
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Instalar todos")),
                               QString::fromUtf8(tr("<center><b>Instalar todos los Escritorios</b></center><p>"

                               "Mediante esta opcion puedes instalar todos los escritorios "
                               "de forma masiva e incluye Kde, Gnome, E17, Xfce, Ede, Lxde, "
                               "Moblin y Sugar.<p>"

                               "Este proceso puede tardar bastante tiempo, por lo que debe ser "
                               "paciente.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Instalar todos los escritorios?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok)
        {
                QString cm =QString::fromUtf8(tr("echo Instalando todos los paquetes requeridos..."));
                QString cmd = "urpmi --fuzzy -a --auto --force task-kde4";
                QString cmd0 = "urpmi --fuzzy -a --auto --force task-kde4-minimal";
                QString cmd1 = "urpmi --fuzzy -a --auto --force task-gnome";
                QString cmd10 = "urpmi --fuzzy -a --auto --force task-gnome-minimal";
                QString cmd2 = "urpmi --fuzzy -a --auto --force task-e17";
                QString cmd20 = "urpmi --fuzzy -a --auto --force task-e17-minimal";
                QString cmd3 = "urpmi --fuzzy -a --auto --force task-xfce";
                QString cmd30 = "urpmi --fuzzy -a --auto --force task-xfce-minimal";
                QString cmd31 = "urpmi --fuzzy -a --auto --force task-xfce-plugins";
                QString cmd4 = "urpmi --fuzzy -a --auto --force task-ede";
                QString cmd5 = "urpmi --fuzzy -a --auto --force task-lxde";
                QString cmd6 = "urpmi --fuzzy -a --auto --force task-moblin";
                QString cmd7 = "urpmi --fuzzy -a --auto --force task-sugar";
                QStringList comandos;
                comandos<< cm << cmd << cmd0 << cmd1 << cmd10 << cmd2 << cmd20 << cmd3 << cmd30 << cmd31 << cmd4 << cmd5 << cmd6 << cmd7;
                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
        }
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionInstalar_drivers_de_impresoras_cups_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar drivers de impresoras (cups)");
        Refrescar();
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Instalar drivers para impresoras (CUPS)")),
                               QString::fromUtf8(tr("<center><b>Instalar drivers para impresoras</b></center><p>"

                               "Para evitar cualquier conflicto de compatibilidad, instalaremos "
                               "todo lo necesario para poder disponer satisfactoriamente del "
                               "driver de nuestra impresora.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Instalar drivers?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok)
        {
                QString cm =QString::fromUtf8(tr("echo Instalando paquete requerido..."));
                QString cmd = "urpmi --fuzzy -a --wget --auto task-printing";
                QString cmd1 = "urpmi --fuzzy -a --auto --wget task-printing-misc";
                QString cmd2 = "urpmi --fuzzy -a --auto --wget task-printing-server";
                QString cmd3 = "urpmi --fuzzy -a --auto --wget system-config-printer";
                QStringList comandos;
                comandos<< cm << cmd << cmd1 << cmd2 << cmd3;
                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
        }
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionCodecs_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Codecs de audio/video.");
        Refrescar();
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Instalar codecs audio/")),
                               QString::fromUtf8(tr("<center><b>Instalar codecs audio/video</b></center><p>"

                               "Paquete de codecs para el sistema multimedia, incluidos "
                               "los de win32, por lo que se podra ver y oir videos, musica, "
                               "etc.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Instalar codecs?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok)
        {
                QString cm =QString::fromUtf8(tr("echo Instalando paquetes requeridos..."));
                QString cmd = "urpmi --fuzzy --wget -a --auto --force real-codecs";
                QString cmd1 = "urpmi --fuzzy --wget -a --auto --force win32-codecs";
                QString cmd2 = "urpmi --fuzzy --wget -a --auto --force xanim-codecs";
                QString cmd3 = "urpmi --fuzzy --wget -a --auto --force libquicktime";
                QString cmd4 = "urpmi --fuzzy --wget -a --auto --force libquicktime-x264";
                QString cmd5 = "urpmi --fuzzy --wget -a --auto --force libquicktime-lame";
                QString cmd6 = "urpmi --fuzzy --wget -a --auto --force libquicktime-faad";
                QString cmd7 = "urpmi --fuzzy --wget -a --auto --force libquicktime-faac";
                QString cmd8 = "urpmi --fuzzy --wget -a --auto --force faad2";
                QString cmd9 = "urpmi --fuzzy --wget -a --auto --force xine-faad";
                QString cmd10 = "urpmi --fuzzy --wget -a --auto --force faac";
                QString cmd11 = "urpmi --fuzzy --wget -a --auto --force libamrnb3";
                QString cmd12 = "urpmi --fuzzy --wget -a --auto --force libamrwb3";
                QString cmd13 = "urpmi --fuzzy --wget -a --auto --force amrnb";
                QString cmd14= "urpmi --fuzzy --wget -a --auto --force amrwb";
                QString cmd15 = "urpmi --fuzzy --wget -a --force --auto lame";
                QString cmd16 = "urpmi --fuzzy --wget -a --auto --force gstreamer0.10-a52dec";
                QString cmd17 = "urpmi --fuzzy --wget -a --auto --force gstreamer0.10-amrnb";
                QString cmd18 = "urpmi --fuzzy --wget -a --auto --force gstreamer0.10-amrwb";
                QString cmd19 = "urpmi --fuzzy --wget -a --auto --force gstreamer0.10-faad";
                QString cmd20 = "urpmi --fuzzy --wget -a --auto --force gstreamer0.10-faac";
                QString cmd21 = "urpmi --fuzzy --wget -a --auto --force gstreamer0.10-ffmpeg";
                QString cmd22 = "urpmi --fuzzy --wget -a --auto --force mencoder";
                QString cmd23 = "urpmi --fuzzy --wget -a --auto --force gstreamer0.10-lame";
                QString cmd24 = "urpmi --fuzzy --wget -a --force --auto gstreamer0.10-flac";
                QString cmd25 = "urpmi --fuzzy --wget -a --auto --force gstreamer0.10-cdio";
                QString cmd26 = "urpmi --fuzzy --wget -a --auto --force gstreamer0.10-cdparanoia";
                QString cmd27 = "urpmi --fuzzy --wget -a --auto --force ffmpeg";
                QString cmd28 = "urpmi --fuzzy --wget -a --auto --force transcode";
                QString cmd29 = "urpmi --fuzzy --wget -a --auto --force gstreamer0.10-mms";
                QStringList comandos;
                comandos << cm << cmd << cmd1 << cmd2 << cmd3 << cmd4 << cmd5 << cmd6 << cmd7 << cmd8 << cmd9;
                comandos << cmd10 << cmd11 << cmd12 << cmd13 << cmd14 << cmd15 << cmd16 << cmd17 << cmd18 << cmd19;
                comandos << cmd20 << cmd21 << cmd22 << cmd23 << cmd24 << cmd25 << cmd26 << cmd27 << cmd28 << cmd29;
                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
        }
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionInstalar_sopctas_qsopcast_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar sopcast y qsopcast.");
    Refrescar();
    if (tar == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"tar\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        int respuesta1 = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Instalar y configurar sopcast y qsopcast")),
                               QString::fromUtf8(tr("<center><b>Instalar y configurar sopcast y qsopcast</b></center><p>"

                               "Esta utilidad sirve para ver todo tipo de eventos, aunque se suele "
                               "utilizar para ver eventos deportivos, los cuales pueden ser de pago "
                               "en algunos paises y en otros son emitidos libremente y por canales "
                               "abiertos via internet y que por lo general son de origen Chino o "
                               "japones.<p>"

                               "<FONT COLOR=\"RED\">IMPORTANTE: En algunos paises, utilizar este tipo de software puede ser ilegal, "
                               "<FONT COLOR=\"RED\">consulte la legislacion vigente de su pais para saber si puede utilizar "
                               "<FONT COLOR=\"RED\">dicho software.<p>"

                               "Se instala sopcast y su \"gui\" qsopcast para modo grafico.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Instalar y configurar qsopcast?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok)
        {
                        respuesta1 = QMessageBox::question(this, QString::fromUtf8(tr("Licencia de uso")),
                                               QString::fromUtf8(tr("<center><b>Licencia (Idioma original)</b></center><p>"
                                               "<FONT COLOR=\"BLUE\">Terms of Service<p>"
                                               "<FONT COLOR=\"BLUE\">Nowadays, all the services on SopCast (sopcast.com) are totally free and only for test purpose. "
                                               "<FONT COLOR=\"BLUE\">Our client (P2P TV Player) and channel list can be copied and distributed freely for anyone. "
                                               "<FONT COLOR=\"BLUE\">Any portion of these may not be sold, resold, or otherwise exploited for any commercial purpose "
                                               "<FONT COLOR=\"BLUE\">that is not expressly permitted by SopCast. Some websites have been found selling the services "
                                               "<FONT COLOR=\"BLUE\">based on SopCast. Please immediately cease all such infringements.<p>")), QMessageBox::Ok, QMessageBox::No);
                        if (respuesta1 == QMessageBox::Ok)
                        {
                                    QString cmd = QString::fromUtf8(tr("echo descomprimiendo ficheros..."));
                                    QString cmd1 = "tar xvzf /root/qsopcast.tar.gz --directory=/home/%1";
                                    cmd1 = cmd1.arg(user);
                                    QString cmd2 = "tar xvzf /root/sp-sc-auth.tar.gz --directory=/home/%1";
                                    cmd2 = cmd2.arg(user);
                                    QString cmd21 = "tar xvzf /root/libstdc++.tar.gz --directory=/home/%1";
                                    cmd21 = cmd21.arg(user);
                                    QString cmd3 = QString::fromUtf8(tr("echo creando directorio y volcando datos..."));
                                    QString cmd34 = "mkdir /home/%1/.sopcast/";
                                    cmd34 = cmd34.arg(user);
                                    QString cmd4 = "cp -v /home/%1/sp-sc-auth /home/%1/.sopcast/";
                                    cmd4 = cmd4.arg(user);
                                    QString cmd5 = QString::fromUtf8(tr("echo Instalando paquete local..."));
                                    QString cmd6 = "urpmi /home/%1/qsopcast-0.3.1.rpm";
                                    cmd6=cmd6.arg(user);
                                    QString cmd7 = "ln -s /home/%1/.sopcast/sp-sc-auth /usr/local/bin/sopcast";
                                    cmd7 = cmd7.arg(user);
                                    QString cmd51 = QString::fromUtf8(tr("echo Creando enlace simbolico..."));
                                    QString cmd61 = "cp -v /home/%1/libstdc++.so.5.0.7 /usr/lib/libstdc++.so.5.0.7";
                                    cmd61 = cmd61.arg(user);
                                    QString cmd71 = "ln -sf /usr/lib/libstdc++.so.5.0.7 /usr/lib/libstdc++.so.5";
                                    QString cmd8 = QString::fromUtf8(tr("echo Borrando temporales..."));
                                    QString cmd9 = "rm -vf /home/%1/sp-sc-auth";
                                    cmd9 = cmd9.arg(user);
                                    QString cmd10 = "rm -vf /home/%1/qsopcast-0.3.1.rpm";
                                    cmd10 = cmd10.arg(user);
                                    QString cmd11 = "rm -vf /home/%1/libstdc++.so.5.0.7";
                                    cmd10 = cmd11.arg(user);
                                    QStringList comandos;
                                    comandos<< cmd << cmd1 << cmd2 << cmd21 << cmd3 << cmd34 << cmd4 << cmd5 << cmd6 << cmd7 << cmd51 << cmd61 << cmd71 <<cmd8 << cmd9 << cmd10 << cmd11;
                                    if (mib != 0)
                                    delete mib;
                                    mib = new DrakeProcesos(comandos, this);
                                    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                                    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                                    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                                    int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
                        }
                        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
        }
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionInstalar_drivers_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar drivers con Ndiswrapper.");
    Refrescar();
    if (ndiswrapper == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ndiswrapper\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Instalar drivers con ndiswrapper")),
                               QString::fromUtf8(tr("<center><b>Instalar drivers con ndiswrapper</b></center><p>"

                               "Puede que nuestra red necesite de los drivers nativos de guindows,"
                               "por cualquier motivo, ya se que no es reconocido el driver/modulo "
                               "de Linux o por errores en el mismo.<p>"

                               "La solucion pasa por instalar el fichero .ini y .sys de nuestro "
                               "sistema operativo del lado oscuro.<p>"

                               "<FONT COLOR=\"BLUE\">Lo mas correcto es guardar el fichero .inf y .sys en el escritorio de "
                               "<FONT COLOR=\"BLUE\">Linux y asi no habra problemas de incompatibilidad.<p>"

                               "<FONT COLOR=\"RED\">AVISO: Va a utilizar un driver privativo en su sistema.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Instalar drivers?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok)
        {
            QString path="/media/";
            QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir fichero .inf")),
                                path,trUtf8(tr("Fichero informacion (*.inf);Fichero sistema (*.sys)")));
            if (fileNameOrigen.isEmpty())
            {
                ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                return;
            }
                QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString cmd = QString::fromUtf8(tr("echo Instalando modulo en el sistema..."));
                QString cmd2= "ndiswrapper -i %1";
                cmd2= cmd2.arg(fileName);
                QString cmd1= QString::fromUtf8(tr("echo Probando modulo wifi..."));
                QString cmd3= "ndiswrapper -l";
                QStringList comandos;
                comandos<< cmd <<cmd2 <<cmd1 <<cmd3;
                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
        }
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionVer_modulo_instalado_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Comprobar modulo instalado.");
    Refrescar();
    if (ndiswrapper == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ndiswrapper\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Comprobar modulo instalado")),
                               QString::fromUtf8(tr("<center><b>Comprobar modulo instalador</b></center><p>"

                               "Esta opcion solo sirve para saber el modulo instalado actual de "
                               "ndiswrapper en el caso de que exista.<p>"

                               "&iquest;Comprobar modulo?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok)
        {
                QString cmd = QString::fromUtf8(tr("echo Comprobando modulos instalados..."));
                QString cmd1= "ndiswrapper -l";
                QStringList comandos;
                comandos<< cmd <<cmd1;
                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
        }
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionBorrar_drivers_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Desinstalar modulo instalado con ndiswrapper.");
    Refrescar();
    if (ndiswrapper == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ndiswrapper\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        bool ok;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Desinstalar drivers con ndiswrapper")),
                               QString::fromUtf8(tr("<center><b>Desinstalar drivers con ndiswrapper</b></center><p>"

                               "Por alguna razon tendremos la necesidad de eliminar un modulo "
                               "cargado anteriormente con ndiswrapper.<p>"

                               "Ejecutando esta opcion se desinstalara dicho modulo.<p>"

                               "Antes de realizar el proceso, en la consola le informara de los drivers "
                               "ndiswrapper que hay instalado en su sistema, por lo que solo tendra "
                               "que poner el nombre (Alias), para poder desinstalarlo.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Desinstalar drivers?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok)
        {
                QString cmd = QString::fromUtf8(tr("echo Comprobando modulos instalados..."));
                QString cmd1= "ndiswrapper -l";
                QStringList comandos;
                comandos<< cmd <<cmd1;
                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
        }
                    QString texto = QInputDialog::getText(this, QString::fromUtf8(tr("Nombre de modulo ndiswrapper")),
                    QString::fromUtf8(tr("Introduzca el nombre del modulo que aparece en la consola.<P> "

                        "<FONT COLOR=\"RED\">Ejemplo:<p>"

                        "<FONT COLOR=\"RED\">rt61")),
                        QLineEdit::Normal,
                        "",
                        &ok);
                        if (ok && !texto.isEmpty())
                        {
                            QString cmd2 = QString::fromUtf8(tr("echo Desinstalando modulo instalado..."));
                            QString cmd3= "ndiswrapper -r %1";
                            cmd3=cmd3.arg(texto);
                            QStringList comandos;
                            comandos<< cmd2 <<cmd3;
                            if (mib != 0)
                            delete mib;
                            mib = new DrakeProcesos(comandos, this);
                            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                            connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
                        }
                        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionMadwifi_2_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar drivers Madwifi.");
    Refrescar();
    if (tar == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"tar\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        int respuesta1 = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Instalar drivers Madwifi")),
                               QString::fromUtf8(tr("<center><b>Instalar drivers Madwifi</b></center><p>"

                               "Drivers Madwifi para redes inalambricas de los modelos "
                               "Atheros©.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Instalar drivers?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){
                    respuesta1 = QMessageBox::question(this, QString::fromUtf8(tr("Licencia de uso")),
                                           QString::fromUtf8(tr("<center><b>Licencia GPL</b></center><p>"

                                           "<FONT COLOR=\"BLUE\">La Licencia Publica General de GNU o "
                                           "<FONT COLOR=\"BLUE\">mas conocida por su nombre en ingles GNU General Public "
                                           "<FONT COLOR=\"BLUE\">License o simplemente sus siglas del ingles GNU GPL, es una "
                                           "<FONT COLOR=\"BLUE\">licencia creada por la Free Software Foundation en 1989 "
                                           "<FONT COLOR=\"BLUE\">(la primera version), y esta orientada principalmente a "
                                           "<FONT COLOR=\"BLUE\">proteger la libre distribucion, modificacion y uso de software.<p>"
                                           "<FONT COLOR=\"BLUE\">Su proposito es declarar que el software cubierto por esta "
                                           "<FONT COLOR=\"BLUE\">licencia es software libre y protegerlo de intentos de "
                                           "<FONT COLOR=\"BLUE\">apropiacion que restrinjan esas libertades a los usuarios.<p>")), QMessageBox::Ok, QMessageBox::No);

                    if (respuesta1 == QMessageBox::Ok)
                    {
                                QString cmd = QString::fromUtf8(tr("echo descomprimiendo ficheros..."));
                                QString cmd1 = "tar xvzf /root/wifi-firmware.tar.gz --directory=/home/%1 madwifi.rpm";
                                cmd1 = cmd1.arg(user);
                                QString cmd2 = QString::fromUtf8(tr("echo Instalando paquete local..."));
                                QString cmd3 = "urpmi /home/%1/madwifi.rpm";
                                cmd3=cmd3.arg(user);
                                QString cmd4 = QString::fromUtf8(tr("echo Borrando temporales..."));
                                QString cmd5 = "rm -vf /home/%1/madwifi.rpm";
                                cmd5 = cmd5.arg(user);
                                QStringList comandos;
                                comandos<< cmd << cmd1 << cmd2 << cmd3 << cmd4 << cmd5;
                                if (mib != 0)
                                delete mib;
                                mib = new DrakeProcesos(comandos, this);
                                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                                connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
                    }
                    else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
         }
         else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionRT2860_2_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar drivers RT2860.");
    Refrescar();
    if (tar == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"tar\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        int respuesta1 = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Instalar drivers RT2860")),
                               QString::fromUtf8(tr("<center><b>Instalar drivers RT2860</b></center><p>"

                               "Drivers RT2860 para redes inalambricas de los modelos "
                               "Railink©.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Instalar drivers?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok)
        {
                    respuesta1 = QMessageBox::question(this, QString::fromUtf8(tr("Licencia de uso")),
                                           QString::fromUtf8(tr("<center><b>Licencia (Version original)</b></center><p>"

                                           "<FONT COLOR=\"BLUE\">Copyright (c) 2007, Ralink Technology Corporation<p>"
                                           "<FONT COLOR=\"BLUE\">All rights reserved.<p>"

                                           "<FONT COLOR=\"BLUE\">Redistribution.  Redistribution and use in binary form, without modification, are permitted provided that the following conditions are "
                                           "<FONT COLOR=\"BLUE\">met:<p>"

                                           "<FONT COLOR=\"BLUE\">* Redistributions must reproduce the above copyright notice and the following disclaimer in the documentation and/or other materials "
                                           "<FONT COLOR=\"BLUE\">provided with the distribution.<p>"
                                           "<FONT COLOR=\"BLUE\">* Neither the name of Ralink Technology Corporation nor the names of its suppliers may be used to endorse or promote products derived from this "
                                           "<FONT COLOR=\"BLUE\">software without specific prior written permission.<p>"
                                           "<FONT COLOR=\"BLUE\">* No reverse engineering, decompilation, or disassembly of this software is permitted.<p>"

                                           "<FONT COLOR=\"BLUE\">Limited patent license. Ralink Technology Corporation grants a world-wide, royalty-free, non-exclusive license under patents it now or hereafter "
                                           "<FONT COLOR=\"BLUE\">owns or controls to make, have made, use, import, offer to sell and sell (\"Utilize\") this software, but solely to the extent that any "
                                           "<FONT COLOR=\"BLUE\">such patent is necessary to Utilize the software alone, or in combination with an operating system licensed under an approved Open "
                                           "<FONT COLOR=\"BLUE\">Source license as listed by the Open Source Initiative at http://opensource.org/licenses.  The patent license shall not apply to "
                                           "<FONT COLOR=\"BLUE\">any other combinations which include this software.  No hardware per se is licensed hereunder.<p>"

                                           "<FONT COLOR=\"BLUE\">DISCLAIMER.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, "
                                           "<FONT COLOR=\"BLUE\">BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE "
                                           "<FONT COLOR=\"BLUE\">COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, "
                                           "<FONT COLOR=\"BLUE\">BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND "
                                           "<FONT COLOR=\"BLUE\">ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE "
                                           "<FONT COLOR=\"BLUE\">USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.<p>")), QMessageBox::Ok, QMessageBox::No);

                    if (respuesta1 == QMessageBox::Ok)
                    {
                                QString cmd = QString::fromUtf8(tr("echo descomprimiendo ficheros..."));
                                QString cmd1 = "tar xvzf /root/wifi-firmware.tar.gz --directory=/home/%1 rt2860-firmware.rpm";
                                cmd1 = cmd1.arg(user);
                                QString cmd2 = QString::fromUtf8(tr("echo Instalando paquete local..."));
                                QString cmd3 = "urpmi /home/%1/rt2860-firmware.rpm";
                                cmd3=cmd3.arg(user);
                                QString cmd4 = QString::fromUtf8(tr("echo Borrando temporales..."));
                                QString cmd5 = "rm -vf /home/%1/rt2860-firmware.rpm";
                                cmd5 = cmd5.arg(user);
                                QStringList comandos;
                                comandos<< cmd << cmd1 << cmd2 << cmd3 << cmd4 << cmd5;
                                if (mib != 0)
                                delete mib;
                                mib = new DrakeProcesos(comandos, this);
                                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                                connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
                    }
                    else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
           }
           else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
     }
}

void recoverdrake::on_actionRT2870_2_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar drivers RT2870.");
    Refrescar();
    if (tar == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"tar\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        int respuesta1 = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Instalar drivers RT2870")),
                               QString::fromUtf8(tr("<center><b>Instalar drivers RT2870</b></center><p>"

                               "Drivers RT2870 para redes inalambricas de los modelos "
                               "Railink©.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Instalar drivers?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                    respuesta1 = QMessageBox::question(this, QString::fromUtf8(tr("Licencia de uso")),
                                           QString::fromUtf8(tr("<center><b>Licencia (Version original)</b></center><p>"

                                           "<FONT COLOR=\"BLUE\">Copyright (c) 2007, Ralink Technology Corporation<p>"
                                           "<FONT COLOR=\"BLUE\">All rights reserved.<p>"

                                           "<FONT COLOR=\"BLUE\">Redistribution.  Redistribution and use in binary form, without modification, are permitted provided that the following conditions are "
                                           "<FONT COLOR=\"BLUE\">met:<p>"

                                           "<FONT COLOR=\"BLUE\">* Redistributions must reproduce the above copyright notice and the following disclaimer in the documentation and/or other materials "
                                           "<FONT COLOR=\"BLUE\">provided with the distribution.<p>"
                                           "<FONT COLOR=\"BLUE\">* Neither the name of Ralink Technology Corporation nor the names of its suppliers may be used to endorse or promote products derived from this "
                                           "<FONT COLOR=\"BLUE\">software without specific prior written permission.<p>"
                                           "<FONT COLOR=\"BLUE\">* No reverse engineering, decompilation, or disassembly of this software is permitted.<p>"

                                           "<FONT COLOR=\"BLUE\">Limited patent license. Ralink Technology Corporation grants a world-wide, royalty-free, non-exclusive license under patents it now or hereafter "
                                           "<FONT COLOR=\"BLUE\">owns or controls to make, have made, use, import, offer to sell and sell (\"Utilize\") this software, but solely to the extent that any "
                                           "<FONT COLOR=\"BLUE\">such patent is necessary to Utilize the software alone, or in combination with an operating system licensed under an approved Open "
                                           "<FONT COLOR=\"BLUE\">Source license as listed by the Open Source Initiative at http://opensource.org/licenses.  The patent license shall not apply to "
                                           "<FONT COLOR=\"BLUE\">any other combinations which include this software.  No hardware per se is licensed hereunder.<p>"

                                           "<FONT COLOR=\"BLUE\">DISCLAIMER.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, "
                                           "<FONT COLOR=\"BLUE\">BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE "
                                           "<FONT COLOR=\"BLUE\">COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, "
                                           "<FONT COLOR=\"BLUE\">BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND "
                                           "<FONT COLOR=\"BLUE\">ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE "
                                           "<FONT COLOR=\"BLUE\">USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.<p>")), QMessageBox::Ok, QMessageBox::No);

                    if (respuesta1 == QMessageBox::Ok){

                                QString cmd = QString::fromUtf8(tr("echo descomprimiendo ficheros..."));
                                QString cmd1 = "tar xvzf /root/wifi-firmware.tar.gz --directory=/home/%1 rt2870-firmware.rpm";
                                cmd1 = cmd1.arg(user);
                                QString cmd2 = QString::fromUtf8(tr("echo Instalando paquete local..."));
                                QString cmd3 = "urpmi /home/%1/rt2870-firmware.rpm";
                                cmd3=cmd3.arg(user);
                                QString cmd4 = QString::fromUtf8(tr("echo Borrando temporales..."));
                                QString cmd5 = "rm -vf /home/%1/rt2870-firmware.rpm";
                                cmd5 = cmd5.arg(user);
                                QStringList comandos;
                                comandos<< cmd << cmd1 << cmd2 << cmd3 << cmd4 << cmd5;
                                if (mib != 0)
                                delete mib;
                                mib = new DrakeProcesos(comandos, this);
                                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                                connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
                    }
                    else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
                }
}

void recoverdrake::on_actionRT3090_2_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar drivers RT3090.");
    Refrescar();
    if (tar == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"tar\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        int respuesta1 = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Instalar drivers RT3090")),
                               QString::fromUtf8(tr("<center><b>Instalar drivers RT3090</b></center><p>"

                               "Drivers RT3090 para redes inalambricas de los modelos "
                               "Railink©.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Instalar drivers?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                    respuesta1 = QMessageBox::question(this, QString::fromUtf8(tr("Licencia de uso")),
                                           QString::fromUtf8(tr("<center><b>Licencia (Version original)</b></center><p>"

                                           "<FONT COLOR=\"BLUE\">Copyright (c) 2007, Ralink Technology Corporation<p>"
                                           "<FONT COLOR=\"BLUE\">All rights reserved.<p>"

                                           "<FONT COLOR=\"BLUE\">Redistribution.  Redistribution and use in binary form, without modification, are permitted provided that the following conditions are "
                                           "<FONT COLOR=\"BLUE\">met:<p>"

                                           "<FONT COLOR=\"BLUE\">* Redistributions must reproduce the above copyright notice and the following disclaimer in the documentation and/or other materials "
                                           "<FONT COLOR=\"BLUE\">provided with the distribution.<p>"
                                           "<FONT COLOR=\"BLUE\">* Neither the name of Ralink Technology Corporation nor the names of its suppliers may be used to endorse or promote products derived from this "
                                           "<FONT COLOR=\"BLUE\">software without specific prior written permission.<p>"
                                           "<FONT COLOR=\"BLUE\">* No reverse engineering, decompilation, or disassembly of this software is permitted.<p>"

                                           "<FONT COLOR=\"BLUE\">Limited patent license. Ralink Technology Corporation grants a world-wide, royalty-free, non-exclusive license under patents it now or hereafter "
                                           "<FONT COLOR=\"BLUE\">owns or controls to make, have made, use, import, offer to sell and sell (\"Utilize\") this software, but solely to the extent that any "
                                           "<FONT COLOR=\"BLUE\">such patent is necessary to Utilize the software alone, or in combination with an operating system licensed under an approved Open "
                                           "<FONT COLOR=\"BLUE\">Source license as listed by the Open Source Initiative at http://opensource.org/licenses.  The patent license shall not apply to "
                                           "<FONT COLOR=\"BLUE\">any other combinations which include this software.  No hardware per se is licensed hereunder.<p>"

                                           "<FONT COLOR=\"BLUE\">DISCLAIMER.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, "
                                           "<FONT COLOR=\"BLUE\">BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE "
                                           "<FONT COLOR=\"BLUE\">COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, "
                                           "<FONT COLOR=\"BLUE\">BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND "
                                           "<FONT COLOR=\"BLUE\">ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE "
                                           "<FONT COLOR=\"BLUE\">USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.<p>")), QMessageBox::Ok, QMessageBox::No);

                    if (respuesta1 == QMessageBox::Ok){

                                QString cmd = QString::fromUtf8(tr("echo descomprimiendo ficheros..."));
                                QString cmd1 = "tar xvzf /root/wifi-firmware.tar.gz --directory=/home/%1 rt3090-firmware.rpm";
                                cmd1 = cmd1.arg(user);
                                QString cmd2 = QString::fromUtf8(tr("echo Instalando paquete local..."));
                                QString cmd3 = "urpmi /home/%1/rt3090-firmware.rpm";
                                cmd3=cmd3.arg(user);
                                QString cmd4 = QString::fromUtf8(tr("echo Borrando temporales..."));
                                QString cmd5 = "rm -vf /home/%1/rt3090-firmware.rpm";
                                cmd5 = cmd5.arg(user);
                                QStringList comandos;
                                comandos<< cmd << cmd1 << cmd2 << cmd3 << cmd4 << cmd5;
                                if (mib != 0)
                                delete mib;
                                mib = new DrakeProcesos(comandos, this);
                                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                                connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
                    }
                    else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
                }
}

void recoverdrake::on_action61_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar drivers RT61.");
    Refrescar();
    if (tar == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"tar\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        int respuesta1 = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Instalar drivers RT61")),
                               QString::fromUtf8(tr("<center><b>Instalar drivers RT61</b></center><p>"

                               "Drivers RT61 para redes inalambricas de los modelos "
                               "Railink©.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Instalar drivers?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                    respuesta1 = QMessageBox::question(this, QString::fromUtf8(tr("Licencia de uso")),
                                           QString::fromUtf8(tr("<center><b>Licencia (Version original)</b></center><p>"

                                           "<FONT COLOR=\"BLUE\">Copyright (c) 2007, Ralink Technology Corporation<p>"
                                           "<FONT COLOR=\"BLUE\">All rights reserved.<p>"

                                           "<FONT COLOR=\"BLUE\">Redistribution.  Redistribution and use in binary form, without modification, are permitted provided that the following conditions are "
                                           "<FONT COLOR=\"BLUE\">met:<p>"

                                           "<FONT COLOR=\"BLUE\">* Redistributions must reproduce the above copyright notice and the following disclaimer in the documentation and/or other materials "
                                           "<FONT COLOR=\"BLUE\">provided with the distribution.<p>"
                                           "<FONT COLOR=\"BLUE\">* Neither the name of Ralink Technology Corporation nor the names of its suppliers may be used to endorse or promote products derived from this "
                                           "<FONT COLOR=\"BLUE\">software without specific prior written permission.<p>"
                                           "<FONT COLOR=\"BLUE\">* No reverse engineering, decompilation, or disassembly of this software is permitted.<p>"

                                           "<FONT COLOR=\"BLUE\">Limited patent license. Ralink Technology Corporation grants a world-wide, royalty-free, non-exclusive license under patents it now or hereafter "
                                           "<FONT COLOR=\"BLUE\">owns or controls to make, have made, use, import, offer to sell and sell (\"Utilize\") this software, but solely to the extent that any "
                                           "<FONT COLOR=\"BLUE\">such patent is necessary to Utilize the software alone, or in combination with an operating system licensed under an approved Open "
                                           "<FONT COLOR=\"BLUE\">Source license as listed by the Open Source Initiative at http://opensource.org/licenses.  The patent license shall not apply to "
                                           "<FONT COLOR=\"BLUE\">any other combinations which include this software.  No hardware per se is licensed hereunder.<p>"

                                           "<FONT COLOR=\"BLUE\">DISCLAIMER.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, "
                                           "<FONT COLOR=\"BLUE\">BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE "
                                           "<FONT COLOR=\"BLUE\">COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, "
                                           "<FONT COLOR=\"BLUE\">BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND "
                                           "<FONT COLOR=\"BLUE\">ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE "
                                           "<FONT COLOR=\"BLUE\">USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.<p>")), QMessageBox::Ok, QMessageBox::No);

                    if (respuesta1 == QMessageBox::Ok){

                                QString cmd = QString::fromUtf8(tr("echo descomprimiendo ficheros..."));
                                QString cmd1 = "tar xvzf /root/wifi-firmware.tar.gz --directory=/home/%1 rt61-firmware.rpm";
                                cmd1 = cmd1.arg(user);
                                QString cmd2 = QString::fromUtf8(tr("echo Instalando paquete local..."));
                                QString cmd3 = "urpmi /home/%1/rt61-firmware.rpm";
                                cmd3=cmd3.arg(user);
                                QString cmd4 = QString::fromUtf8(tr("echo Borrando temporales..."));
                                QString cmd5 = "rm -vf /home/%1/rt61-firmware.rpm";
                                cmd5 = cmd5.arg(user);
                                QStringList comandos;
                                comandos<< cmd << cmd1 << cmd2 << cmd3 << cmd4 << cmd5;
                                if (mib != 0)
                                delete mib;
                                mib = new DrakeProcesos(comandos, this);
                                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                                connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
                    }
                    else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
                }
}

void recoverdrake::on_actionRT73_2_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar drivers RT73.");
    Refrescar();
    if (tar == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"tar\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        int respuesta1 = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Instalar drivers RT73")),
                               QString::fromUtf8(tr("<center><b>Instalar drivers RT73</b></center><p>"

                               "Drivers RT73 para redes inalambricas de los modelos "
                               "Railink©.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Instalar drivers?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                    respuesta1 = QMessageBox::question(this, QString::fromUtf8(tr("Licencia de uso")),
                                           QString::fromUtf8(tr("<center><b>Licencia (Version original)</b></center><p>"

                                           "<FONT COLOR=\"BLUE\">Copyright (c) 2007, Ralink Technology Corporation<p>"
                                           "<FONT COLOR=\"BLUE\">All rights reserved.<p>"

                                           "<FONT COLOR=\"BLUE\">Redistribution.  Redistribution and use in binary form, without modification, are permitted provided that the following conditions are "
                                           "<FONT COLOR=\"BLUE\">met:<p>"

                                           "<FONT COLOR=\"BLUE\">* Redistributions must reproduce the above copyright notice and the following disclaimer in the documentation and/or other materials "
                                           "<FONT COLOR=\"BLUE\">provided with the distribution.<p>"
                                           "<FONT COLOR=\"BLUE\">* Neither the name of Ralink Technology Corporation nor the names of its suppliers may be used to endorse or promote products derived from this "
                                           "<FONT COLOR=\"BLUE\">software without specific prior written permission.<p>"
                                           "<FONT COLOR=\"BLUE\">* No reverse engineering, decompilation, or disassembly of this software is permitted.<p>"

                                           "<FONT COLOR=\"BLUE\">Limited patent license. Ralink Technology Corporation grants a world-wide, royalty-free, non-exclusive license under patents it now or hereafter "
                                           "<FONT COLOR=\"BLUE\">owns or controls to make, have made, use, import, offer to sell and sell (\"Utilize\") this software, but solely to the extent that any "
                                           "<FONT COLOR=\"BLUE\">such patent is necessary to Utilize the software alone, or in combination with an operating system licensed under an approved Open "
                                           "<FONT COLOR=\"BLUE\">Source license as listed by the Open Source Initiative at http://opensource.org/licenses.  The patent license shall not apply to "
                                           "<FONT COLOR=\"BLUE\">any other combinations which include this software.  No hardware per se is licensed hereunder.<p>"

                                           "<FONT COLOR=\"BLUE\">DISCLAIMER.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, "
                                           "<FONT COLOR=\"BLUE\">BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE "
                                           "<FONT COLOR=\"BLUE\">COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, "
                                           "<FONT COLOR=\"BLUE\">BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND "
                                           "<FONT COLOR=\"BLUE\">ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE "
                                           "<FONT COLOR=\"BLUE\">USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.<p>")), QMessageBox::Ok, QMessageBox::No);

                    if (respuesta1 == QMessageBox::Ok){

                                QString cmd = QString::fromUtf8(tr("echo descomprimiendo ficheros..."));
                                QString cmd1 = "tar xvzf /root/wifi-firmware.tar.gz --directory=/home/%1 rt73-firmware.rpm";
                                cmd1 = cmd1.arg(user);
                                QString cmd2 = QString::fromUtf8(tr("echo Instalando paquete local..."));
                                QString cmd3 = "urpmi /home/%1/rt73-firmware.rpm";
                                cmd3=cmd3.arg(user);
                                QString cmd4 = QString::fromUtf8(tr("echo Borrando temporales..."));
                                QString cmd5 = "rm -vf /home/%1/rt73-firmware.rpm";
                                cmd5 = cmd5.arg(user);
                                QStringList comandos;
                                comandos<< cmd << cmd1 << cmd2 << cmd3 << cmd4 << cmd5;
                                if (mib != 0)
                                delete mib;
                                mib = new DrakeProcesos(comandos, this);
                                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                                connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
                    }
                    else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
                }
}

void recoverdrake::on_actionAtmel_2_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar drivers Atmel.");
    Refrescar();
    if (tar == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"tar\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        int respuesta1 = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Instalar drivers Atmel")),
                               QString::fromUtf8(tr("<center><b>Instalar drivers Atmel</b></center><p>"

                               "Drivers Atmel para redes inalambricas de los modelos "
                               "Atmel©.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Instalar drivers?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                    respuesta1 = QMessageBox::question(this, QString::fromUtf8(tr("Licencia de uso")),
                                           QString::fromUtf8(tr("<center><b>Licencia (Version original)</b></center><p>"

                                           "<FONT COLOR=\"BLUE\">Copyright (c) 2004 Atmel Corporation. All Rights Reserved.<p>"
                                           "<FONT COLOR=\"BLUE\">Redistribution and use of the microcode software ( Firmware ) is "
                                           "<FONT COLOR=\"BLUE\">permitted provided that the following conditions are met:<p>"

                                           "<FONT COLOR=\"BLUE\">1. Firmware is redistributed in object code only;<p>"
                                           "<FONT COLOR=\"BLUE\">2. Any reproduction of Firmware must contain the above "
                                           "<FONT COLOR=\"BLUE\">copyright notice, this list of conditions and the below "
                                           "<FONT COLOR=\"BLUE\">disclaimer in the documentation and/or other materials "
                                           "<FONT COLOR=\"BLUE\">provided with the distribution; and<p>"
                                           "<FONT COLOR=\"BLUE\">3. The name of Atmel Corporation may not be used to endorse "
                                           "<FONT COLOR=\"BLUE\">or promote products derived from this Firmware without specific "
                                           "<FONT COLOR=\"BLUE\">prior written consent.<p>"

                                           "<FONT COLOR=\"BLUE\">DISCLAIMER: ATMEL PROVIDES THIS FIRMWARE  \"AS IS\" WITH NO WARRANTIES OR "
                                           "<FONT COLOR=\"BLUE\">INDEMNITIES WHATSOEVER. ATMEL EXPRESSLY DISCLAIMS ANY EXPRESS, STATUTORY "
                                           "<FONT COLOR=\"BLUE\">OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED "
                                           "<FONT COLOR=\"BLUE\">WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND "
                                           "<FONT COLOR=\"BLUE\">NON-INFRINGEMENT. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT, "
                                           "<FONT COLOR=\"BLUE\">INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES "
                                           "<FONT COLOR=\"BLUE\">(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR "
                                           "<FONT COLOR=\"BLUE\">SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) "
                                           "<FONT COLOR=\"BLUE\">HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, "
                                           "<FONT COLOR=\"BLUE\">STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN "
                                           "<FONT COLOR=\"BLUE\">ANY WAY OUT OF THE USE OF THIS FIRMWARE, EVEN IF ADVISED OF THE "
                                           "<FONT COLOR=\"BLUE\">POSSIBILITY OF SUCH DAMAGE. USER ACKNOWLEDGES AND AGREES THAT THE "
                                           "<FONT COLOR=\"BLUE\">PURCHASE OR USE OF THE FIRMWARE WILL NOT CREATE OR GIVE GROUNDS FOR A "
                                           "<FONT COLOR=\"BLUE\">LICENSE BY IMPLICATION, ESTOPPEL, OR OTHERWISE IN ANY INTELLECTUAL "
                                           "<FONT COLOR=\"BLUE\">PROPERTY RIGHTS (PATENT, COPYRIGHT, TRADE SECRET, MASK WORK, OR OTHER "
                                           "<FONT COLOR=\"BLUE\">PROPRIETARY RIGHT) EMBODIED IN ANY OTHER ATMEL HARDWARE OR FIRMWARE.<p>")), QMessageBox::Ok, QMessageBox::No);

                    if (respuesta1 == QMessageBox::Ok){

                                QString cmd = QString::fromUtf8(tr("echo descomprimiendo ficheros..."));
                                QString cmd1 = "tar xvzf /root/wifi-firmware.tar.gz --directory=/home/%1 atmel-firmware.rpm";
                                cmd1 = cmd1.arg(user);
                                QString cmd2 = QString::fromUtf8(tr("echo Instalando paquete local..."));
                                QString cmd3 = "urpmi /home/%1/atmel-firmware.rpm";
                                cmd3=cmd3.arg(user);
                                QString cmd4 = QString::fromUtf8(tr("echo Borrando temporales..."));
                                QString cmd5 = "rm -vf /home/%1/atmel-firmware.rpm";
                                cmd5 = cmd5.arg(user);
                                QStringList comandos;
                                comandos<< cmd << cmd1 << cmd2 << cmd3 << cmd4 << cmd5;
                                if (mib != 0)
                                delete mib;
                                mib = new DrakeProcesos(comandos, this);
                                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                                connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
                    }
                    else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
                }
}

void recoverdrake::on_actionBcm43xx_fwcutter_2_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar drivers Bcm43xx_fvcutter.");
    Refrescar();
    if (tar == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"tar\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        int respuesta1 = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Instalar drivers Bcm43xx_fwcutter")),
                               QString::fromUtf8(tr("<center><b>Instalar drivers Bcm43xx_fwcutter</b></center><p>"

                               "Drivers Bcm43xx para redes inalambricas de los modelos "
                               "Broadcom©.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Instalar drivers?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                    respuesta1 = QMessageBox::question(this, QString::fromUtf8(tr("Licencia de uso")),
                                           QString::fromUtf8(tr("<center><b>Licencia (Version original)</b></center><p>"

                                           "<FONT COLOR=\"BLUE\">This program is free software; you can redistribute it and/or modify "
                                           "<FONT COLOR=\"BLUE\">it under the terms of the GNU General Public License as published by "
                                           "<FONT COLOR=\"BLUE\">the Free Software Foundation; either version 2 of the License, or (at "
                                           "<FONT COLOR=\"BLUE\">your option) any later version.<p>")), QMessageBox::Ok, QMessageBox::No);

                    if (respuesta1 == QMessageBox::Ok){

                                QString cmd = QString::fromUtf8(tr("echo descomprimiendo ficheros..."));
                                QString cmd1 = "tar xvzf /root/wifi-firmware.tar.gz --directory=/home/%1 bcm43xx-fwcutter.rpm";
                                cmd1 = cmd1.arg(user);
                                QString cmd2 = QString::fromUtf8(tr("echo Instalando paquete local..."));
                                QString cmd3 = "urpmi /home/%1/bcm43xx-fwcutter.rpm";
                                cmd3=cmd3.arg(user);
                                QString cmd4 = QString::fromUtf8(tr("echo Borrando temporales..."));
                                QString cmd5 = "rm -vf /home/%1/bcm43xx-fwcutter.rpm";
                                cmd5 = cmd5.arg(user);
                                QStringList comandos;
                                comandos<< cmd << cmd1 << cmd2 << cmd3 << cmd4 << cmd5;
                                if (mib != 0)
                                delete mib;
                                mib = new DrakeProcesos(comandos, this);
                                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                                connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
                    }
                    else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
                }
}

void recoverdrake::on_actionB43_fwcutter_2_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar drivers B43_fwcutter.");
    Refrescar();
    if (tar == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"tar\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        int respuesta1 = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Instalar drivers b43_fwcutter")),
                               QString::fromUtf8(tr("<center><b>Instalar drivers b43xx_fwcutter</b></center><p>"

                               "Drivers b43xx para redes inalambricas de los modelos "
                               "Broadcom©. Puede ser la solucion para cuando falla el "
                               "driver bcm43xx.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Instalar drivers?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                    respuesta1 = QMessageBox::question(this, QString::fromUtf8(tr("Licencia de uso")),
                                           QString::fromUtf8(tr("<center><b>Licencia (Version original)</b></center><p>"

                                           "<FONT COLOR=\"BLUE\">This program is free software; you can redistribute it and/or modify "
                                           "<FONT COLOR=\"BLUE\">it under the terms of the GNU General Public License as published by "
                                           "<FONT COLOR=\"BLUE\">the Free Software Foundation; either version 2 of the License, or (at "
                                           "<FONT COLOR=\"BLUE\">your option) any later version.<p>")), QMessageBox::Ok, QMessageBox::No);

                    if (respuesta1 == QMessageBox::Ok){

                                QString cmd = QString::fromUtf8(tr("echo descomprimiendo ficheros..."));
                                QString cmd1 = "tar xvzf /root/wifi-firmware.tar.gz --directory=/home/%1 b43-fwcutter.rpm";
                                cmd1 = cmd1.arg(user);
                                QString cmd2 = QString::fromUtf8(tr("echo Instalando paquete local..."));
                                QString cmd3 = "urpmi /home/%1/b43-fwcutter.rpm";
                                cmd3=cmd3.arg(user);
                                QString cmd4 = QString::fromUtf8(tr("echo Borrando temporales..."));
                                QString cmd5 = "rm -vf /home/%1/b43-fwcutter.rpm";
                                cmd5 = cmd5.arg(user);
                                QStringList comandos;
                                comandos<< cmd << cmd1 << cmd2 << cmd3 << cmd4 << cmd5;
                                if (mib != 0)
                                delete mib;
                                mib = new DrakeProcesos(comandos, this);
                                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                                connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
                    }
                    else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
                }
}

void recoverdrake::on_actionIpw2100_2_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar drivers ipw3945d.");
    Refrescar();
    if (tar == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"tar\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        int respuesta1 = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Instalar drivers ipw3945d")),
                               QString::fromUtf8(tr("<center><b>Instalar drivers ipw3945d</b></center><p>"

                               "Drivers ipw3945 para redes inalambricas de los modelos "
                               "Intel©<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Instalar drivers?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                    respuesta1 = QMessageBox::question(this, QString::fromUtf8(tr("Licencia de uso")),
                                           QString::fromUtf8(tr("<center><b>Licencia (Version original)</b></center><p>"

                                           "<FONT COLOR=\"BLUE\">Copyright (c) 2006, Intel Corporation.<p>"
                                           "<FONT COLOR=\"BLUE\">All rights reserved.<p>"

                                           "<FONT COLOR=\"BLUE\">Redistribution.  Redistribution and use in binary form, without "
                                           "<FONT COLOR=\"BLUE\">modification, are permitted provided that the following conditions are "
                                           "<FONT COLOR=\"BLUE\">met:<p>"

                                           "<FONT COLOR=\"BLUE\">* Redistributions must reproduce the above copyright notice and the "
                                           "<FONT COLOR=\"BLUE\">following disclaimer in the documentation and/or other materials "
                                           "<FONT COLOR=\"BLUE\">provided with the distribution.<p>"
                                           "<FONT COLOR=\"BLUE\">* Neither the name of Intel Corporation nor the names of its suppliers "
                                           "<FONT COLOR=\"BLUE\">may be used to endorse or promote products derived from this software "
                                           "<FONT COLOR=\"BLUE\">without specific prior written permission.<p>"
                                           "<FONT COLOR=\"BLUE\">* No reverse engineering, decompilation, or disassembly of this software "
                                           "<FONT COLOR=\"BLUE\">is permitted.<p>"

                                           "<FONT COLOR=\"BLUE\">Limited patent license.  Intel Corporation grants a world-wide, "
                                           "<FONT COLOR=\"BLUE\">royalty-free, non-exclusive license under patents it now or hereafter "
                                           "<FONT COLOR=\"BLUE\">owns or controls to make, have made, use, import, offer to sell and "
                                           "<FONT COLOR=\"BLUE\">sell (\"Utilize\") this software, but solely to the extent that any "
                                           "<FONT COLOR=\"BLUE\">such patent is necessary to Utilize the software alone, or in "
                                           "<FONT COLOR=\"BLUE\">combination with an operating system licensed under an approved Open "
                                           "Source license as listed by the Open Source Initiative at "
                                           "<FONT COLOR=\"BLUE\">http://opensource.org/licenses.  The patent license shall not apply to "
                                           "<FONT COLOR=\"BLUE\">any other combinations which include this software.  No hardware per "
                                           "<FONT COLOR=\"BLUE\">se is licensed hereunder.<p>"

                                           "<FONT COLOR=\"BLUE\">DISCLAIMER.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND "
                                           "<FONT COLOR=\"BLUE\">CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, "
                                           "<FONT COLOR=\"BLUE\">BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND "
                                           "<FONT COLOR=\"BLUE\">FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE "
                                           "<FONT COLOR=\"BLUE\">COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, "
                                           "<FONT COLOR=\"BLUE\">INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, "
                                           "<FONT COLOR=\"BLUE\">BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS "
                                           "<FONT COLOR=\"BLUE\">OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND "
                                           "<FONT COLOR=\"BLUE\">ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR "
                                           "<FONT COLOR=\"BLUE\">TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE "
                                           "<FONT COLOR=\"BLUE\">USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH "
                                           "<FONT COLOR=\"BLUE\">DAMAGE.<p>")), QMessageBox::Ok, QMessageBox::No);

                    if (respuesta1 == QMessageBox::Ok){

                                QString cmd = QString::fromUtf8(tr("echo descomprimiendo ficheros..."));
                                QString cmd1 = "tar xvzf /root/wifi-firmware.tar.gz --directory=/home/%1 ipw3945d.rpm";
                                cmd1 = cmd1.arg(user);
                                QString cmd2 = QString::fromUtf8(tr("echo Instalando paquete local..."));
                                QString cmd3 = "urpmi /home/%1/ipw3945d.rpm";
                                cmd3=cmd3.arg(user);
                                QString cmd4 = QString::fromUtf8(tr("echo Borrando temporales..."));
                                QString cmd5 = "rm -vf /home/%1/ipw3945d.rpm";
                                cmd5 = cmd5.arg(user);
                                QStringList comandos;
                                comandos<< cmd << cmd1 << cmd2 << cmd3 << cmd4 << cmd5;
                                if (mib != 0)
                                delete mib;
                                mib = new DrakeProcesos(comandos, this);
                                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                                connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
                    }
                    else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
                }
}

void recoverdrake::on_actionConvertir_caracteres_especiales_a_UTF8_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir a UTF8.");
    Refrescar();
        if (convmv == "0")
        {
            QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"convmv\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
            m.exec();
        }
        else
        {
            int respuesta = 0;
            int respuesta1 = 0;
            if (Mensaka!="Activo")
            {
                respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir caracteres especiales a UTF8")),
                                   QString::fromUtf8(tr("<center><b>Convertir caracteres especiales a UTF8</b></center><p>"

                                   "En algunas ocasiones intentamos renombrar o borrar algun "
                                   "fichero y nos es imposible hacerlo, debido a su codificacion, "
                                   "ya que aparecen caracteres raros en dicho nombre.<p>"

                                   "La solucion pasa por ejecutar esta funcion y se queda solucionado "
                                   "y a partir de hay, podras hacer lo que quieras con dicho fichero.<p>"

                                   "El problema parece ser que es debido a algunos archivos generados "
                                   "en el sistema operativo \"guindows\".<p>"

                                   "<B>NOTA: Debes esperar a que termine completamente el "
                                   "proceso seleccionado, el cual te sera notificado "
                                   "cuando finalice en la consola de procesos.</B><p>"

                                   "&iquest;Convertir caracteres a UTF8?")), QMessageBox::Ok, QMessageBox::No);
            }
            else
            {
                respuesta=QMessageBox::Ok;
            }
            if (respuesta == QMessageBox::Ok){

                respuesta1 = QMessageBox::question(this, QString::fromUtf8(tr("Tipo de conversion a UTF8")),
                                       QString::fromUtf8(tr("<center><b>Tipo de conversion a UTF8</b></center><p>"

                                       "Hay dos formas de hacerlo: <p>"

                                       "La primera y mas efectiva es de manera recursiva de todos los directorios "
                                       "a partir del directorio seleccionado.<p>"

                                       "La segunda es para hacerlo \"solo\" sobre un directorio en particular.<p>"

                                       "<B>NOTA: Debes esperar a que termine completamente el "
                                       "proceso seleccionado, el cual te sera notificado "
                                       "cuando finalice en la consola de procesos.</B><p>"

                                       "&iquest;Realizar conversion a UTF8 de forma recursiva?")), QMessageBox::Ok, QMessageBox::No);

                if (respuesta1 == QMessageBox::Ok)
                {

                    QString path=tr("/home/%1/Documentos/");
                    path=path.arg(user);
                    QString fileNameDirectori = QFileDialog::getExistingDirectory(this,QString::fromUtf8(tr("Directorio a corregir UTF8?")),path,QFileDialog::ShowDirsOnly);
                    if (fileNameDirectori.isEmpty())
                    {
                        ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                        return;
                    }
                    QString cm =QString::fromUtf8(tr("echo Creando compatibilidad con UTF8 a "+fileNameDirectori+" de manera recursiva..."));
                    QString cmd = "su - %1 -c \"convmv -r -f cp1252 -t utf-8 %2 --notest\"";
                    cmd = cmd.arg(user).arg(fileNameDirectori);
                    QStringList comandos;
                    comandos<< cm << cmd;
                    if (mib != 0)
                    delete mib;
                    mib = new DrakeProcesos(comandos, this);
                    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                    int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
                }
                else
                {
                    QString path=tr("/home/%1/Documentos/");
                    path=path.arg(user);
                    QString fileNameDirectori = QFileDialog::getExistingDirectory(this,QString::fromUtf8(tr("Directorio a corregir UTF8?")),path,QFileDialog::ShowDirsOnly);
                    if (fileNameDirectori.isEmpty())
                    {
                        ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                        return;
                    }
                    QString cm =QString::fromUtf8("echo Creando compatibilidad con UTF8 a "+fileNameDirectori+"...");
                    QString cmd = "RecoverConvert %2";
                    cmd = cmd.arg(fileNameDirectori);
                    QStringList comandos;
                    comandos<< cm << cmd;
                    if (mib != 0)
                    delete mib;
                    mib = new DrakeProcesos(comandos, this);
                    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                    int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
                }
            }
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
        }
}

void recoverdrake::on_actionSustituir_espacios_en_blanco_triggered()
{    
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Sustituir espacios en blanco en nombres de archivo.");
    Refrescar();
    if (convmv == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"convmv\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Sustituir espacios en blanco")),
                               QString::fromUtf8(tr("<center><b>Sustituir espacios en blanco</b></center><p>"
                               "Mediante esta utilidad, conseguimo las sustitucion "
                               "de los espacios en blanco de los nombres de archivos "
                               "que nos pueden dar errores al ejecutarlos o modificarlos.<p>"
                               "SOLO se realizara la conversion de ficheros sobre el directorio "
                               "que se ha marcado, no sobre los subdirectorios para no realizar "
                               "operaciones que puedan perjudicar directorios.<p>"
                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"
                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"
                               "&iquest;Sustituir espacios en blanco?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString cm =QString::fromUtf8(tr("echo Accediendo al renombrado de espacios en blanco..."));
                QString cmd = "RecoverRename";
                QStringList comandos;
                comandos<< cm << cmd;
                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
            }
}

void recoverdrake::on_actionRpm_database_bloqued_triggered()
{    
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Desbloquear base de datos de urpmi.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Desbloquear base de datos de uprmi")),
                           QString::fromUtf8(tr("<center><b>Desbloquear base de datos de urpmi</b></center><p>"

                           "El mensaje es conocido como \"RPM database bloqued\".<p>"

                           "En alguna ocasion puede pasar, que por alguna razon "
                           "la base de datos de urmpi se quede trabada o bloqueada, "
                           "por lo que es necesario desbloquearla o no se podra utilizar.<p>"

                           "Mediante esta utilidad se soluciona dicho problema.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Desbloquear base de datos urpmi?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cmd = QString::fromUtf8(tr("echo Eliminando ficheros bloqueados..."));
            QString cmd1 = "killall urpmi urpmi.update urpme rpm urpmi.addmedia userhelper";
            QString cmd2 ="rm -vf /var/lib/urpmi/.LOCK /var/lib/rpm/RPMLOCK";
            QString cmd3 =QString::fromUtf8(tr("echo Base de dastos de uprmi desbloqueada."));
            QStringList comandos;
            comandos<< cmd << cmd1 << cmd2 << cmd3;
            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
            connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionIdioma_espa_ol_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Cambiar menus Kde a espa&ntilde;ol.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Cambiar idioma a espa&ntilde;ol")),
                           QString::fromUtf8(tr("<center><b>Cambiar idioma a espa&ntilde;ol</b></center><p>"

                           "A veces puede pasar que al reinstalar KDE, perdamos la "
                           "configuracion en espa&ntilde;ol y todos los menus nos salgan "
                           "en ingles.<p>"

                           "Mediante esta utilidad se soluciona dicho problema.<p>"

                           "<FONT COLOR=\"BLUE\">ImPORTANTE: Para que el proceso tenga efecto, debe cerrar "
                           "<FONT COLOR=\"BLUE\">la sesion actual, tras la instalacion del "
                           "paquete instalado.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Cambiar idioma a espa&ntilde;ol?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cm =QString::fromUtf8(tr("echo Accediendo al paquete de idioma..."));
            QString cmd = "urpmi --fuzzy -a --auto kde-l10n-es";
            QStringList comandos;
            comandos<< cm << cmd;
            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
            connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionSolucionar_kdeinit4_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Solucionar fallo kdeinit4.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Solucionar fallo kdeinit4")),
                           QString::fromUtf8(tr("<center><b>Solucionar fallo kdeinit4</b></center><p>"

                           "Al intentar entrar en KDE, puede que nos de este error y no "
                           "podamos acceder a nuestro escritorio favorito.<p>"

                           "Este error es debido a la configuracion de algun plasma de "
                           "escritorio, por lo que la solucion pasa por volver a configurar "
                           "el estilo visual de kde.<p>"

                           "<b>IMPORTANTE: Realizando este proceso, el escritorio volvera a su "
                           "estado inicial, para evitar el error.<p>"

                           "<b>Es importante que comprenda que su configuracion personal "
                           "desaparecera y tendra que volver a configurar de nuevo su escritorio.<p>"

                           "Se realiza una copia del directorio oculto para poder recuperar, si es "
                           "necesario, denominado \".kde4Backup\".<p>"

                           "Si quiere recuperar su configuracion solo tendra que utilizar (Recuperar "
                           "configuracion) de este mismo submenu.<p>"

                           "<b>No olvide reiniciar sesion para que los cambios tengan efecto.<p></b>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Solucionar kdeinit4?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cmd = QString::fromUtf8(tr("echo Realizando backup del fichero responsable del error..."));
            QString cmd1 = "mkdir /home/%1/.kde4Backup/";
            cmd1=cmd1.arg(user);
            QString cmd2 = "cp -v -R /home/%1/.kde4/ /home/%1/.kde4Backup/";
            cmd2=cmd2.arg(user);
            QString cmd3 = QString::fromUtf8(tr("echo Borrando fichero responsable del error..."));
            QString cmd4 = "rm -vrf /home/%1/.kde4/share/config";
            cmd4=cmd4.arg(user);
            QString cmd5 = "chown -R %1 /home/%1/.kde4Backup/";
            cmd5=cmd5.arg(user);
            QString cmd6 = "chgrp -R %1 /home/%1/.kde4Backup/";
            cmd6=cmd6.arg(user);
            QString cmd7 = QString::fromUtf8(tr("echo Proceso de reconstruccion realizado."));
            QStringList comandos;
            comandos<< cmd << cmd1 << cmd2 << cmd3 << cmd4 << cmd5 << cmd6 << cmd7;
            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
            connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionRecuperar_configuraci_n_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Recuperar configuracion de kde.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Recuperar configuracion")),
                           QString::fromUtf8(tr("<center><b>Recuperar configuracion</b></center><p>"

                           "Mediante este proceso, vuelve a recuperar al estado anterior la configuracion "
                           "de su kde.<p>"

                           "<b>IMPORTANTE</b>: Si realiza este proceso, puede que su kde, vuelva al estado "
                           "anterior a su problema, por lo que no habra hecho nada.<p>"

                           "No olvide reiniciar sesion para que los cambios tengan efecto.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Recuperar configuracion?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cmd = QString::fromUtf8(tr("echo Realizando la recuperacion de configuracion..."));
            QString cmd1 = "cp -v -r /home/%1/.kde4Backup/.kde4/ /home/%1/";
            cmd1=cmd1.arg(user);
            QString cm = QString::fromUtf8(tr("echo Dando permisos a los archivos recuperados..."));
            QString cmd3 = "chown -R %1 /home/%1/.kde4/";
            cmd3=cmd3.arg(user);
            QString cmd4 = "chgrp -R %1 /home/%1/.kde4/";
            cmd4=cmd4.arg(user);
            QString cmd5 = QString::fromUtf8(tr("echo Proceso de reconfiguracion realizado."));
            QStringList comandos;
            comandos<< cmd << cmd1 << cm << cmd3 << cmd4 << cmd5;
            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
            connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionRecuperar_KDE_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Recuperar kde.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Recuperar KDE")),
                           QString::fromUtf8(tr("<center><b>Recuperar KDE</b></center><p>"

                           "Por diversos motivos KDE puede desestabilizarse o simplemente no "
                           "ejecutarse por diversos motivos.<p>"

                           "<b>IMPORTANTE: Realizando este proceso, el escritorio volvera a su "
                           "estado inicial, para evitar loss errores.<p>"

                           "<b>Es importante que comprenda que su configuracion personal "
                           "desaparecera y tendra que volver a configurar de nuevo su escritorio.<p>"

                           "Se realiza una copia del directorio oculto para poder recuperar, si es "
                           "necesario, denominado \".kde4Backup\".<p>"

                           "Si quiere recuperar su configuracion solo tendra que utilizar (Recuperar "
                           "configuracion) de este mismo submenu.<p>"

                           "<b>No olvide reiniciar sesion para que los cambios tengan efecto.<p></b>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Recuperar KDE?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cmd = QString::fromUtf8(tr("echo Realizando backup del fichero responsable del error..."));
            QString cmd1 = "mkdir /home/%1/.kde4Backup/";
            cmd1=cmd1.arg(user);
            QString cmd2 = "cp -v -R /home/%1/.kde4/ /home/%1/.kde4Backup/";
            cmd2=cmd2.arg(user);
            QString cmd3 = QString::fromUtf8(tr("echo Borrando fichero responsable del error..."));
            QString cmd4 = "rm -vrf /home/%1/.kde4";
            cmd4=cmd4.arg(user);
            QString cm = QString::fromUtf8(tr("echo Dando permisos a los archivos recuperados..."));
            QString cmd5 = "chown -R %1 /home/%1/.kde4Backup/";
            cmd5=cmd5.arg(user);
            QString cmd6 = "chgrp -R %1 /home/%1/.kde4Backup/";
            cmd6=cmd6.arg(user);
            QString cmd7 = QString::fromUtf8(tr("echo Proceso de reconstruccion realizado."));
            QStringList comandos;
            comandos<< cmd << cmd1 << cmd2 << cmd3 << cmd4 << cm << cmd5 << cmd6 << cmd7;
            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
            connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionRecuperar_configuraci_n_anterior_triggered()
{    
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Recuperar configuracion anterior de kde.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Recuperar configuracion anterior")),
                           QString::fromUtf8(tr("<center><b>Recuperar configuracion anterior</b></center><p>"

                           "Mediante este proceso, vuelve a recuperar al estado anterior la configuracion "
                           "de su kde.<p>"

                           "<b>IMPORTANTE</b>: Si realiza este proceso, puede que su kde, vuelva al estado "
                           "anterior a su problema, por lo que no habra hecho nada.<p>"

                           "No olvide reiniciar sesion para que los cambios tengan efecto.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Recuperar configuracion anterior?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cmd = QString::fromUtf8(tr("echo Realizando la recuperacion de configuracion..."));
            QString cmd1 = "cp -v -r /home/%1/.kde4Backup/.kde4/ /home/%1/";
            cmd1=cmd1.arg(user);
            QString cm = QString::fromUtf8(tr("echo Dando permisos a los archivos recuperados..."));
            QString cmd3 = "chown -R %1 /home/%1/.kde4/";
            cmd3=cmd3.arg(user);
            QString cmd4 = "chgrp -R %1 /home/%1/.kde4/";
            cmd4=cmd4.arg(user);
            QString cmd5 = QString::fromUtf8(tr("echo Proceso de reconfiguracion realizado."));
            QStringList comandos;
            comandos<< cmd << cmd1 << cm << cmd3 << cmd4 << cmd5;
            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
            connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionAdobe_reader_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Solucionar Adobe Reader.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Adobe Reader")),
                           QString::fromUtf8(tr("<center><b>Adober Reader</b></center><p>"

                           "Al navegar con firefox y quere abrir un fichero de tipo "
                           ".pdf, podemos tener el problema de que no lo lea por no "
                           "tener instaldo el Reader, con esta opcion se soluciona "
                           "el problema.<p>"

                           "<b>IMPORTANTE</b>: Va a instalar un paquete privativo en "
                           "su sistema.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Solucionar Adobe Reader?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString path=tr("/home/%1/Documentos/AdobeReader_esp-8.1.7-1.i486.rpm");
            path=path.arg(user);

            QString fileNameDestino = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Salvar fichero AdobeReader")),
                                path,QString::fromUtf8(tr("Fichero RPM (*.rpm)")));
            if (fileNameDestino.isEmpty())
            {
                ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                return;
            }
                QString cmd = QString::fromUtf8(tr("echo Descargando desde el servidor en modo consola..."));
                QString cmd1 = "wget http://ardownload.adobe.com/pub/adobe/reader/unix/8.x/8.1.7/esp/AdobeReader_esp-8.1.7-1.i486.rpm -O /%2";
                cmd1=cmd1.arg(fileNameDestino);
                QString cm = QString::fromUtf8(tr("echo Instalando..."));
                QString cmd3 = "urpmi %2";
                cmd3=cmd3.arg(fileNameDestino);
                QString cmd2 = QString::fromUtf8(tr("echo Borrando temporales..."));
                QString cmd4 = "rm -vf %2";
                cmd4=cmd4.arg(fileNameDestino);
                QString cmd5 = QString::fromUtf8(tr("echo Proceso de instalacion realizado."));
                QStringList comandos;
                comandos<< cmd << cmd1 << cm << cmd3 << cmd2 << cmd4 << cmd5;
                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionDolphin_triggered()
{   
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Solucionar error de Dolphin con vista previa.");
        Refrescar();
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Error de Dolphin con vista previa")),
                               QString::fromUtf8(tr("<center><b>Error de Dolphin con vista previa</b></center><p>"

                               "Por algun motivo, al abrir Dolphin y tener videos en "
                               "la carpeta contenedora, puede generar que se ralentize "
                               "el equipo, cuando ejecuta la vista previa.<p>"

                               "La solucion es instalar este script que ira matando los "
                               "procesos relacionados con kio_thumbnail.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Solucionar Dolphin?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

            QString cm=QString::fromUtf8(tr("echo Instalando demonio para corregir fallo de Dolphin en vista previa..."));
            QString cmd = "RecoverDolphin";
            QStringList comandos;
            comandos<< cm << cmd;
            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
            connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionRecuperar_contrase_a_usuario_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Recuperar contrase&ntilde;a de usuario.");
    Refrescar();
    if (zenity == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"zenity\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        if (sudo == "0")
        {
            QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"sudo\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
            m.exec();
        }
        else
        {
            int respuesta = 0;
            if (Mensaka!="Activo")
            {
                respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Recuperar contrase&ntilde;a de usuario")),
                                   QString::fromUtf8(tr("<center><b>Recuperar contrase&ntilde;a de usuario</b></center><p>"

                                   "A veces puede ocurrir que, por algun motivo, olvidemos "
                                   "alguna de las contrase&ntilde;as de nuestro sistema, por lo "
                                   "que con esta opcion es facil de recuperar.<p>"

                                   "La contrase&ntilde;a root no tiene sentido en este apartado, "
                                   "ya que si has llegado hasta aqui, es por que la sabes, "
                                   "aunque explico como hacerlo de manera informativa:<p>"

                                   "<B>RECUPERAR CONTRASE&ntilde;A ROOT<P>"

                                   "<B>Lo primero a hacer es reiniciar la maquina, ya en Grub "
                                   "<B>hay que colocarse sobre la opcion de Linux y pulsar (e) "
                                   "<B>luego colocarse sobre la opcion (kernel) y pulsar (e), "
                                   "<B>separa con un espacio el texto subsecuente, escribimos "
                                   "<B>(single) y presionamos enter.<p>"

                                   "<B>Despues pulsa (b) para iniciar el sistema, al entrar en "
                                   "<B>modo terminal tenemos la cuenta root, por lo que solo "
                                   "<B>necesitamos cambiar la contrase&ntilde;a con el comando:<p> "

                                   "<B>passwd root<p>"

                                   "<B>y despues reinicia el sistema para que surtan efecto los "
                                   "<B>cambios mediante el comando (reboot).<p>"

                                   "<B>NOTA: Este proceso se realiza en la consola que se abre "
                                   "<B>junto a RecoverDrake, al inicio de la ejecucion, ya que "
                                   "<b>es necesaria para poder ejecutarse correctamente.<p>"
                                   "<b>EN DICHA CONSOLA SE DEBE INTRODUCIR EL NUEVO PASSWORD DOS VECES.<p>"

                                   "&iquest;Recuperar contrase&ntilde;a?")), QMessageBox::Ok, QMessageBox::No);
            }
            else
            {
                respuesta=QMessageBox::Ok;
            }
            if (respuesta == QMessageBox::Ok)
                        {
                        system("RecoverPswd");
                        }
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
            }
    }
    ui->progressBar->hide();
    ui->pushButton_2->hide();
    ui->label_13->hide();ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
}

void recoverdrake::on_actionKTTSD_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Solucionar KTTSD no se esta ejecutando.");
    Refrescar();
    if (zenity == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"zenity\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        if (tar == "0")
        {
            QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"tar\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
            m.exec();
        }
        else
        {
            int respuesta = 0;
            if (Mensaka!="Activo")
            {
                respuesta = QMessageBox::question(this, QString::fromUtf8(tr("KTTSD no se esta ejecutando")),
                                   QString::fromUtf8(tr("<center><b>KTTSD no se esta ejecutando</b></center><p>"

                                   "Por algun motivo las nuevas versiones de kttsd y de "
                                   "jovie hacen que no funcione el lector de voces festival, "
                                   "lanzando un mensaje de que no se esta ejecutando KTTSD.<p>"

                                   "La solucion pasa por utilizar esta utilidad.<p>"

                                   "<B>NOTA: Debes esperar a que termine completamente el "
                                   "proceso seleccionado, el cual te sera notificado "
                                   "cuando finalice en la consola de procesos.</B><p>"

                                   "&iquest;Configurar KTTSD?")), QMessageBox::Ok, QMessageBox::No);
            }
            else
            {
                respuesta=QMessageBox::Ok;
            }
            if (respuesta == QMessageBox::Ok){

                QString cm = QString::fromUtf8(tr("echo Solucionando problema de Kttsd..."));
                QString cmd = "RecoverKTTSD";
                QStringList comandos;
                comandos<< cm << cmd;
                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
            }
    }
}

void recoverdrake::on_actionVisionar_flash_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Solucionar problema de Flash Player en Internet.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Visionar Flash")),
                           QString::fromUtf8(tr("<center><b>Visionar Flash</b></center><p>"

                           "Para poder ver videos de tipo flash, como por ejemplo "
                           "de la pagina de youtube, necesitas tener instalado "
                           "el plugin flash o irremediablemente no podras verlos.<p>"

                           "La solucion pasa por utilizar esta utilidad.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Instalar plugin flash?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

        QString cm =QString::fromUtf8(tr("echo Instalando paquete requerido..."));
        QString cmd = "urpmi --fuzzy -a --auto flash-player-plugin";
        QStringList comandos;
        comandos<< cm << cmd;
        if (mib != 0)
        delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
        connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionVirtualBox_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Configurar VirtualBox.");
    Refrescar();
    if (sudo == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"sudo\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Configurar VirtualBox")),
                               QString::fromUtf8(tr("<center><b>Configurar Virtualbox</b></center><p>"

                               "Cuando queremos ejecutar Virtualbox, es posible "
                               "que lance un mensaje de que no se puede ejecutar "
                               "y tengamos que configurarlo a la vez que prepararlo "
                               "para proximos kernel.<p>"

                               "Esta funcion hace esa labor, creando una nueva "
                               "configuracion para su funcionamiento y por otro "
                               "lado, haciendo que se pueda compilar con futuro "
                               "kernels (nucleos)<p>"

                               "Es tan valido para version OSE como para Oracle.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Configurar Virtualbox?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

            QString cmd = QString::fromUtf8(tr("echo Descargando paquetes necesarios e instalando..."));
            QString cmd1 = "urpmi --fuzzy --auto -a dkms-Virtualbox Virtualbox-kernel-%1 Virtualbox-kernel-%1-latest";
            cmd1 = cmd1.arg(Tip);
            QString cmd2 = QString::fromUtf8(tr("echo Configurando vboxdrv..."));
            QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(""+Vir+"____");
            m.exec();
            if ( Vir == "vboxdrv")
                {
                QString cm = QString::fromUtf8(tr("echo Configurando protocolos de VirtualBox..."));
                QString cmd3 = "sudo /etc/init.d/vboxdrv setup";
                QString cmd4 = QString::fromUtf8(tr("echo VirtualBox configurado."));
                QStringList comandos;
                comandos<< cmd << cmd1 << cmd2 << cm << cmd3 << cmd4;
                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
                }
            else
                {
                QString cmd3 = QString::fromUtf8(tr("echo Nada que configurar en vboxdrv"));
                QString cmd4 = QString::fromUtf8(tr("echo VirtualBox configurado."));
                QStringList comandos;
                comandos<< cmd << cmd1 << cmd2 << cmd3 << cmd4;
                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
                }
            }
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
        }
}

void recoverdrake::on_actionExcluir_paquete_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Excluir paquetes a actualizar.");
    Refrescar();
    if (zenity == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"zenity\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Excluir paquete a actualizar")),
                               QString::fromUtf8(tr("<center><b>Excluir paquete a actualizar</b></center><p>"

                               "A veces, hay paquetes que no se actualizan de forma "
                               "correcta o fallan las dependencias y siempre "
                               "aparecen para actualizar aunque no pueden ser "
                               "instalados, por lo que es preciso excluirlos de "
                               "las actualizaciones.<p>"

                               "Con esta utilidad, se puede hacer con el simple "
                               "hecho de introducir su nombre simple.<p>"

                               "<FONT COLOR=\"BLUE\">Ejemplo: rhythmbox<p>"

                               "Si por lo contrario quiere excluir un nombre y "
                               "todas sus variantes, debe introducirlo de la "
                               "siguiente manera...<p>"

                               "<FONT COLOR=\"BLUE\">Ejemplo: /^rhythmbox/<p>"

                               "<b>Tal cual se muestra con las barras / y el signo ^<p>"

                               "&iquest;Excluir paquete?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                 QString cm = QString::fromUtf8(tr("echo Excluyendo paquete..."));
                 QString cmd= "RecoverExclu";
                 QStringList comandos;
                 comandos<< cm << cmd;
                 if (mib != 0)
                 delete mib;
                 mib = new DrakeProcesos(comandos, this);
                 connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                 connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                 connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                 int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                 else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionRecuperar_paquete_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Recuperar paquetes excluidos.");
    Refrescar();
    if (zenity == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"zenity\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Recuperar paquete excluido")),
                               QString::fromUtf8(tr("<center><b>Recuperar paquete excluido</b></center><p>"

                               "Puede que quieras recuperar la actualizacion "
                               "de un paquete en particular, por lo que con "
                               "solo poner su nombre se volvera a activar.<p>"

                               "Con esta utilidad, se puede hacer con el simple "
                               "hecho de introducir su nombre simple.<p>"

                               "<FONT COLOR=\"BLUE\">Ejemplo: rhythmbox<p>"

                               "Si por lo contrario quiere recuperar un nombre y "
                               "todas sus variantes, debe introducirlo de la "
                               "siguiente manera...<p>"

                               "<FONT COLOR=\"BLUE\">Ejemplo: /^rhythmbox/<p>"

                               "<b>Tal cual se muestra con las barras / y el signo ^<p>"

                               "&iquest;Recuperar paquete excluido?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                             QString cm =QString::fromUtf8(tr("echo Recuperando paquete excluido..."));
                             QString cmd = "RecoverInclu";
                             QStringList comandos;
                             comandos<< cm << cmd;
                             if (mib != 0)
                                 delete mib;
                             mib = new DrakeProcesos(comandos, this);
                             connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                             connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                             connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                             int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                             else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionVaciar_fichero_de_exclusiones_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Vaciar fichero de exclusion.");
        Refrescar();
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Vaciar fichero de exclusiones")),
                               QString::fromUtf8(tr("<center><b>Vaciar fichero de exclusiones</b></center><p>"

                               "Se procedera a la reconstruccion total del "
                               "fichero de exclusiones, si esta seguro de "
                               "que es lo que quiere hacer, marque ok, si "
                               "duda marque no.<p>"

                               "<b>NOTA: Todos los ficheros excluidos seran "
                               "<b>restaurados. PROCEDA CON PRECAUCION.<p>"

                               "&iquest;Reconstruir fichero de exclusiones?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                             QString cm =QString::fromUtf8(tr("echo Vaciando fichero de exclusiones..."));
                             QString cmd = "RecoverRest";
                             QStringList comandos;
                             comandos<< cm << cmd;
                             if (mib != 0)
                                 delete mib;
                             mib = new DrakeProcesos(comandos, this);
                             connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                             connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                             connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                             int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                             else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionAplicar_permisos_masivos_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Aplicar permisos a unidades NTFS.");
    Refrescar();
    if (zenity == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"zenity\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        if (ntfsconfig == "0")
        {
            QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ntfsconfig\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
            m.exec();
        }
        else
        {
            int respuesta = 0;
            if (Mensaka!="Activo")
            {
                respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Aplicar permisos a unidades NTFS")),
                                   QString::fromUtf8(tr("<center><b>Aplicar permisos a unidades NTFS</b></center><p>"

                                   "Se ha apreciado un error en las unidades NTFS, en el que "
                                   "despues de escribir en ellas, aparece el mensaje:<p>"

                                   "No se pudieron cambiar los permisos...<p>"

                                   "no siendo problematico es bastante molesto y mas si "
                                   "estas pasando varios archivos a la vez, ya que en "
                                   "cada una de los archivos aparecera dicho mensaje.<p>"

                                   "Se generara un fichero denominado fstab.bak con la "
                                   "configuracion anterior en la ruta /etc/fstab.bak, por lo "
                                   "que en el caso de inestabilidad, solo tendria que ser "
                                   "renombrado por /etc/fstab y volveria a su estado original, "
                                   "dicho proceso se realiza automaticamente con la otra opcion "
                                   "del menu NTFS<P>"

                                   "&iquest;Aplicar permisos a NTFS?")), QMessageBox::Ok, QMessageBox::No);
            }
            else
            {
                respuesta=QMessageBox::Ok;
            }
            if (respuesta == QMessageBox::Ok){

                                 QString cm = QString::fromUtf8(tr("echo Aplicando permisos a unidades NTFS..."));
                                 QString cmd = "RecoverNTFS";
                                 QStringList comandos;
                                 comandos<< cm << cmd;
                                 if (mib != 0)
                                     delete mib;
                                 mib = new DrakeProcesos(comandos, this);
                                 connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                                 connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                                 connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                                 int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                                 else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
        }
    }
}

void recoverdrake::on_actionRecuperar_fstab_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Recuperar fichero fstab.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Recuperar fichero fstab")),
                           QString::fromUtf8(tr("<center><b>Recuperar fichero fstab</b></center><p>"

                           "Si has notado cualquier inestabilidad al realizar el "
                           "proceso de configuracion de NTFS, debe utilizar esta "
                           "opcion ya que recuperara la configuracion anterior.<p>"

                           "Ten en cuenta que si lo haces, todos los permisos "
                           "otorgados, se habran perdido.<p>"

                           "&iquest;Recuperar configuracion fstab?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

                         QString cmd = QString::fromUtf8(tr("echo Restaurando fichero fstab..."));
                         QString cmd1 = "mv -f /etc/fstab.bak /etc/fstab";
                         QString cmd2 = QString::fromUtf8(tr("echo Restauracion realizada satisfactoriamente."));
                         QStringList comandos;
                         comandos<< cmd << cmd1 << cmd2;
                         if (mib != 0)
                             delete mib;
                         mib = new DrakeProcesos(comandos, this);
                         connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                         connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                         connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                         int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                         else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionRecuperar_ficheros_directorios_borrados_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Recuperar ficheros borrados.");
    Refrescar();
    ui->progressBar->hide();
    ui->pushButton_2->hide();
    ui->label_13->hide();ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
    if (photorec == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"photorec\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        if (konsole == "0")
        {
            QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"konsole\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
            m.exec();
        }
        else
        {
            int respuesta = 0;
            if (Mensaka!="Activo")
            {
                respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Recuperar ficheros de directorios borrados")),
                                   QString::fromUtf8(tr("<center><b>Recuperar ficheros de directorios borrados</b></center><p>"

                                   "Por error o responsablemente se pueden borrar archivos o directorios "
                                   "que lamentablemente no queriamos borrar y queremos recuperarlos.<p>"

                                   "Lo mas importante es no sobreescribir el disco por que los inodos del "
                                   "borrado siguen estando activos.<p>"

                                   "Esta es una utilidad para realizar eso y mas ya que se puede recuperar "
                                   "incluso particiones corruptas.<p>"

                                   "Este proceso puede ser efectivo o no, ya que depende de muchos factores, "
                                   "ya que los datos unas veces se recuperan correctamente y otras no.<p>"

                                   "Y no olvides de la importancia de hacer una copia de tu datos mas preciados.<p>"

                                   "Siga los pasos que le iran dando para poder realizar de una forma optima "
                                   "la recuperacion.<p>"

                                   "&iquest;Intentar la recuperacion de ficheros borrados?")), QMessageBox::Ok, QMessageBox::No);
            }
            else
            {
                respuesta=QMessageBox::Ok;
            }
            if (respuesta == QMessageBox::Ok)
               system("konsole -e photorec");
            else
            {
                ui->tabWidget->setCurrentPage(pagina);
                ui->tabWidget_8->setCurrentPage(0);
                return;
            }
        }
    }
}

void recoverdrake::on_actionWifi_intermitente_WEB_WPA_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Wifi intermitente encriptada WEP/WPA (externo).");
    Refrescar();
    if (zenity == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"zenity\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Wifi intermitente encriptada WEB/WPA")),
                               QString::fromUtf8(tr("<center><b>Wifi intermitente encriptada WEB/WPA</b></center><p>"

                               "Este opcion pretende que la wifi, cuando esta fallida, "
                               "y no para de desactivarse, hace que fuerze, cada minuto, "
                               "su ejecucion de manera automatica, si esta activo.<p>"

                               "Este version solo funciona con encriptaciones tipo WEB/WPA.<p>"

                               "&iquest;Habilitar Wifi intermitente?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                             QString cm =QString::fromUtf8(tr("echo Solucionando problema de wifi intermitente encriptada..."));
                             QString cmd1 = "RecoverWifiWep";
                             QStringList comandos;
                             comandos<< cm << cmd1;
                             if (mib != 0)
                                 delete mib;
                             mib = new DrakeProcesos(comandos, this);
                             connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                             connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                             connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                             int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                             else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionWifi_intermitente_abierta_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Wifi intermitente abierta (externo).");
    Refrescar();
    if (zenity == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"zenity\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Wifi intermitente abierta")),
                               QString::fromUtf8(tr("<center><b>Wifi intermitente abierta</b></center><p>"

                               "Este opcion pretende que la wifi, cuando esta fallida, "
                               "y no para de desactivarse, hace que fuerze, cada minuto, "
                               "su ejecucion de manera automatica, si esta activo.<p>"

                               "Este version solo funciona sin encriptaciones.<p>"

                               "&iquest;Habilitar Wifi intermitente?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                             QString cm =QString::fromUtf8(tr("echo Solucionando problema de wifi intermitente sin encriptar..."));
                             QString cmd1 = "RecoverWifi";
                             QStringList comandos;
                             comandos<< cm << cmd1;
                             if (mib != 0)
                                 delete mib;
                             mib = new DrakeProcesos(comandos, this);
                             connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                             connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                             connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                             int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                             else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionNo_se_pueden_ejecutar_opciones_de_Sudo_triggered()
{   
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Activar sudo con usuario activo.");
        Refrescar();
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("No se puede ejecutar sudo con el usuario activo")),
                               QString::fromUtf8(tr("<center><b>No se puede ejecutar sudo con el usuario activo</b></center><p>"

                               "Este opcion soluciona los problemas de permisos con el "
                               "comando \"sudo\", ya que introduce el usuario para no "
                               "tener problemas de permisos.<p>"

                               "&iquest;Introducir usuario en /etc/sudoers?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                             QString cm=QString::fromUtf8(tr("echo Ingresando usuario a sudoers..."));
                             QString cmd1 = "RecoverSudo";
                             QStringList comandos;
                             comandos<< cm << cmd1;
                             if (mib != 0)
                                 delete mib;
                             mib = new DrakeProcesos(comandos, this);
                             connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                             connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                             connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                             int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                             else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionCargar_direcci_n_sop_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Ejecutar sopcast.");
    Refrescar();
    int respuesta = 0;
    int respuesta1 = 0;
    bool ok;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Ejecutar sopcast")),
                           QString::fromUtf8(tr("<center><b>Ejecutar sopcast</b></center><p>"

                           "Esta utilidad sirve para ver todo tipo de eventos, aunque se suele "
                           "utilizar para ver eventos deportivos, los cuales pueden ser de pago "
                           "en algunos paises y en otros son emitidos libremente y por canales "
                           "abiertos via internet y que por lo general son de origen Chino o "
                           "japones.<p>"

                           "<FONT COLOR=\"RED\">IMPORTANTE: En algunos paises, utilizar este tipo de software puede ser ilegal, "
                           "<FONT COLOR=\"RED\">consulte la legislacion vigente de su pais para saber si puede utilizar "
                           "<FONT COLOR=\"RED\">dicho software.<p>"

                           "Solo tiene que meter lar direccion sop del evento para poder visualizarlo, pero "
                           "anteriormente tiene que tener instalado en el sistema los paquetes sopcast y "
                           "vlc o parole, para poder visionarlo correctamente.<p>"

                           "<B>NOTA: Durante la ejecucion de este apartado no es recomendable utilizar ninguna opcion del "
                           "menu salvo la de visionar el evento en este mismo submenu, ya que se cortara la comunicacion. Y "
                           "por supuesto no cierre RecoverDrake, mientras este visualizando el evento.</B><p>"

                           "&iquest;Ejecutar sopcast?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

                    respuesta1 = QMessageBox::question(this, QString::fromUtf8(tr("Licencia de uso")),
                                           QString::fromUtf8(tr("<center><b>Licencia (Idioma original)</b></center><p>"

                                           "<FONT COLOR=\"BLUE\">Terms of Service<p>"

                                           "<FONT COLOR=\"BLUE\">Nowadays, all the services on SopCast (sopcast.com) are totally free and only for test purpose. "
                                           "<FONT COLOR=\"BLUE\">Our client (P2P TV Player) and channel list can be copied and distributed freely for anyone. "
                                           "<FONT COLOR=\"BLUE\">Any portion of these may not be sold, resold, or otherwise exploited for any commercial purpose "
                                           "<FONT COLOR=\"BLUE\">that is not expressly permitted by SopCast. Some websites have been found selling the services "
                                           "<FONT COLOR=\"BLUE\">based on SopCast. Please immediately cease all such infringements.<p>")), QMessageBox::Ok, QMessageBox::No);
                    if (respuesta1 == QMessageBox::Ok){

                                QString direccion = QInputDialog::getText(this, QString::fromUtf8(tr("Direccion sop")),
                                QString::fromUtf8(tr("Introduzca la direccion completa \"sop\" del evento.<P>"

                                    "<FONT COLOR=\"RED\">Ejemplo:<p>"

                                    "<FONT COLOR=\"RED\">sop://sop.prueba.com:3912/60713<p>")),
                                    QLineEdit::Normal,
                                    "",
                                    &ok);
                                    if (ok && !direccion.isEmpty())
                                    {
                                        system("su - "+user+" -c \"sp-sc '"+direccion+"' 3908 8908 > /dev/null &\"");
                                        this->on_actionVisionar_evento_triggered();
                                    }
                                }
                    else
                    {
                         ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;
                    }
    }
    ui->progressBar->hide();
    ui->pushButton_2->hide();
    ui->label_13->hide();ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;
}

void recoverdrake::on_actionVisionar_evento_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Visionar evento sopcast.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Visionar evento")),
                           QString::fromUtf8(tr("<center><b>Visionar sop montada</b></center><p>"

                           "Una vez montada la direccion sop a visionar, solo nos resta "
                           "lanzarla en un programa de video.<p>"

                           "&iquest;Visionar evento?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok)
    {
        system("su - "+user+" -c \"'"+TipoVideo+"' http://localhost:8908/tv.asf\"");
    }
    ui->progressBar->hide();
    ui->pushButton_2->hide();
    ui->label_13->hide();ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;
}

void recoverdrake::on_actionMatar_direccion_sop_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Matar direccion sop activa.");
        Refrescar();
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Matar direccion sop activa")),
                               QString::fromUtf8(tr("<center><b>Matar direccion sop activa</b></center><p>"

                               "Por algun motivo, puede que al haber activado un nuevo sop, el anterior se "
                               "quede enganchado. La solucion pasa por ejecutar esta utilidad para que se liberado.<p>"

                               "Como norma general, suele pasar en algunas ocasiones, aunque no es normal.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Matar sop activo?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

            QString cm =QString::fromUtf8(tr("echo Matando manualmente direccion sop activa..."));
            QString cmd = "RecoverSop";
            QStringList comandos;
            comandos<< cm << cmd;
            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
            connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionConvertir_deb_a_rpm_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Conversion de .deb a .rpm");
    Refrescar();
    if (fakeroot == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"fakeroot\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        if (alien == "0")
        {
            QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"alien\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
            m.exec();
        }
        else
        {
            int respuesta = 0;
            QStringList fileNameOrigen;
            int i;
            QStringList comandos;
            QString ruta;
            if (Mensaka!="Activo")           
            {
                respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir .deb a .rpm")),
                                   QString::fromUtf8(tr("<center><b>Convertir .deb a .rpm</b></center><p>"

                                   "Es posible que necesitemos convertir ficheros de tipo "
                                   ".deb a .rpm, por que no se encuentra el paquete "
                                   "correspondiente en nuestra distribucion favorita.<p>"

                                   "Con esta utilidad es posible hacerlo.<P>"

                                   "<B>NOTA Debes esperar a que termine completamente el "
                                   "proceso seleccionado, el cual te sera notificado "
                                   "cuando finalice en la consola de procesos.</B><p>"

                                   "&iquest;Convertir .deb a .rpm?")), QMessageBox::Ok, QMessageBox::No);
            }
            else
            {
                respuesta=QMessageBox::Ok;
            }
            if (respuesta == QMessageBox::Ok){

                    QString path="/home/%1/";
                    path=path.arg(user);
                    fileNameOrigen = QFileDialog::getOpenFileNames(this,QString::fromUtf8(tr("Abrir archivo(s) .deb")),
                                                                   path,trUtf8(tr("Archivo(s) .deb (*.deb)")));
                    if (fileNameOrigen.isEmpty())
                    {
                        ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                        return;
                    }
                    QString fileNameDirectori = QFileDialog::getExistingDirectory(this,QString::fromUtf8(tr("Donde guardar el fichero .rpm?")),path,QFileDialog::ShowDirsOnly);
                    if (fileNameDirectori.isEmpty())
                    {
                        ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                        return;
                    }
                    QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                    for (i=0;i<fileNameOrigen.count();i++)
                    {
                        ruta=fileNameOrigen.value(i);
                        QString fileName = ruta.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                        QString cm = QString::fromUtf8("echo realizando la conversion de "+fileName+"...");
                        QString cmd = "fakeroot alien -v -r -c %1";
                        cmd = cmd.arg(fileName);
                        comandos<< cm << cmd;
                    }
                    QString Path = QDir::currentPath();
                    system("mv '"+Path+"'/*.rpm '"+fileName1+"'");
                    QString cmd1 =QString::fromUtf8(tr("echo Archivo(s) ubicado(s) correctamente."));
                    comandos << cmd1;
                    if (mib != 0)
                        delete mib;
                    mib = new DrakeProcesos(comandos, this);
                    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                    int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                    else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
            }
    }
}

void recoverdrake::on_actionReconstruir_DB_de_los_rpm_s_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Reconstruir DB de los rpms.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Reconstruir DB de los rpms")),
                           QString::fromUtf8(tr("<center><b>Reconstruir DB de los rpms</b></center><p>"
                           "Con esta opcion reconstruimos toda la base de datos de "
                           "rpmś instalados en el sistema. Muy util cuando hay problemas "
                           "de localizacion de paquetes aun teniendolos instalados.<p>"
                           "Este proceso, puede tardar un tiempo, se paciente, "
                           "la espera lo merece.<p>"
                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"
                           "&iquest;Reconstruir DB?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
        respuesta=QMessageBox::Ok;
    if (respuesta == QMessageBox::Ok)
    {
            QString cm = QString::fromUtf8(tr("echo Reconstruyendo DB de rpms, puede demorarse un tiempo..."));
            QString cmd = "rpm --rebuilddb -vvv";
            QString cmd1 = QString::fromUtf8(tr("echo Reconstruccion de la DB de rpms completada"));
            QStringList comandos;
            comandos<<cm <<cmd << cmd1;
            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
            connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count();
            mib->Valor(valor,0);
            mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro);
            mib->iniciarProceso();
    }
    else
    {
        ui->tabWidget->setCurrentPage(pagina);
        ui->tabWidget_8->setCurrentPage(0);
        return;
    }
}

void recoverdrake::on_actionConvertir_cbr_a_pdf_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Conversion de .cbr a .pdf");
    Refrescar();
    if (unrar == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"unrar\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        if (imagemagick == "0")
        {
            QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"imagemagick\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
            m.exec();
        }
        else
        {
            int respuesta = 0;
            QStringList fileNameOrigen;
            int i;
            QStringList comandos;
            QString ruta;
            if (Mensaka!="Activo")
            {
                respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .cbr a .pdf")),
                                   QString::fromUtf8(tr("<center><b>Convertir formato .cbr a .pdf</b></center><p>"

                                   "Conversion de .cbr a .pdf<p>"

                                   "El formato .cbr, es en realidad un fichero comprimido de imagenes, por "
                                   "lo que para poder convertirlo a .pdf, es necesario descomprimir y volcarlo "
                                   "a la salida de .pdf<p>"

                                   "NOTA: El fichero resultante tendra el mismo nombre que el .cbr, pero "
                                   "con la extension y compatibilidad de un .pdf<p>"

                                   "Este proceso, puede tardar un tiempo, se paciente, "
                                   "la espera lo merece.<p>"

                                   "<B>NOTA: Debes esperar a que termine completamente el "
                                   "proceso seleccionado, el cual te sera notificado "
                                   "cuando finalice en la consola de procesos.</B><p>"

                                   "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
            }
            else
            {
                respuesta=QMessageBox::Ok;
            }
            if (respuesta == QMessageBox::Ok){

                    QString path="/home/%1/";
                    path=path.arg(user);
                    fileNameOrigen = QFileDialog::getOpenFileNames(this,QString::fromUtf8(tr("Abrir archivo(s) .cbr")),
                                        path,trUtf8(tr("Archivo(s) .cbr (*.cbr)")));
                    if (fileNameOrigen.isEmpty())
                    {
                        ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                        return;
                    }
                    QString cm =QString::fromUtf8(tr("echo Creando directorio temporal..."));
                    QString cmd = "su - %1 -c \"mkdir %2tmpcbr/\"";
                    cmd=cmd.arg(user).arg(path);
                    comandos<<cm << cmd;
                    for (i=0;i<fileNameOrigen.count();i++)
                    {
                        ruta=fileNameOrigen.value(i);
                        QString fileName=ruta.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".cbr","");
                        QString cd = QString::fromUtf8("echo Descomprimiendo formato y agrupando desde "+ruta+"...");
                        QString cmd1= "su - %1 -c \"cp -v %2.cbr %3tmpcbr/\"";
                        cmd1=cmd1.arg(user).arg(fileName).arg(path);
                        QString cmd2 = "su - %1 -c \"unrar e -y %2tmpcbr/*.cbr %2tmpcbr/\"";
                        cmd2=cmd2.arg(user).arg(path);
                        QString cm1=QString::fromUtf8("echo Conversion de "+ruta+" en proceso, por favor espera a que termine...");
                        QString cmd3= "su - %1 -c \"convert -verbose -monitor %2tmpcbr/*.jpg %3.pdf\"";
                        cmd3=cmd3.arg(user).arg(path).arg(fileName);
                        QString cm21=QString::fromUtf8(tr("echo Borrando ficheros temporales..."));
                        QString cmd41="su - %1 -c \"rm -vrf %2tmpcbr/*.*\"";
                        cmd41=cmd41.arg(user).arg(path);
                        comandos<<cd << cmd1 << cmd2 << cm1 << cmd3 << cm21 << cmd41;
                    }
                    QString cm2=QString::fromUtf8(tr("echo Borrando carpeta temporal..."));
                    QString cmd4="su - %1 -c \"rm -vrf %2tmpcbr\"";
                    cmd4=cmd4.arg(user).arg(path);
                    comandos<<cm2 << cmd4;
                    if (mib != 0)
                    delete mib;
                    mib = new DrakeProcesos(comandos, this);
                    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                    int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                    else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
        }
    }
}

void recoverdrake::on_actionConvertir_cbz_a_pdf_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Conversion de .cbz a .pdf");
    Refrescar();
    if (unzip == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"unzip\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        if (imagemagick == "0")
        {
            QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"imagemagick\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
            m.exec();
        }
        else
        {
            int respuesta = 0;
            QStringList fileNameOrigen;
            int i;
            QStringList comandos;
            QString ruta;
            if (Mensaka!="Activo")
            {
                respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .cbz a .pdf")),
                                   QString::fromUtf8(tr("<center><b>Convertir formato .cbz a .pdf</b></center><p>"

                                   "Conversion de .cbz a .pdf<p>"

                                   "El formato .cbz, es en realidad un fichero comprimido de imagenes, por "
                                   "lo que para poder convertirlo a .pdf, es necesario descomprimir y volcarlo "
                                   "a la salida de .pdf<p>"

                                   "NOTA: El fichero resultante tendra el mismo nombre que el .cbz, pero "
                                   "con la extension y compatibilidad de un .pdf<p>"

                                   "Este proceso, puede tardar un tiempo, se paciente, "
                                   "la espera lo merece.<p>"

                                   "<B>NOTA: Debes esperar a que termine completamente el "
                                   "proceso seleccionado, el cual te sera notificado "
                                   "cuando finalice en la consola de procesos.</B><p>"

                                   "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
            }
            else
            {
                respuesta=QMessageBox::Ok;
            }
            if (respuesta == QMessageBox::Ok){

                    QString path="/home/%1/";
                    path=path.arg(user);

                    fileNameOrigen = QFileDialog::getOpenFileNames(this,QString::fromUtf8(tr("Abrir archivo(s) .cbz")),
                                        path,trUtf8(tr("Archivo(s) .cbz (*.cbz)")));
                    if (fileNameOrigen.isEmpty())
                    {
                        ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                        return;
                    }
                    QString cm =QString::fromUtf8(tr("echo Creando directorio temporal..."));
                    QString cmd = "su - %1 -c \"mkdir %2tmpcbz/\"";
                    cmd=cmd.arg(user).arg(path);
                    comandos<<cm << cmd;
                    for (i=0;i<fileNameOrigen.count();i++)
                    {
                        ruta=fileNameOrigen.value(i);
                        QString fileName=ruta.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".cbz","");
                        QString cd =QString::fromUtf8("echo Descomprimiendo formato y agrupando desde "+ruta+"...");
                        QString cmd1= "su - %1 -c \"cp -v %2.cbz %3tmpcbz/\"";
                        cmd1=cmd1.arg(user).arg(fileName).arg(path);
                        QString cmd2 = "su - %1 -c \"unzip -v %2tmpcbz/*.cbz %2tmpcbz/\"";
                        cmd2=cmd2.arg(user).arg(path);
                        QString cm1=QString::fromUtf8("echo Conversion de "+ruta+" en proceso, por favor espera a que termine...");
                        QString cmd3= "su - %1 -c \"convert -verbose -monitor %2tmpcbz/*.jpg %3.pdf\"";
                        cmd3=cmd3.arg(user).arg(path).arg(fileName);
                        QString cm21=QString::fromUtf8(tr("echo Borrando ficheros temporales..."));
                        QString cmd41="su - %1 -c \"rm -vrf %2tmpcbz/*.*\"";
                        cmd41=cmd41.arg(user).arg(path);
                        comandos<<cd << cmd1 << cmd2 << cm1 << cmd3 << cm21 << cmd41;
                    }
                    QString cm2=QString::fromUtf8(tr("echo Borrando carpeta temporal..."));
                    QString cmd4="su - %1 -c \"rm -vrf %2tmpcbz\"";
                    cmd4=cmd4.arg(user).arg(path);
                    comandos<<cm2 << cmd4;
                    if (mib != 0)
                    delete mib;
                    mib = new DrakeProcesos(comandos, this);
                    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                    int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                    else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
        }
    }
}

void recoverdrake::on_actionCrear_gif_animados_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Creacion de gifs animados.");
    Refrescar();
    if (imagemagick == "0")
        {
            QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"imagemagick\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
            m.exec();
        }
    else
        {
            int respuesta = 0;
            QStringList comandos;
            if (Mensaka!="Activo")
            {
                respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Crear gif animado")),
                                   QString::fromUtf8(tr("<center><b>Crear gif animado</b></center><p>"

                                   "Con esta funcion conseguiremo crear una secuencia de imagenes "
                                   "para poder realizar un gif animado como tantos que hay en Internet<p>"

                                   "Este proceso, puede tardar un tiempo, se paciente, "
                                   "la espera lo merece.<p>"

                                   "Ten en cuenta que las imagenes de origen tiene que ser "
                                   "en formato de imagen de cualquier formato estandar y es interesante "
                                   "que tengan la misma resolucion o no se vera con calidad.<p>"

                                   "<B>NOTA: Debes esperar a que termine completamente el "
                                   "proceso seleccionado, el cual te sera notificado "
                                   "cuando finalice en la consola de procesos.</B><p>"

                                   "&iquest;Crear gif animado?")), QMessageBox::Ok, QMessageBox::No);
            }
            else
            {
                respuesta=QMessageBox::Ok;
            }
            if (respuesta == QMessageBox::Ok){

                    QString path="/home/%1/";
                    path=path.arg(user);
                    Localizador *Locate=new Localizador(this);
                    Locate->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                    Locate->showMaximized();
                    Locate->exec();
                    QString Loc=Locate->Local;
                    if (Loc == "")
                    {
                        ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                        return;
                    }
                    else if (Loc != "")
                    {
                        QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el gif animado")),
                                            path,trUtf8(tr("Archivos de animaciones (*.gif)")));
                        if (fileNameDirectori.isEmpty())
                        {
                            ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                            return;
                        }
                        Loc = Loc.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace("(","\\(").replace(")","\\)");
                        QString fileName1=fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".gif","");
                        QString cm1=QString::fromUtf8(tr("echo Conversion en proceso, por favor espera a que termine..."));
                        QString cmd3= "su - %1 -c \"convert -verbose -monitor -delay 100 -loop 0 \"%2\" %3.gif\"";
                        cmd3=cmd3.arg(user).arg(Loc).arg(fileName1);
                        comandos<< cm1 << cmd3;
                        if (mib != 0)
                        delete mib;
                        mib = new DrakeProcesos(comandos, this);
                        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                        connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                    }                    
        }
}

void recoverdrake::on_actionPartir_archivos_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Partir archivos.");
    Refrescar();
    if (dalle == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"dalle\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        QStringList fileNameOrigen;
        int i;
        QStringList comandos;
        QString ruta;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Partir archivos")),
                               QString::fromUtf8(tr("<center><b>Partir archivos</b></center><p>"

                               "Mediante esta utilidad podemos partir (split) ficheros al estilo "
                               "Hacha en todos sus sabores e incluso partirlos con otros programas "
                               "similares como Hjsplit, por poner un ejemplo.<p>"

                               "Para poder configurar la forma en que se partira el fichero "
                               "debe ir al menu principal/opciones y configurarlo personalmente, ya que "
                               "por defecto se partira con la compatibilidad de HachaPro y en trozos de "
                               "200 Megas.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Partir archivos?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path="/home/%1/";
                path=path.arg(user);
                fileNameOrigen = QFileDialog::getOpenFileNames(this,QString::fromUtf8(tr("Abrir archivo(s) original(es)")),
                                    path,trUtf8(tr("Todos los archivos (*.*)")));
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileNameDirectori = QFileDialog::getExistingDirectory(this,QString::fromUtf8(tr("Donde guardar los ficheros partidos?")),path,QFileDialog::ShowDirsOnly);
                if (fileNameDirectori.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                for (i=0;i<fileNameOrigen.count();i++)
                {
                    ruta=fileNameOrigen.value(i);
                    QString fileName = ruta.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                    QString cm =QString::fromUtf8("echo Partiendo archivo "+fileName+"...");
                    QString cmd = "su - %1 -c \"dalle-console -s -f=%2 -t=%3 %4 -d=%5\"";
                    cmd=cmd.arg(user).arg(split).arg(talla).arg(fileName).arg(fileName1);
                    comandos <<cm << cmd;
                }
                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionUnir_archivos_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Unir archivos.");
    Refrescar();
    if (dalle == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"dalle\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        QString fileNameOrigen;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Unir archivos")),
                               QString::fromUtf8(tr("<center><b>Unir archivos</b></center><p>"

                               "Mediante esta utilidad podemos unir ficheros cortados con el famoso "
                               "Hacha en todos sus sabores e incluso los cortados con otros programas "
                               "similares como Hjsplit, por poner un ejemplo.<p>"

                               "Se tiene que coger el fichero de inicio, por ejemplo si hay fichero con la "
                               "extension .001,.002,etc. se debe coger el primero solo. Tambien sirve con otras "
                               "extensiones, siempre que se coga el primer numero de cada extension.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Unir archivos?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path="/home/%1/";
                path=path.arg(user);

                fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo cortados")),
                                    path,trUtf8(tr("Todos los archivos (*.*)")));
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileNameDirectori = QFileDialog::getExistingDirectory(this,QString::fromUtf8(tr("Donde guardar el fichero final?")),path,QFileDialog::ShowDirsOnly);
                if (fileNameDirectori.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString cm1=QString::fromUtf8(tr("echo Uniendo archivos..."));
                QString cm = "su - %1 -c \"dalle-console -i %2\"";
                cm = cm.arg(user).arg(fileName);
                QString cmd = "su - %1 -c \"dalle-console -j %2 -d=%3\"";
                cmd=cmd.arg(user).arg(fileName).arg(fileName1);
                QStringList comandos;
                comandos<< cm1 << cm << cmd;
                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionExtraer_audio_a_un_video_triggered()
{    
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Extraer audio de un video.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Extraer audio de un video")),
                               QString::fromUtf8(tr("<center><b>Extraer audio de un video</b></center><p>"

                               "Con esta utilidad puedes extraer un audio de un video "
                               "y dejar el video resultante sin audio.<p>"

                               "Se creara un fichero con el audio en mp3 en la misma ruta "
                               "que el fichero de video original.<p>"
                               "Se creara un fichero con el video sin audio.<p>"

                               "IMPORTANTE: El nombre del fichero a grabar debe expecificar "
                               "el tipo de extension. EJEMPLO: Nuevo_nombre<FONT COLOR=\"BLUE\"><b>.avi<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Extraer audio de video?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path="/home/%1/";
                path=path.arg(user);

                QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo de video")),
                                    path,trUtf8(tr("Archivos de video (*.avi *.mpg *.flv *.wmv)")));

                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero de video")),
                                    path,trUtf8(tr("Archivos de video (*.avi *.mpg *.flv *.wmv)")));

                if (fileNameDirectori.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString cm =QString::fromUtf8(tr("echo Informando el sistema de video y audio utilizado..."));
                QString info="su - %1 -c \"ffmpeg -i %2\"";
                info=info.arg(user).arg(fileName);
                QString cm1= QString::fromUtf8(tr("echo Extrayendo audio..."));
                QString cmd ="su - %1 -c \"ffmpeg -i %2 -y %2.mp3\"";
                cmd=cmd.arg(user).arg(fileName);
                QString cm2 =QString::fromUtf8(tr("echo Montando video sin audio..."));
                QString cmd1 = "su - %1 -c \"ffmpeg -i %2 -vcodec copy -an -y %3\"";
                cmd1=cmd1.arg(user).arg(fileName).arg(fileName1);
                QStringList comandos;
                comandos<<cm << info << cm1 << cmd << cm2 << cmd1;
                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionIncluir_audio_a_un_video_triggered()
{    
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: A&ntilde;adir audio a un video.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("A&ntilde;adir audio a un video")),
                               QString::fromUtf8(tr("<center><b>A&ntilde;adir audio a un video</b></center><p>"

                               "Con esta utilidad puedes A&ntilde;adir audio a un video.<p>"

                               "Se creara un fichero final con el nuevo video y audio.<p>"

                               "IMPORTANTE: El nombre del fichero a grabar debe de expecificar "
                               "el tipo de extension. EJEMPLO: Nuevo_nombre<FONT COLOR=\"BLUE\"><b>.avi<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;A&ntilde;adir audio a video?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path="/home/%1/";
                path=path.arg(user);
                QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo de video")),
                                    path,trUtf8(tr("Archivos de video (*.avi *.mpg *.flv *.wmv)")));
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileNameOrigen1 = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo de audio")),
                                    path,trUtf8(tr("Archivos de audio (*.mp3 *.ac3 *.wma *.wav)")));
                if (fileNameOrigen1.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileNameDestino = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero de video")),
                                    path,trUtf8(tr("Archivos de video (*.avi *.mpg *.flv *.wmv)")));
                if (fileNameDestino.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString fileName1 = fileNameOrigen1.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString fileName2 = fileNameDestino.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString cm=QString::fromUtf8(tr("echo Anadiendo audio a video inicial..."));
                QString cmd ="su - %1 -c \"ffmpeg -i %2 -i %3 -sameq -y %4\"";
                cmd=cmd.arg(user).arg(fileName1).arg(fileName).arg(fileName2);
                QStringList comandos;
                comandos<< cm << cmd;
                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionUnir_varios_video_en_uno_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Unir varios videos en uno.");
    Refrescar();
    if (mencoder == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"mencoder\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Unir varios videos en uno")),
                               QString::fromUtf8(tr("<center><b>Unir varios videos en uno</b></center><p>"

                               "Con esta utilidad puedes unir varios videos en un video final, los"
                               "cuales tienen que tener la misma extension. EJEMPLO: Video1.avi Video2.avi<p>"

                               "IMPORTANTE: El nombre del fichero a grabar debe de expecificar "
                               "el tipo de extension. EJEMPLO: Nuevo_nombre<FONT COLOR=\"BLUE\"><b>.avi<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Unir varios videos en uno?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok)
        {
                int i;
                QString file;
                QString fileName;
                QString path="/home/%1/";
                path=path.arg(user);
                QStringList fileNameOrigen = QFileDialog::getOpenFileNames(this,QString::fromUtf8(tr("Abrir archivos de video")),
                                    path,trUtf8(tr("Archivos de video (*.avi *.mpg *.flv *.wmv)")));

                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                for(i=0;i<fileNameOrigen.count();i++ )
                {
                    file = fileNameOrigen.value(i);
                    fileName = file.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                    fileName = fileNameOrigen.join(" ");
                }

                QString fileNameDestino = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero de video")),
                                    path,trUtf8(tr("Archivos de video (*.avi *.mpg *.flv *.wmv)")));
                if (fileNameDestino.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName2 = fileNameDestino.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString cm =QString::fromUtf8(tr("echo Uniendo videos en uno..."));
                QString cmd ="su - %1 -c \"mencoder -forceidx -oac copy -ovc copy -o %3 %2\"";
                cmd=cmd.arg(user).arg(fileName).arg(fileName2);
                QStringList comandos;
                comandos<< cm << cmd;
                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionMp3_wma_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .mp3 a .wma.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .mp3 a .wma")),
                               QString::fromUtf8(tr("<center><b>Convertir formato .mp3 a .wma</b></center><p>"

                               "Conversion de .mp3 a .wma<p>"

                               "Solo se puede convertir un fichero por vez.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path="/home/%1/";
                path=path.arg(user);
                QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .mp3")),
                                    path,trUtf8(tr("Archivo .mp3 (*.mp3)")));
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero .wma?")),
                                    path,trUtf8(tr("Archivo .wma (*.wma)")));
                if (fileNameDirectori.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".wma","");
                QString cm=QString::fromUtf8(tr("echo Conversion en proceso..."));
                QString cmd1 = "su - %1 -c \"ffmpeg -i %2 -ab %3 -y %4.wma\"";
                cmd1=cmd1.arg(user).arg(fileName).arg(Audio).arg(fileName1);
                QStringList comandos;
                comandos<< cm << cmd1;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionMp3_wav_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .mp3 a .wav.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .mp3 a .wav")),
                               QString::fromUtf8(tr("<center><b>Convertir formato .mp3 a .wav</b></center><p>"

                               "Conversion de .mp3 a .wav<p>"

                               "Solo se puede convertir un fichero por vez.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path="/home/%1/";
                path=path.arg(user);
                QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .mp3")),
                                    path,trUtf8(tr("Archivo .mp3 (*.mp3)")));
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero .wav?")),
                                    path,trUtf8(tr("Archivo .wav (*.wav)")));
                if (fileNameDirectori.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".wav","");
                QString cm=QString::fromUtf8(tr("echo Conversion en proceso..."));
                QString cmd1 = "su - %1 -c \"ffmpeg -i %2 -ab %3 -y %4.wav\"";
                cmd1=cmd1.arg(user).arg(fileName).arg(Audio).arg(fileName1);
                QStringList comandos;
                comandos<< cm << cmd1;
                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionMp3_ac3_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .mp3 a .ac3.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .mp3 a .ac3")),
                               QString::fromUtf8(tr("<center><b>Convertir formato .mp3 a .ac3</b></center><p>"

                               "Conversion de .mp3 a .ac3<p>"

                               "Solo se puede convertir un fichero por vez.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path="/home/%1/";
                path=path.arg(user);
                QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .mp3")),
                                    path,trUtf8(tr("Archivo .mp3 (*.mp3)")));
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero .ac3?")),
                                    path,trUtf8(tr("Archivo .ac3 (*.ac3)")));
                if (fileNameDirectori.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".ac3","");
                QString cm=QString::fromUtf8(tr("echo Conversion en proceso..."));
                QString cmd1 = "su - %1 -c \"ffmpeg -i %2 -ab %3 -y %4.ac3\"";
                cmd1=cmd1.arg(user).arg(fileName).arg(Audio).arg(fileName1);
                QStringList comandos;
                comandos<< cm << cmd1;
                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionWma_mp3_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .wma a .mp3.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .wma a .mp3")),
                               QString::fromUtf8(tr("<center><b>Convertir formato .wma a .mp3</b></center><p>"

                               "Conversion de .wma a .mp3<p>"

                               "Solo se puede convertir un fichero por vez.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path="/home/%1/";
                path=path.arg(user);
                QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .wma")),
                                    path,trUtf8(tr("Archivo .wma (*.wma)")));
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero .mp3?")),
                                    path,trUtf8(tr("Archivo .mp3 (*.mp3)")));
                if (fileNameDirectori.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".mp3","");
                QString cm=QString::fromUtf8(tr("echo Conversion en proceso..."));
                QString cmd1 = "su - %1 -c \"ffmpeg -i %2 -ab %3 -y %4.mp3\"";
                cmd1=cmd1.arg(user).arg(fileName).arg(Audio).arg(fileName1);
                QStringList comandos;
                comandos<< cm << cmd1;
                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionWma_wav_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .wma a .wav.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .wma a .wav")),
                               QString::fromUtf8(tr("<center><b>Convertir formato .wma a .wav</b></center><p>"

                               "Conversion de .wma a .wav<p>"

                               "Solo se puede convertir un fichero por vez.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
        if (respuesta == QMessageBox::Ok){

                QString path="/home/%1/";
                path=path.arg(user);
                QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .wma")),
                                    path,trUtf8(tr("Archivo .wma (*.wma)")));
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero .wav?")),
                                    path,trUtf8(tr("Archivo .wav (*.wav)")));
                if (fileNameDirectori.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".wav","");
                QString cm=QString::fromUtf8(tr("echo Conversion en proceso..."));
                QString cmd1 = "su - %1 -c \"ffmpeg -i %2 -ab %3 -y %4.wav\"";
                cmd1=cmd1.arg(user).arg(fileName).arg(Audio).arg(fileName1);
                QStringList comandos;
                comandos<< cm << cmd1;
                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionWma_ac3_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .wma a .ac3.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .wma a .ac3")),
                               QString::fromUtf8(tr("<center><b>Convertir formato .wma a .ac3</b></center><p>"

                               "Conversion de .wma a .ac3<p>"

                               "Solo se puede convertir un fichero por vez.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path="/home/%1/";
                path=path.arg(user);
                QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .wma")),
                                    path,trUtf8(tr("Archivo .wma (*.wma)")));
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero .wav?")),
                                    path,trUtf8(tr("Archivo .ac3 (*.ac3)")));
                if (fileNameDirectori.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".ac3","");
                QString cm=QString::fromUtf8(tr("echo Conversion en proceso..."));
                QString cmd1 = "su - %1 -c \"ffmpeg -i %2 -ab %3 -y %4.ac3\"";
                cmd1=cmd1.arg(user).arg(fileName).arg(Audio).arg(fileName1);
                QStringList comandos;
                comandos<< cm << cmd1;
                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
     }
}

void recoverdrake::on_actionCda_mp3_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .cda a .mp3.");
    Refrescar();
    if (zenity == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"zenity\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        if (cdparanoia == "0")
        {
            QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"zenity\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
            m.exec();
        }
            else
            {
            system("eject");
            QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr(QString::fromUtf8("Introduce el medio a ripear.<p>" "Pulsa Ok para continuar...")));
            m.exec();
            system("eject -t");
            QMessageBox mA; if (Stilo == "A") mA.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            mA.setText(tr("Espera a que el notificador de dispositivos te avise de que esta cargado el disco y pulse Ok para continuar."));
            mA.exec();
            int respuesta = 0;
            if (Mensaka!="Activo")
            {
                respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .cda a .mp3")),
                                   QString::fromUtf8(tr("<center><b>Convertir formato .cda a .mp3</b></center><p>"

                                   "Esta utilidad sirve para poder ripear un CD original "
                                   "y transformarlo para poder ser oido en tu equipo o en "
                                   "cualquier soporte que reproduzca mp3.<p>"

                                   "Este proceso, puede tardar un tiempo, se paciente, "
                                   "la espera lo merece.<p>"

                                   "<B>NOTA: Debes esperar a que termine completamente el "
                                   "proceso seleccionado, el cual te sera notificado "
                                   "cuando finalice en la consola de procesos.</B><p>"

                                   "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
            }
            else
            {
                respuesta=QMessageBox::Ok;
            }
            if (respuesta == QMessageBox::Ok){

                    QString cmd = QString::fromUtf8(tr("echo Ripeando CD..."));
                    QString cmd1 = "su - %1 -c \"cdparanoia -vsZB\"";
                    cmd1=cmd1.arg(user);
                    QString cmd2 = QString::fromUtf8(tr("echo Moviendo y convirtiendo a destino selecionado..."));
                    QString cmd3 = "su - %1 -c \"RecoverMovemp3\"";
                    cmd3=cmd3.arg(user);
                    QStringList comandos;
                    comandos<< cmd << cmd1 << cmd2 << cmd3;
                    if (mib != 0)
                    delete mib;
                    mib = new DrakeProcesos(comandos, this);
                    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                    int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                    else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
            }
    }
}

void recoverdrake::on_actionCda_wma_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .cda a .wma.");
    Refrescar();
    if (zenity == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"zenity\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        if (cdparanoia == "0")
        {
            QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"zenity\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
            m.exec();
        }
            else
            {
            system("eject");
            QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr(QString::fromUtf8("Introduce el medio a ripear.<p>" "Pulsa Ok para continuar...")));
            m.exec();
            system("eject -t");
            QMessageBox mA; if (Stilo == "A") mA.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            mA.setText(tr("Espera a que el notificador de dispositivos te avise de que esta cargado el disco y pulse Ok para continuar."));
            mA.exec();
            int respuesta = 0;
            if (Mensaka!="Activo")
            {
                respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .cda a .wma")),
                                   QString::fromUtf8(tr("<center><b>Convertir formato .cda a .wma</b></center><p>"

                                   "Esta utilidad sirve para poder ripear un CD original "
                                   "y transformarlo para poder ser oido en tu equipo o en "
                                   "cualquier soporte que reproduzca wma.<p>"

                                   "Este proceso, puede tardar un tiempo, se paciente, "
                                   "la espera lo merece.<p>"

                                   "<B>NOTA: Debes esperar a que termine completamente el "
                                   "proceso seleccionado, el cual te sera notificado "
                                   "cuando finalice en la consola de procesos.</B><p>"

                                   "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
            }
            else
            {
                respuesta=QMessageBox::Ok;
            }
            if (respuesta == QMessageBox::Ok){

                    QString cmd = QString::fromUtf8(tr("echo Ripeando CD..."));
                    QString cmd1 = "su - %1 -c \"cdparanoia -vsZB\"";
                    cmd1=cmd1.arg(user);
                    QString cmd2 = QString::fromUtf8("echo Moviendo y convirtiendo a destino selecionado...");
                    QString cmd3 = "su - %1 -c \"RecoverMovewma\"";
                    cmd3=cmd3.arg(user);
                    QStringList comandos;
                    comandos<< cmd << cmd1 << cmd2 << cmd3;
                    if (mib != 0)
                    delete mib;
                    mib = new DrakeProcesos(comandos, this);
                    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                    int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                    else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
            }
    }
}

void recoverdrake::on_actionCda_wav_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .cda a .wav.");
    Refrescar();
    if (zenity == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"zenity\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        if (cdparanoia == "0")
        {
            QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"zenity\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
            m.exec();
        }
            else
            {
            system("eject");
            QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr(QString::fromUtf8("Introduce el medio a ripear.<p>" "Pulsa Ok para continuar...")));
            m.exec();
            system("eject -t");
            QMessageBox mA; if (Stilo == "A") mA.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            mA.setText(tr("Espera a que el notificador de dispositivos te avise de que esta cargado el disco y pulse Ok para continuar."));
            mA.exec();
            int respuesta = 0;
            if (Mensaka!="Activo")
            {
                respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .cda a .wav")),
                                   QString::fromUtf8(tr("<center><b>Convertir formato .cda a .wav</b></center><p>"

                                   "Esta utilidad sirve para poder ripear un CD original "
                                   "y transformarlo para poder ser oido en tu equipo o en "
                                   "cualquier soporte que reproduzca wav.<p>"

                                   "Este proceso, puede tardar un tiempo, se paciente, "
                                   "la espera lo merece.<p>"

                                   "<B>NOTA: Debes esperar a que termine completamente el "
                                   "proceso seleccionado, el cual te sera notificado "
                                   "cuando finalice en la consola de procesos.</B><p>"

                                   "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
            }
            else
            {
                respuesta=QMessageBox::Ok;
            }
            if (respuesta == QMessageBox::Ok){

                    QString cmd = QString::fromUtf8(tr("echo Ripeando CD..."));
                    QString cmd1 = "su - %1 -c \"cdparanoia -vsZB\"";
                    cmd1=cmd1.arg(user);
                    QString cmd2 = QString::fromUtf8(tr("echo Moviendo a destino selecionado..."));
                    QString cmd3 = "su - %1 -c \"RecoverMove\"";
                    cmd3=cmd3.arg(user);
                    QStringList comandos;
                    comandos<< cmd << cmd1 << cmd2 << cmd3;
                    if (mib != 0)
                    delete mib;
                    mib = new DrakeProcesos(comandos, this);
                    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                    int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                    else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
            }
    }
}

void recoverdrake::on_actionCda_ac3_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .cda a .ac3.");
    Refrescar();
    if (zenity == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"zenity\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        if (cdparanoia == "0")
        {
            QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"zenity\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
            m.exec();
        }
            else
            {
            system("eject");
            QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr(QString::fromUtf8("Introduce el medio a ripear.<p>" "Pulsa Ok para continuar...")));
            m.exec();
            system("eject -t");
            QMessageBox mA; if (Stilo == "A") mA.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            mA.setText(tr("Espera a que el notificador de dispositivos te avise de que esta cargado el disco y pulse Ok para continuar."));
            mA.exec();
            int respuesta = 0;
            if (Mensaka!="Activo")
            {
                respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .cda a .ac3")),
                                   QString::fromUtf8(tr("<center><b>Convertir formato .cda a .ac3</b></center><p>"

                                   "Esta utilidad sirve para poder ripear un CD original "
                                   "y transformarlo para poder ser oido en tu equipo o en "
                                   "cualquier soporte que reproduzca ac3.<p>"

                                   "Este proceso, puede tardar un tiempo, se paciente, "
                                   "la espera lo merece.<p>"

                                   "<B>NOTA: Debes esperar a que termine completamente el "
                                   "proceso seleccionado, el cual te sera notificado "
                                   "cuando finalice en la consola de procesos.</B><p>"

                                   "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
            }
            else
            {
                respuesta=QMessageBox::Ok;
            }
            if (respuesta == QMessageBox::Ok){

                    QString cmd = QString::fromUtf8(tr("echo Ripeando CD..."));
                    QString cmd1 = "su - %1 -c \"cdparanoia -vsZB\"";
                    QString cmd2 = QString::fromUtf8(tr("echo Moviendo y convirtiendo a destino selecionado..."));
                    QString cmd3 = "su - %1 -c \"RecoverMoveac3\"";
                    cmd3=cmd3.arg(user);
                    QStringList comandos;
                    comandos<< cmd << cmd1 << cmd2 << cmd3;
                    if (mib != 0)
                    delete mib;
                    mib = new DrakeProcesos(comandos, this);
                    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                    int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                    else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
            }
    }
}

void recoverdrake::on_actionWav_wma_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .wav a .wma.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .wav a .wma")),
                               QString::fromUtf8(tr("<center><b>Convertir formato .wav a .wma</b></center><p>"

                               "Conversion de .wav a .wma<p>"

                               "Solo se puede convertir un fichero por vez.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path="/home/%1/";
                path=path.arg(user);
                QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .wav")),
                                    path,trUtf8(tr("Archivo .wav (*.wav)")));
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero .wma?")),
                                    path,trUtf8(tr("Archivo .wma (*.wma)")));
                if (fileNameDirectori.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".wma","");
                QString cm=QString::fromUtf8(tr("echo Conversion en proceso..."));
                QString cmd1 = "su - %1 -c \"ffmpeg -i %2 -ab %3 -y %4.wma\"";
                cmd1=cmd1.arg(user).arg(fileName).arg(Audio).arg(fileName1);
                QStringList comandos;
                comandos<< cm << cmd1;
                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionWav_mp3_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .wav a .mp3.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .wav a .mp3")),
                               QString::fromUtf8(tr("<center><b>Convertir formato .wav a .mp3</b></center><p>"

                               "Conversion de .wav a .mp3<p>"

                               "Solo se puede convertir un fichero por vez.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path="/home/%1/";
                path=path.arg(user);

                QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .wav")),
                                    path,trUtf8(tr("Archivo .wav (*.wav)")));
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero .mp3?")),
                                    path,trUtf8(tr("Archivo .mp3 (*.mp3)")));
                if (fileNameDirectori.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".mp3","");
                QString cm=QString::fromUtf8(tr("echo Conversion en proceso..."));
                QString cmd1 = "su - %1 -c \"ffmpeg -i %2 -ab %3 -y %4.mp3\"";
                cmd1=cmd1.arg(user).arg(fileName).arg(Audio).arg(fileName1);
                QStringList comandos;
                comandos<< cm << cmd1;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionWav_ac3_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .wav a .ac3.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .wav a .ac3")),
                               QString::fromUtf8(tr("<center><b>Convertir formato .wav a .ac3</b></center><p>"

                               "Conversion de .wav a .ac3<p>"

                               "Solo se puede convertir un fichero por vez.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path="/home/%1/";
                path=path.arg(user);

                QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .wav")),
                                    path,trUtf8(tr("Archivo .wav (*.wav)")));
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero .ac3?")),
                                    path,trUtf8(tr("Archivo .ac3 (*.ac3)")));
                if (fileNameDirectori.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".ac3","");
                QString cm=QString::fromUtf8(tr("echo Conversion en proceso..."));
                QString cmd1 = "su - %1 -c \"ffmpeg -i %2 -ab %3 -y %4.ac3\"";
                cmd1=cmd1.arg(user).arg(fileName).arg(Audio).arg(fileName1);
                QStringList comandos;
                comandos<< cm << cmd1;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionAc3_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .ac3 a .wma.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .ac3 a .wma")),
                               QString::fromUtf8(tr("<center><b>Convertir formato .ac3 a .wma</b></center><p>"

                               "Conversion de .ac3 a .wma<p>"

                               "Solo se puede convertir un fichero por vez.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path="/home/%1/";
                path=path.arg(user);

                QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .ac3")),
                                    path,trUtf8(tr("Archivo .ac3 (*.ac3)")));
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero .wma?")),
                                    path,trUtf8(tr("Archivo .wma (*.wma)")));
                if (fileNameDirectori.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".wma","");
                QString cm=QString::fromUtf8(tr("echo Conversion en proceso..."));
                QString cmd1 = "su - %1 -c \"ffmpeg -i %2 -ab %3 -y %4.wma\"";
                cmd1=cmd1.arg(user).arg(fileName).arg(Audio).arg(fileName1);
                QStringList comandos;
                comandos<< cm << cmd1;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionAc3_mp3_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .ac3 a .mp3.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .ac3 a .mp3")),
                               QString::fromUtf8(tr("<center><b>Convertir formato .ac3 a .mp3</b></center><p>"

                               "Conversion de .ac3 a .mp3<p>"

                               "Solo se puede convertir un fichero por vez.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path="/home/%1/";
                path=path.arg(user);

                QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .ac3")),
                                    path,trUtf8(tr("Archivo .ac3 (*.ac3)")));
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero .mp3?")),
                                    path,trUtf8(tr("Archivo .mp3 (*.mp3)")));
                if (fileNameDirectori.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".mp3","");
                QString cm=QString::fromUtf8(tr("echo Conversion en proceso..."));
                QString cmd1 = "su - %1 -c \"ffmpeg -i %2 -ab %3 -y %4.mp3\"";
                cmd1=cmd1.arg(user).arg(fileName).arg(Audio).arg(fileName1);
                QStringList comandos;
                comandos<< cm << cmd1;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionAc3_wav_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .ac3 a .wav.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .ac3 a .wav")),
                               QString::fromUtf8(tr("<center><b>Convertir formato .ac3 a .wav</b></center><p>"

                               "Conversion de .ac3 a .wav<p>"

                               "Solo se puede convertir un fichero por vez.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path="/home/%1/";
                path=path.arg(user);

                QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .ac3")),
                                    path,trUtf8(tr("Archivo .ac3 (*.ac3)")));
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero .wav?")),
                                    path,trUtf8(tr("Archivo .wav (*.wav)")));
                if (fileNameDirectori.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".wav","");
                QString cm=QString::fromUtf8(tr("echo Conversion en proceso..."));
                QString cmd1 = "su - %1 -c \"ffmpeg -i %2 -ab %3 -y %4.wav\"";
                cmd1=cmd1.arg(user).arg(fileName).arg(Audio).arg(fileName1);
                QStringList comandos;
                comandos<< cm << cmd1;
                if (mib != 0)
                    delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionAvi_HD_avi_Standar_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .avi HD a .avi Standar.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .avi HD a .avi Standard")),
                               QString::fromUtf8(tr("<center><b>Convertir formato .avi HD a .avi Standar</b></center><p>"

                               "Conversion de formatos avi HD (480p, 720p  y 1080p) a "
                               "formatos avi Standar antiguos.<p>"

                               "Solo se puede convertir un fichero por vez.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path="/home/%1/";
                path=path.arg(user);

                QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .avi")),
                                    path,trUtf8(tr("Archivo .avi (*.avi)")));
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero .avi?")),
                                    path,trUtf8(tr("Archivo .avi (*.avi)")));
                if (fileNameDirectori.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".avi","");
                QString cm=QString::fromUtf8(tr("echo Conversion en proceso..."));
                QString cmd1 = "su - %1 -c \"ffmpeg -i %2 -sameq -vcodec mpeg4 -vtag XVID -s %5 -acodec libmp3lame -ab %4 -y %3.avi\"";
                cmd1=cmd1.arg(user).arg(fileName).arg(fileName1).arg(Audio).arg(resolucion);
                QStringList comandos;
                comandos<< cm << cmd1;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionRecodificar_avi_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Recodificiar formato .avi.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Recodificar formato .avi")),
                               QString::fromUtf8(tr("<center><b>Recodificar formato .avi</b></center><p>"

                               "Recodificacion de formatos avi que no se visionan en "
                               "DVD casero, para compatibilidad 100%.<p>"

                               "Solo se puede convertir un fichero por vez.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path="/home/%1/";
                path=path.arg(user);
                QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .avi")),
                                    path,trUtf8(tr("Archivo .avi (*.avi)")));
                QFile file(fileNameOrigen);
                qint64 size = QFileInfo(file).size();
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el nuevo fichero .avi?")),
                                    path,trUtf8(tr("Archivo .avi (*.avi)")));
                if (fileNameDirectori.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".avi","");
                QString cm=QString::fromUtf8(tr("echo Reconversion en proceso..."));
                QString cmd1 = "su - %1 -c \"ffmpeg -i %2 -sameq -s %5 -acodec libmp3lame -ab %4 -ps %6 -y %3.avi\"";
                cmd1=cmd1.arg(user).arg(fileName).arg(fileName1).arg(Audio).arg(resolucion).arg(size);
                QStringList comandos;
                comandos<< cm << cmd1;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
        }
}

void recoverdrake::on_actionDesempaquetar_matroska_y_convertir_a_avi_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Desempaquetar matroska y convertir a .avi");
    Refrescar();
    if (mkvtoolnix == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"mkvtoolnix\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        if (ffmpeg == "0")
        {
            QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
            m.exec();
        }
        else
        {
            int respuesta = 0;
            if (Mensaka!="Activo")
            {
                respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Desempaquetar Matroska y convertir a avi")),
                                   QString::fromUtf8(tr("<center><b>Desempaquetar Matroska y convertir a avi</b></center><p>"

                                   "Desempaquetado de contenedor Matroska y conversion a formato avi.<p>"

                                   "Solo se puede convertir un fichero por vez.<p>"

                                   "Este proceso, puede tardar un tiempo, se paciente, "
                                   "la espera lo merece.<p>"

                                   "<B>NOTA: Debes esperar a que termine completamente el "
                                   "proceso seleccionado, el cual te sera notificado "
                                   "cuando finalice en la consola de procesos.</B><p>"

                                   "&iquest;Desempaquetar y convertir formato?")), QMessageBox::Ok, QMessageBox::No);
            }
            else
            {
                respuesta=QMessageBox::Ok;
            }
            if (respuesta == QMessageBox::Ok){

                    QString path="/home/%1/";
                    path=path.arg(user);

                    QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .mkv")),
                                        path,trUtf8(tr("Archivo .mkv (*.mkv)")));
                    if (fileNameOrigen.isEmpty())
                    {
                        ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                        return;
                    }
                    QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero .avi?")),
                                        path,trUtf8(tr("Archivo .avi (*.avi)")));
                    if (fileNameDirectori.isEmpty())
                    {
                        ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                        return;
                    }
                    QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                    QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".avi","");
                    QString ct =QString::fromUtf8(tr("echo Creando temporal. Por favor espera..."));
                    QString cm = "su - %1 -c \"cp -v %2 temp_mkv.mkv\"";
                    cm=cm.arg(user).arg(fileName);
                    QString ct1 =QString::fromUtf8(tr("echo Extrayendo matroska..."));
                    QString cmd = "su - %1 -c \"mkvextract tracks temp_mkv.mkv 1:temp_video.avi 2:temp_audio.ac3\"";
                    cmd=cmd.arg(user);
                    QString ct2 =QString::fromUtf8(tr("echo Creando video final..."));
                    QString cmd1 = "su - %1 -c \"ffmpeg -i temp_video.avi -i temp_audio.ac3 -sameq -vcodec copy -acodec copy -s %2 -y %3.avi\"";
                    cmd1=cmd1.arg(user).arg(resolucion).arg(fileName1);
                    QString ct3 =QString::fromUtf8(tr("echo Borrando temporales..."));
                    QString cmd2 ="su - %1 -c \"rm -vf temp_mkv.mkv temp_video.avi temp_audio.ac3\"";
                    cmd2=cmd2.arg(user);
                    QStringList comandos;
                    comandos<<ct <<cm << ct1 << cmd << ct2 << cmd1 << ct3<< cmd2;
                    if (mib != 0)
                    delete mib;
                    mib = new DrakeProcesos(comandos, this);
                    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                    int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                    else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
        }
    }
}

void recoverdrake::on_actionAvi_mpg_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .avi a .mpg.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .avi a .mpg")),
                               QString::fromUtf8(tr("<center><b>Convertir formato .avi a .mpg</b></center><p>"

                               "Conversion de formatos avi a formatos mpg.<p>"

                               "Solo se puede convertir un fichero por vez.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path="/home/%1/";
                path=path.arg(user);

                QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .avi")),
                                    path,trUtf8(tr("Archivo .avi (*.avi)")));
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero .mpg?")),
                                    path,trUtf8(tr("Archivo .mpg (*.mpg)")));
                if (fileNameDirectori.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".mpg","");
                QString cm=QString::fromUtf8(tr("echo Conversion en proceso..."));
                QString cmd1 = "su - %1 -c \"ffmpeg -i %2 -sameq -s %5 -acodec libmp3lame -ab %4 -y %3.mpg\"";
                cmd1=cmd1.arg(user).arg(fileName).arg(fileName1).arg(Audio).arg(resolucion);
                QStringList comandos;
                comandos<< cm << cmd1;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionAvi_dvd_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .avi a .DVD.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        if (dvdauthor == "0")
        {
            QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"dvdauthor\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
            m.exec();
        }
        else
        {
            int respuesta = 0;
            if (Mensaka!="Activo")
            {
                respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .avi a .dvd")),
                                   QString::fromUtf8(tr("<center><b>Convertir formato .avi a .dvd</b></center><p>"

                                   "Conversion de formatos avi a formatos dvd.<p>"

                                   "Solo se puede convertir un fichero por vez.<p>"

                                   "Este proceso, puede tardar un tiempo, se paciente, "
                                   "la espera lo merece.<p>"

                                   "<B>NOTA: Debes esperar a que termine completamente el "
                                   "proceso seleccionado, el cual te sera notificado "
                                   "cuando finalice en la consola de procesos.</B><p>"

                                   "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
            }
            else
            {
                respuesta=QMessageBox::Ok;
            }
            if (respuesta == QMessageBox::Ok){

                    QString path="/home/%1/";
                    path=path.arg(user);

                    QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .avi")),
                                        path,trUtf8(tr("Archivo .avi (*.avi)")));
                    if (fileNameOrigen.isEmpty())
                    {
                        ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                        return;
                    }
                    QString fileNameDirectori = QFileDialog::getExistingDirectory(this,QString::fromUtf8(tr("Donde guardar ficheros de dvd?")),path,QFileDialog::ShowDirsOnly);
                    if (fileNameDirectori.isEmpty())
                    {
                        ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                        return;
                    }
                    QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                    QString cm1=QString::fromUtf8(tr("echo Creando temporales..."));
                    QString cm = "su - %1 -c \"mkdir %2DVD_DATA\"";
                    cm=cm.arg(user).arg(path);
                    QString cm2=QString::fromUtf8(tr("echo Conversion en mpg..."));
                    QString cmd = "su - %1 -c \"ffmpeg -i %2 -sameq -s %4 -target pal-dvd -y %3/dvd.mpg";
                    cmd=cmd.arg(user).arg(fileName).arg(fileNameDirectori).arg(resolucion);
                    QString cm3=QString::fromUtf8(tr("echo Convirtiendo a DVD..."));
                    QString cmd1 = "su - %1 -c \"dvdauthor -o %2DVD_DATA/ -t %3/dvd.mpg";
                    cmd1=cmd1.arg(user).arg(path).arg(fileNameDirectori);
                    QString cm4=QString::fromUtf8(tr("echo Borrando temporales..."));
                    QString cmd2 = "su - %1 -c \"rm -vf %2/dvd.mpg\"";
                    cmd2=cmd2.arg(user).arg(fileNameDirectori);
                    QStringList comandos;
                    comandos<< cm1 << cm << cm2 << cmd << cm3 << cmd1 <<cm4 << cmd2;

                    if (mib != 0)
                    delete mib;
                    mib = new DrakeProcesos(comandos, this);
                    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                    int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                    else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
        }
    }
}

void recoverdrake::on_actionAVI_WMV_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .avi a .wmv.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .avi a .wmv")),
                               QString::fromUtf8(tr("<center><b>Convertir formato .avi a .wmv</b></center><p>"

                               "Conversion de formatos avi a formatos wmv.<p>"

                               "Solo se puede convertir un fichero por vez.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path="/home/%1/";
                path=path.arg(user);

                QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .avi")),
                                    path,trUtf8(tr("Archivo .avi (*.avi)")));
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero .wmv?")),
                                    path,trUtf8(tr("Archivo .wmv (*.wmv)")));
                if (fileNameDirectori.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".wmv","");
                QString cm=QString::fromUtf8(tr("echo Conversion en proceso..."));
                QString cmd1 = "su - %1 -c \"ffmpeg -i %2 -sameq -vcodec wmv2 -acodec wmav2 -s %4 -ab 448kb -y %3.wmv\"";
                cmd1=cmd1.arg(user).arg(fileName).arg(fileName1).arg(resolucion);
                QStringList comandos;
                comandos<< cm << cmd1;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionAvi_flv_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .avi a .flv.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .avi a .flv")),
                               QString::fromUtf8(tr("<center><b>Convertir formato .avi a .flv</b></center><p>"

                               "Conversion de formatos avi a formatos flv.<p>"

                               "Solo se puede convertir un fichero por vez.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path="/home/%1/";
                path=path.arg(user);

                QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .avi")),
                                    path,trUtf8(tr("Archivo .avi (*.avi)")));
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero .flv?")),
                                    path,trUtf8(tr("Archivo .flv (*.flv)")));
                if (fileNameDirectori.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".flv","");
                QString cm=QString::fromUtf8(tr("echo Conversion en proceso..."));
                QString cmd1 = "su - %1 -c \"ffmpeg -i %2 -sameq -threads 2 -r 30.00 -threads 1 -pix_fmt yuv420p -g 300 -qmin 3 -b 512k -async 50 -ar 11025 -ac 1 -s %5 -acodec libmp3lame -ab %3 -y %4.flv\"";
                cmd1=cmd1.arg(user).arg(fileName).arg(Audio).arg(fileName1).arg(resolucion);
                QStringList comandos;
                comandos<< cm << cmd1;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionAvi_3gp_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .avi a .3gp.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .avi a .3gp")),
                               QString::fromUtf8(tr("<center><b>Convertir formato .avi a .3gp</b></center><p>"

                               "Conversion de formatos avi a formatos 3gp.<p>"

                               "Solo se puede convertir un fichero por vez.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path="/home/%1/";
                path=path.arg(user);

                QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .avi")),
                                    path,trUtf8(tr("Archivo .avi (*.avi)")));
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero .3gp?")),
                                    path,trUtf8(tr("Archivo .3gp (*.3gp)")));
                if (fileNameDirectori.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".3gp","");
                QString cm=QString::fromUtf8(tr("echo Conversion en proceso..."));
                QString cmd1 = "su - %1 -c \"ffmpeg -i %2 -sameq -s qcif -r 12 -ac 1 -ar 8000 -b 30 -ab 12.2K -s %4 -y %3.3gp\"";
                cmd1=cmd1.arg(user).arg(fileName).arg(fileName1).arg(resolucion);
                QStringList comandos;
                comandos<< cm << cmd1;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionAvi_mp4_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .avi a .mp4.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .avi a .mp4")),
                               QString::fromUtf8(tr("<center><b>Convertir formato .avi a .mp4</b></center><p>"

                               "Conversion de formatos avi a formatos mp4.<p>"

                               "Solo se puede convertir un fichero por vez.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path="/home/%1/";
                path=path.arg(user);

                QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .avi")),
                                    path,trUtf8(tr("Archivo .avi (*.avi)")));
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero .mp4?")),
                                    path,trUtf8(tr("Archivo .mp4 (*.mp4)")));
                if (fileNameDirectori.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".mp4","");
                QString cm=QString::fromUtf8(tr("echo Conversion en proceso..."));
                QString cmd1 = "su - %1 -c \"ffmpeg -i %2 -sameq -s qcif -r 12 -ac 1 -ar 8000 -b 30 -ab 12.2K -s %4 -y %3.mp4\"";
                cmd1=cmd1.arg(user).arg(fileName).arg(fileName1).arg(resolucion);
                QStringList comandos;
                comandos<< cm << cmd1;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionMpg_avi_2_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .mpg a .avi.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .mpg a .avi")),
                               QString::fromUtf8(tr("<center><b>Convertir formato .mpg a .avi</b></center><p>"

                               "Conversion de formatos mpg a formatos avi.<p>"

                               "Solo se puede convertir un fichero por vez.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path="/home/%1/";
                path=path.arg(user);

                QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .mpg")),
                                    path,trUtf8(tr("Archivo .mpg (*.mpg)")));
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero .avi?")),
                                    path,trUtf8(tr("Archivo .avi (*.avi)")));
                if (fileNameDirectori.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".avi","");
                QString cm=QString::fromUtf8(tr("echo Conversion en proceso..."));
                QString cmd1 = "su - %1 -c \"ffmpeg -i %2 -sameq -s %5 -acodec libmp3lame -ab %4 -y %3.avi\"";
                cmd1=cmd1.arg(user).arg(fileName).arg(fileName1).arg(Audio).arg(resolucion);
                QStringList comandos;
                comandos<< cm << cmd1;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionMpg_dvd_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .mpg a .DVD.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        if (dvdauthor == "0")
        {
            QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"dvdauthor\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
            m.exec();
        }
        else
        {
            int respuesta = 0;
            if (Mensaka!="Activo")
            {
                respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .mpg a .dvd")),
                                   QString::fromUtf8(tr("<center><b>Convertir formato .mpg a .dvd</b></center><p>"

                                   "Conversion de formatos mpg a formatos DVD.<p>"

                                   "Solo se puede convertir un fichero por vez.<p>"

                                   "Este proceso, puede tardar un tiempo, se paciente, "
                                   "la espera lo merece.<p>"

                                   "<B>NOTA: Debes esperar a que termine completamente el "
                                   "proceso seleccionado, el cual te sera notificado "
                                   "cuando finalice en la consola de procesos.</B><p>"

                                   "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
            }
            else
            {
                respuesta=QMessageBox::Ok;
            }
            if (respuesta == QMessageBox::Ok){

                    QString path="/home/%1/";
                    path=path.arg(user);

                    QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .mpg")),
                                        path,trUtf8(tr("Archivo .mpg (*.mpg)")));
                    if (fileNameOrigen.isEmpty())
                    {
                        ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                        return;
                    }
                    QString fileNameDirectori = QFileDialog::getExistingDirectory(this,QString::fromUtf8(tr("Donde guardar ficheros de dvd?")),path,QFileDialog::ShowDirsOnly);
                    if (fileNameDirectori.isEmpty())
                    {
                        ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                        return;
                    }
                    QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                    QString cm1=QString::fromUtf8(tr("echo Creando temporales..."));
                    QString cm = "su - %1 -c \"mkdir %2DVD_DATA\"";
                    cm=cm.arg(user).arg(path);
                    QString cm2=QString::fromUtf8(tr("echo Conversion en mpg..."));
                    QString cmd = "su - %1 -c \"ffmpeg -i %2 -sameq -s %4 -target pal-dvd -y %3/dvd.mpg";
                    cmd=cmd.arg(user).arg(fileName).arg(fileNameDirectori).arg(resolucion);
                    QString cm3=QString::fromUtf8(tr("echo Convirtiendo a DVD..."));
                    QString cmd1 = "su - %1 -c \"dvdauthor -o %2DVD_DATA/ -t %3/dvd.mpg\"";
                    cmd1=cmd1.arg(user).arg(path).arg(fileNameDirectori);
                    QString cm4=QString::fromUtf8(tr("echo Borrando temporales..."));
                    QString cmd2 = "su - %1 -c \"rm -vf %2/dvd.mpg\"";
                    cmd2=cmd2.arg(user).arg(fileNameDirectori);
                    QStringList comandos;
                    comandos<< cm1 << cm << cm2 << cmd << cm3 << cmd1 <<cm4 << cmd2;

                    if (mib != 0)
                    delete mib;
                    mib = new DrakeProcesos(comandos, this);
                    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                    int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                    else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
        }
    }
}

void recoverdrake::on_actionMPG_WMV_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .mpg a .wmv.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .mpg a .wmv")),
                               QString::fromUtf8(tr("<center><b>Convertir formato .mpg a .wmv</b></center><p>"

                               "Conversion de formatos mpg a formatos wmv.<p>"

                               "Solo se puede convertir un fichero por vez.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path="/home/%1/";
                path=path.arg(user);

                QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .mpg")),
                                    path,trUtf8(tr("Archivo .mpg (*.mpg)")));
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero .wmv?")),
                                    path,trUtf8(tr("Archivo .wmv (*.wmv)")));
                if (fileNameDirectori.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".wmv","");
                QString cm=QString::fromUtf8(tr("echo Conversion en proceso..."));
                QString cmd1 = "su - %1 -c \"ffmpeg -i %2 -sameq -vcodec wmv2 -acodec wmav2 -s %4 -ab 448kb -y %3.wmv\"";
                cmd1=cmd1.arg(user).arg(fileName).arg(fileName1).arg(resolucion);
                QStringList comandos;
                comandos<< cm << cmd1;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionMpg_flv_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .mpg a .flv.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .mpg a .flv")),
                               QString::fromUtf8(tr("<center><b>Convertir formato .mpg a .flv</b></center><p>"

                               "Conversion de formatos mpg a formatos flv.<p>"

                               "Solo se puede convertir un fichero por vez.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path="/home/%1/";
                path=path.arg(user);

                QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .mpg")),
                                    path,trUtf8(tr("Archivo .mpg (*.mpg)")));
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero .flv?")),
                                    path,trUtf8(tr("Archivo .flv (*.flv)")));
                if (fileNameDirectori.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".flv","");
                QString cm=QString::fromUtf8(tr("echo Conversion en proceso..."));
                QString cmd1 = "su - %1 -c \"ffmpeg -i %2 -sameq -threads 2 -r 30.00 -threads 1 -pix_fmt yuv420p -g 300 -qmin 3 -b 512k -async 50 -ar 11025 -ac 1 -s %4 -acodec libmp3lame -ab 128kb -y %3.flv\"";
                cmd1=cmd1.arg(user).arg(fileName).arg(fileName1).arg(resolucion);
                QStringList comandos;
                comandos<< cm << cmd1;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionMpg_3gp_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .mpg a .3gp.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .mpg a .3gp")),
                               QString::fromUtf8(tr("<center><b>Convertir formato .mpg a .3gp</b></center><p>"

                               "Conversion de formatos mpg a formatos 3gp.<p>"

                               "Solo se puede convertir un fichero por vez.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path="/home/%1/";
                path=path.arg(user);

                QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .mpg")),
                                    path,trUtf8(tr("Archivo .mpg (*.mpg)")));
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero .3gp?")),
                                    path,trUtf8(tr("Archivo .3gp (*.3gp)")));
                if (fileNameDirectori.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".3gp","");
                QString cm=QString::fromUtf8(tr("echo Conversion en proceso..."));
                QString cmd1 = "su - %1 -c \"ffmpeg -i %2 -sameq -s qcif -r 12 -ac 1 -ar 8000 -b 30 -ab 12.2K -s %4 -y %3.3gp\"";
                cmd1=cmd1.arg(user).arg(fileName).arg(fileName1).arg(resolucion);
                QStringList comandos;
                comandos<< cm << cmd1;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionMpg_mp4_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .mpg a .mp4.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .mpg a .mp4")),
                               QString::fromUtf8(tr("<center><b>Convertir formato .mpg a .mp4</b></center><p>"

                               "Conversion de formatos mpg a formatos mp4.<p>"

                               "Solo se puede convertir un fichero por vez.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path="/home/%1/";
                path=path.arg(user);

                QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .mpg")),
                                    path,trUtf8(tr("Archivo .mpg (*.mpg)")));
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero .mp4?")),
                                    path,trUtf8(tr("Archivo .mp4 (*.mp4)")));
                if (fileNameDirectori.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".mp4","");
                QString cm=QString::fromUtf8(tr("echo Conversion en proceso..."));
                QString cmd1 = "su - %1 -c \"ffmpeg -i %2 -sameq -s qcif -r 12 -ac 1 -ar 8000 -b 30 -ab 12.2K -s %4 -y %3.mp4\"";
                cmd1=cmd1.arg(user).arg(fileName).arg(fileName1).arg(resolucion);
                QStringList comandos;
                comandos<< cm << cmd1;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionWmv_avi_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .wmv a .avi.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .wmv a .avi")),
                               QString::fromUtf8(tr("<center><b>Convertir formato .wmv a .avi</b></center><p>"

                               "Conversion de formatos wmv a formatos avi.<p>"

                               "Solo se puede convertir un fichero por vez.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path="/home/%1/";
                path=path.arg(user);

                QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .wmv")),
                                    path,trUtf8(tr("Archivo .wmv (*.wmv)")));
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero .avi?")),
                                    path,trUtf8(tr("Archivo .avi (*.avi)")));
                if (fileNameDirectori.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".avi","");
                QString cm=QString::fromUtf8(tr("echo Conversion en proceso..."));
                QString cmd1 = "su - %1 -c \"ffmpeg -i %2 -sameq -s %5 -acodec libmp3lame -ab %4 -y %3.avi\"";
                cmd1=cmd1.arg(user).arg(fileName).arg(fileName1).arg(Audio).arg(resolucion);
                QStringList comandos;
                comandos<< cm << cmd1;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionWmv_mpg_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .wmv a .mpg.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .wmv a .mpg")),
                               QString::fromUtf8(tr("<center><b>Convertir formato .wmv a .mpg</b></center><p>"

                               "Conversion de formatos wmv a formatos mpg.<p>"

                               "Solo se puede convertir un fichero por vez.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path="/home/%1/";
                path=path.arg(user);

                QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .wmv")),
                                    path,trUtf8(tr("Archivo .wmv (*.wmv)")));
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero .mpg?")),
                                    path,trUtf8(tr("Archivo .mpg (*.mpg)")));
                if (fileNameDirectori.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".mpg","");
                QString cm=QString::fromUtf8(tr("echo Conversion en proceso..."));
                QString cmd1 = "su - %1 -c \"ffmpeg -i %2 -sameq -s %5 -acodec libmp3lame -ab %4 -y %3.mpg\"";
                cmd1=cmd1.arg(user).arg(fileName).arg(fileName1).arg(Audio).arg(resolucion);
                QStringList comandos;
                comandos<< cm << cmd1;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionWmv_dvd_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .wmv a .DVD.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        if (dvdauthor == "0")
        {
            QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"dvdauthor\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
            m.exec();
        }
        else
        {
            int respuesta = 0;
            if (Mensaka!="Activo")
            {
                respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .wmv a .dvd")),
                                   QString::fromUtf8(tr("<center><b>Convertir formato .wmv a .dvd</b></center><p>"

                                   "Conversion de formatos wmv a formatos DVD.<p>"

                                   "Solo se puede convertir un fichero por vez.<p>"

                                   "Este proceso, puede tardar un tiempo, se paciente, "
                                   "la espera lo merece.<p>"

                                   "<B>NOTA: Debes esperar a que termine completamente el "
                                   "proceso seleccionado, el cual te sera notificado "
                                   "cuando finalice en la consola de procesos.</B><p>"

                                   "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
            }
            else
            {
                respuesta=QMessageBox::Ok;
            }
            if (respuesta == QMessageBox::Ok){

                    QString path="/home/%1/";
                    path=path.arg(user);

                    QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .wmv")),
                                        path,trUtf8(tr("Archivo .wmv (*.wmv)")));
                    if (fileNameOrigen.isEmpty())
                    {
                        ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                        return;
                    }
                    QString fileNameDirectori = QFileDialog::getExistingDirectory(this,QString::fromUtf8(tr("Donde guardar ficheros de dvd?")),path,QFileDialog::ShowDirsOnly);
                    if (fileNameDirectori.isEmpty())
                    {
                        ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                        return;
                    }
                    QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                    QString cm1=QString::fromUtf8(tr("echo Creando temporales..."));
                    QString cm = "su - %1 -c \"mkdir %2DVD_DATA\"";
                    cm=cm.arg(user).arg(path);
                    QString cm2=QString::fromUtf8(tr("echo Conversion en mpg..."));
                    QString cmd = "su - %1 -c \"ffmpeg -i %2 -sameq -s %4 -target pal-dvd -y %3/dvd.mpg\"";
                    cmd=cmd.arg(user).arg(fileName).arg(fileNameDirectori).arg(resolucion);
                    QString cm3=QString::fromUtf8(tr("echo Convirtiendo a DVD..."));
                    QString cmd1 = "su - %1 -c \"dvdauthor -o %2DVD_DATA/ -t %3/dvd.mpg\"";
                    cmd1=cmd1.arg(user).arg(path).arg(fileNameDirectori);
                    QString cm4=QString::fromUtf8(tr("echo Borrando temporales..."));
                    QString cmd2 = "su - %1 -c \"rm -vf %2/dvd.mpg\"";
                    cmd2=cmd2.arg(user).arg(fileNameDirectori);
                    QStringList comandos;
                    comandos<< cm1 << cm << cm2 << cmd << cm3 << cmd1 <<cm4 << cmd2;

                    if (mib != 0)
                    delete mib;
                    mib = new DrakeProcesos(comandos, this);
                    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                    int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                    else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
        }
    }
}

void recoverdrake::on_actionWmv_flv_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .wmv a .flv.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .wmv a .flv")),
                               QString::fromUtf8(tr("<center><b>Convertir formato .wmv a .flv</b></center><p>"

                               "Conversion de formatos wmv a formatos flv.<p>"

                               "Solo se puede convertir un fichero por vez.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path="/home/%1/";
                path=path.arg(user);

                QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .wmv")),
                                    path,trUtf8(tr("Archivo .wmv (*.wmv)")));
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero .flv?")),
                                    path,trUtf8(tr("Archivo .flv (*.flv)")));
                if (fileNameDirectori.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".flv","");
                QString cm=QString::fromUtf8(tr("echo Conversion en proceso..."));
                QString cmd1 = "su - %1 -c \"ffmpeg -i %2 -sameq -threads 2 -r 30.00 -threads 1 -pix_fmt yuv420p -g 300 -qmin 3 -b 512k -async 50 -ar 11025 -ac 1 -s %5 -acodec libmp3lame -ab %4 -y %3.flv\"";
                cmd1=cmd1.arg(user).arg(fileName).arg(fileName1).arg(Audio).arg(resolucion);
                QStringList comandos;
                comandos<< cm << cmd1;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionWmv_3gp_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .wmv a .3gp.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .wmv a .3gp")),
                               QString::fromUtf8(tr("<center><b>Convertir formato .wmv a .3gp</b></center><p>"

                               "Conversion de formatos wmv a formatos 3gp.<p>"

                               "Solo se puede convertir un fichero por vez.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path="/home/%1/";
                path=path.arg(user);

                QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .wmv")),
                                    path,trUtf8(tr("Archivo .wmv (*.wmv)")));
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero .3gp?")),
                                    path,trUtf8(tr("Archivo .3gp (*.3gp)")));
                if (fileNameDirectori.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".3gp","");
                QString cm=QString::fromUtf8(tr("echo Conversion en proceso..."));
                QString cmd1 = "su - %1 -c \"ffmpeg -i %2 -sameq -s qcif -r 12 -ac 1 -ar 8000 -b 30 -ab 12.2K -s %4 -y %3.3gp\"";
                cmd1=cmd1.arg(user).arg(fileName).arg(fileName1).arg(resolucion);
                QStringList comandos;
                comandos<< cm << cmd1;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionWmv_mp4_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .wmv a .mp4.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .wmv a .mp4")),
                               QString::fromUtf8(tr("<center><b>Convertir formato .wmv a .mp4</b></center><p>"

                               "Conversion de formatos wmv a formatos mp4.<p>"

                               "Solo se puede convertir un fichero por vez.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path="/home/%1/";
                path=path.arg(user);

                QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .wmv")),
                                    path,trUtf8(tr("Archivo .wmv (*.wmv)")));
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero .mp4?")),
                                    path,trUtf8(tr("Archivo .mp4 (*.mp4)")));
                if (fileNameDirectori.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".mp4","");
                QString cm=QString::fromUtf8(tr("echo Conversion en proceso..."));
                QString cmd1 = "su - %1 -c \"ffmpeg -i %2 -sameq -s qcif -r 12 -ac 1 -ar 8000 -b 30 -ab 12.2K -s %4 -y %3.mp4\"";
                cmd1=cmd1.arg(user).arg(fileName).arg(fileName1).arg(resolucion);
                QStringList comandos;
                comandos<< cm << cmd1;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionFlv_avi_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .flv a .avi.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .flv a .avi")),
                               QString::fromUtf8(tr("<center><b>Convertir formato .flv a .avi</b></center><p>"

                               "Conversion de formatos flv a formatos avi.<p>"

                               "Solo se puede convertir un fichero por vez.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path="/home/%1/";
                path=path.arg(user);

                QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .flv")),
                                    path,trUtf8(tr("Archivo .flv (*.flv)")));
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero .avi?")),
                                    path,trUtf8(tr("Archivo .avi (*.avi)")));
                if (fileNameDirectori.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".avi","");
                QString cm=QString::fromUtf8(tr("echo Conversion en proceso..."));
                QString cmd1 = "su - %1 -c \"ffmpeg -i %2 -sameq -s %5 -acodec libmp3lame -ab %4 -y %3.avi\"";
                cmd1=cmd1.arg(user).arg(fileName).arg(fileName1).arg(Audio).arg(resolucion);
                QStringList comandos;
                comandos<< cm << cmd1;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionFlv_dvd_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .flv a .DVD.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        if (dvdauthor == "0")
        {
            QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"dvdauthor\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
            m.exec();
        }
        else
        {
            int respuesta = 0;
            if (Mensaka!="Activo")
            {
                respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .flv a .dvd")),
                                   QString::fromUtf8(tr("<center><b>Convertir formato .flv a .dvd</b></center><p>"

                                   "Conversion de formatos flv a formatos DVD.<p>"

                                   "Solo se puede convertir un fichero por vez.<p>"

                                   "Este proceso, puede tardar un tiempo, se paciente, "
                                   "la espera lo merece.<p>"

                                   "<B>NOTA: Debes esperar a que termine completamente el "
                                   "proceso seleccionado, el cual te sera notificado "
                                   "cuando finalice en la consola de procesos.</B><p>"

                                   "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
            }
            else
            {
                respuesta=QMessageBox::Ok;
            }
            if (respuesta == QMessageBox::Ok){

                    QString path="/home/%1/";
                    path=path.arg(user);

                    QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .flv")),
                                        path,trUtf8(tr("Archivo .flv (*.flv)")));
                    if (fileNameOrigen.isEmpty())
                    {
                        ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                        return;
                    }
                    QString fileNameDirectori = QFileDialog::getExistingDirectory(this,QString::fromUtf8(tr("Donde guardar ficheros de dvd?")),path,QFileDialog::ShowDirsOnly);
                    if (fileNameDirectori.isEmpty())
                    {
                        ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                        return;
                    }
                    QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                    QString cm1=QString::fromUtf8(tr("echo Creando temporales..."));
                    QString cm = "su - %1 -c \"mkdir %2DVD_DATA\"";
                    cm=cm.arg(user).arg(path);
                    QString cm2=QString::fromUtf8(tr("echo Conversion en mpg..."));
                    QString cmd = "su - %1 -c \"ffmpeg -i %2 -sameq -s %4 -target pal-dvd -y %3/dvd.mpg";
                    cmd=cmd.arg(user).arg(fileName).arg(fileNameDirectori).arg(resolucion);
                    QString cm3=QString::fromUtf8(tr("echo Convirtiendo a DVD..."));
                    QString cmd1 = "su - %1 -c \"dvdauthor -o %2DVD_DATA/ -t %3/dvd.mpg\"";
                    cmd1=cmd1.arg(user).arg(path).arg(fileNameDirectori);
                    QString cm4=QString::fromUtf8(tr("echo Borrando temporales..."));
                    QString cmd2 = "su - %1 -c \"rm -vf %2/dvd.mpg\"";
                    cmd2=cmd2.arg(user).arg(fileNameDirectori);
                    QStringList comandos;
                    comandos<< cm1 << cm << cm2 << cmd << cm3 << cmd1 <<cm4 << cmd2;

                    if (mib != 0)
                    delete mib;
                    mib = new DrakeProcesos(comandos, this);
                    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                    int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                    else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
        }
    }
}

void recoverdrake::on_actionFlv_wmv_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .flv a .wmv.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .flv a wmv")),
                               QString::fromUtf8(tr("<center><b>Convertir formato .flv a .wmv</b></center><p>"
                               "Conversion de formatos flv a formatos wmv.<p>"
                               "Solo se puede convertir un fichero por vez.<p>"
                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"
                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"
                               "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path="/home/%1/";
                path=path.arg(user);

                QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .flv")),
                                    path,trUtf8(tr("Archivo .flv (*.flv)")));
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero .wmv?")),
                                    path,trUtf8(tr("Archivo .wmv (*.wmv)")));
                if (fileNameDirectori.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".wmv","");
                QString cm=QString::fromUtf8(tr("echo Conversion en proceso..."));
                QString cmd1 = "su - %1 -c \"ffmpeg -i %2 -sameq -s qcif -r 12 -ac 1 -ar 8000 -b 30 -ab 12.2K -s %4 -y %3.wmv\"";
                cmd1=cmd1.arg(user).arg(fileName).arg(fileName1).arg(resolucion);
                QStringList comandos;
                comandos<< cm << cmd1;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionFlv_mpg_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .flv a .mpg.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .flv a .mpg")),
                               QString::fromUtf8(tr("<center><b>Convertir formato .flv a .mpg</b></center><p>"

                               "Conversion de formatos flv a formatos mpg.<p>"

                               "Solo se puede convertir un fichero por vez.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path="/home/%1/";
                path=path.arg(user);

                QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .flv")),
                                    path,trUtf8(tr("Archivo .flv (*.flv)")));
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero .mpg?")),
                                    path,trUtf8(tr("Archivo .mpg (*.mpg)")));
                if (fileNameDirectori.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".mpg","");
                QString cm=QString::fromUtf8(tr("echo Conversion en proceso..."));
                QString cmd1 = "su - %1 -c \"ffmpeg -i %2 -sameq -s %5 -acodec libmp3lame -ab %4 -y %3.mpg\"";
                cmd1=cmd1.arg(user).arg(fileName).arg(fileName1).arg(Audio).arg(resolucion);
                QStringList comandos;
                comandos<< cm << cmd1;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionFlv_3gp_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .flv a .3gp.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .flv a .3gp")),
                               QString::fromUtf8(tr("<center><b>Convertir formato .flv a .3gp</b></center><p>"

                               "Conversion de formatos flv a formatos 3gp.<p>"

                               "Solo se puede convertir un fichero por vez.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path="/home/%1/";
                path=path.arg(user);

                QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .flv")),
                                    path,trUtf8(tr("Archivo .flv (*.flv)")));
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero .3gp?")),
                                    path,trUtf8(tr("Archivo .3gp (*.3gp)")));
                if (fileNameDirectori.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".3gp","");
                QString cm=QString::fromUtf8(tr("echo Conversion en proceso..."));
                QString cmd1 = "su - %1 -c \"ffmpeg -i %2 -sameq -s qcif -r 12 -ac 1 -ar 8000 -b 30 -ab 12.2K -s %4 -y %3.3gp\"";
                cmd1=cmd1.arg(user).arg(fileName).arg(fileName1).arg(resolucion);
                QStringList comandos;
                comandos<< cm << cmd1;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionFlv_mp4_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .flv a .mp4.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .flv a .mp4")),
                               QString::fromUtf8(tr("<center><b>Convertir formato .flv a .mp4</b></center><p>"

                               "Conversion de formatos flv a formatos mp4.<p>"

                               "Solo se puede convertir un fichero por vez.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path="/home/%1/";
                path=path.arg(user);

                QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .flv")),
                                    path,trUtf8(tr("Archivo .flv (*.flv)")));
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero .mp4?")),
                                    path,trUtf8(tr("Archivo .mp4 (*.mp4)")));
                if (fileNameDirectori.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".mp4","");
                QString cm=QString::fromUtf8(tr("echo Conversion en proceso..."));
                QString cmd1 = "su - %1 -c \"ffmpeg -i %2 -sameq -s qcif -r 12 -ac 1 -ar 8000 -b 30 -ab 12.2K -s %4 -y %3.mp4\"";
                cmd1=cmd1.arg(user).arg(fileName).arg(fileName1).arg(resolucion);
                QStringList comandos;
                comandos<< cm << cmd1;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionMp4_avi_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .mp4 a .avi.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .mp4 a .avi")),
                               QString::fromUtf8(tr("<center><b>Convertir formato .mp4 a .avi</b></center><p>"

                               "Conversion de formatos mp4 a formatos avi.<p>"

                               "Solo se puede convertir un fichero por vez.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path="/home/%1/";
                path=path.arg(user);

                QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .mp4")),
                                    path,trUtf8(tr("Archivo .mp4 (*.mp4)")));
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero .avi?")),
                                    path,trUtf8(tr("Archivo .avi (*.avi)")));
                if (fileNameDirectori.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".avi","");
                QString cm=QString::fromUtf8(tr("echo Conversion en proceso..."));
                QString cmd1 = "su - %1 -c \"ffmpeg -i %2 -sameq -s %5 -acodec libmp3lame -ab %4 -y %3.avi\"";
                cmd1=cmd1.arg(user).arg(fileName).arg(fileName1).arg(Audio).arg(resolucion);
                QStringList comandos;
                comandos<< cm << cmd1;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionMp4_mpg_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .mp4 a .mpg.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .mp4 a .mpg")),
                               QString::fromUtf8(tr("<center><b>Convertir formato .mp4 a .mpg</b></center><p>"

                               "Conversion de formatos mp4 a formatos mpg.<p>"

                               "Solo se puede convertir un fichero por vez.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path="/home/%1/";
                path=path.arg(user);

                QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .mp4")),
                                    path,trUtf8(tr("Archivo .mp4 (*.mp4)")));
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero .mpg?")),
                                    path,trUtf8(tr("Archivo .mpg (*.mpg)")));
                if (fileNameDirectori.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".mpg","");
                QString cm=QString::fromUtf8(tr("echo Conversion en proceso..."));
                QString cmd1 = "su - %1 -c \"ffmpeg -i %2 -sameq -s %5 -acodec libmp3lame -ab %4 -y %3.mpg\"";
                cmd1=cmd1.arg(user).arg(fileName).arg(fileName1).arg(Audio).arg(resolucion);
                QStringList comandos;
                comandos<< cm << cmd1;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionMp4_dvd_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .mp4 a .DVD.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        if (dvdauthor == "0")
        {
            QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"dvdauthor\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
            m.exec();
        }
        else
        {
            int respuesta = 0;
            if (Mensaka!="Activo")
            {
                respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .mp4 a .dvd")),
                                   QString::fromUtf8(tr("<center><b>Convertir formato .mp4 a .dvd</b></center><p>"

                                   "Conversion de formatos mp4 a formatos DVD.<p>"

                                   "Solo se puede convertir un fichero por vez.<p>"

                                   "Este proceso, puede tardar un tiempo, se paciente, "
                                   "la espera lo merece.<p>"

                                   "<B>NOTA: Debes esperar a que termine completamente el "
                                   "proceso seleccionado, el cual te sera notificado "
                                   "cuando finalice en la consola de procesos.</B><p>"

                                   "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
            }
            else
            {
                respuesta=QMessageBox::Ok;
            }
            if (respuesta == QMessageBox::Ok){

                    QString path="/home/%1/";
                    path=path.arg(user);

                    QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .mp4")),
                                        path,trUtf8(tr("Archivo .mp4 (*.mp4)")));
                    if (fileNameOrigen.isEmpty())
                    {
                        ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                        return;
                    }
                    QString fileNameDirectori = QFileDialog::getExistingDirectory(this,QString::fromUtf8(tr("Donde guardar ficheros de dvd?")),path,QFileDialog::ShowDirsOnly);
                    if (fileNameDirectori.isEmpty())
                    {
                        ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                        return;
                    }
                    QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                    QString cm1=QString::fromUtf8(tr("echo Creando temporales..."));
                    QString cm = "su - %1 -c \"mkdir %2DVD_DATA\"";
                    cm=cm.arg(user).arg(path);
                    QString cm2=QString::fromUtf8(tr("echo Conversion en mpg..."));
                    QString cmd = "su - %1 -c \"ffmpeg -i %2 -sameq -s %4 -target pal-dvd -y %3/dvd.mpg";
                    cmd=cmd.arg(user).arg(fileName).arg(fileNameDirectori).arg(resolucion);
                    QString cm3=QString::fromUtf8(tr("echo Convirtiendo a DVD..."));
                    QString cmd1 = "su - %1 -c \"dvdauthor -o %2DVD_DATA/ -t %3/dvd.mpg\"";
                    cmd1=cmd1.arg(user).arg(path).arg(fileNameDirectori);
                    QString cm4=QString::fromUtf8(tr("echo Borrando temporales..."));
                    QString cmd2 = "su - %1 -c \"rm -vf %2/dvd.mpg\"";
                    cmd2=cmd2.arg(user).arg(fileNameDirectori);
                    QStringList comandos;
                    comandos<< cm1 << cm << cm2 << cmd << cm3 << cmd1 <<cm4 << cmd2;

                    if (mib != 0)
                    delete mib;
                    mib = new DrakeProcesos(comandos, this);
                    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                    int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                    else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
        }
    }
}

void recoverdrake::on_actionMp4_wmv_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .mp4 a .wmv.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .mp4 a wvm")),
                               QString::fromUtf8(tr("<center><b>Convertir formato .mp4 a .wmv</b></center><p>"

                               "Conversion de formatos mp4 a formatos wmv.<p>"

                               "Solo se puede convertir un fichero por vez.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path="/home/%1/";
                path=path.arg(user);

                QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .mp4")),
                                    path,trUtf8(tr("Archivo .mp4 (*.mp4)")));
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero .wmv?")),
                                    path,trUtf8(tr("Archivo .wmv (*.wmv)")));
                if (fileNameDirectori.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".wmv","");
                QString cm=QString::fromUtf8(tr("echo Conversion en proceso..."));
                QString cmd1 = "su - %1 -c \"ffmpeg -i %2 -sameq -s qcif -r 12 -ac 1 -ar 8000 -b 30 -ab 12.2K -s %4 -y %3.wmv\"";
                cmd1=cmd1.arg(user).arg(fileName).arg(fileName1).arg(resolucion);
                QStringList comandos;
                comandos<< cm << cmd1;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionMp4_3gp_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .mp4 a .3gp.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .mp4 a .3gp")),
                               QString::fromUtf8(tr("<center><b>Convertir formato .mp4 a .3gp</b></center><p>"

                               "Conversion de formatos mp4 a formatos 3gp.<p>"

                               "Solo se puede convertir un fichero por vez.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path="/home/%1/";
                path=path.arg(user);

                QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .mp4")),
                                    path,trUtf8(tr("Archivo .mp4 (*.mp4)")));
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero .3gp?")),
                                    path,trUtf8(tr("Archivo .3gp (*.3gp)")));
                if (fileNameDirectori.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".3gp","");
                QString cm=QString::fromUtf8(tr("echo Conversion en proceso..."));
                QString cmd1 = "su - %1 -c \"ffmpeg -i %2 -sameq -s qcif -r 12 -ac 1 -ar 8000 -b 30 -ab 12.2K -s %4 -y %3.3gp\"";
                cmd1=cmd1.arg(user).arg(fileName).arg(fileName1).arg(resolucion);
                QStringList comandos;
                comandos<< cm << cmd1;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionMp4_flv_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .mp4 a .flv.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .mp4 a .flv")),
                               QString::fromUtf8(tr("<center><b>Convertir formato .mp4 a .flv</b></center><p>"

                               "Conversion de formatos mp4 formatos flv.<p>"

                               "Solo se puede convertir un fichero por vez.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path="/home/%1/";
                path=path.arg(user);

                QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .mp4")),
                                    path,trUtf8(tr("Archivo .mp4 (*.mp4)")));
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero .flv?")),
                                    path,trUtf8(tr("Archivo .flv (*.flv)")));
                if (fileNameDirectori.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".flv","");
                QString cm=QString::fromUtf8(tr("echo Conversion en proceso..."));
                QString cmd1 = "su - %1 -c \"ffmpeg -i %2 -sameq -threads 2 -r 30.00 -threads 1 -pix_fmt yuv420p -g 300 -qmin 3 -b 512k -async 50 -ar 11025 -ac 1 -s %5 -acodec libmp3lame -ab %4 -y %3.flv\"";
                cmd1=cmd1.arg(user).arg(fileName).arg(fileName1).arg(Audio).arg(resolucion);
                QStringList comandos;
                comandos<< cm << cmd1;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_action3gp_mpg_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .3gp a .mpg.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .3gp a .mpg")),
                               QString::fromUtf8(tr("<center><b>Convertir formato .3gp a .mpg</b></center><p>"

                               "Conversion de formatos 3gp a formatos mpg.<p>"

                               "Solo se puede convertir un fichero por vez.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path="/home/%1/";
                path=path.arg(user);

                QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .3gp")),
                                    path,trUtf8(tr("Archivo .3gp (*.3gp)")));
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero .mpg?")),
                                    path,trUtf8(tr("Archivo .mpg (*.mpg)")));
                if (fileNameDirectori.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".mpg","");
                QString cm=QString::fromUtf8(tr("echo Conversion en proceso..."));
                QString cmd1 = "su - %1 -c \"ffmpeg -i %2 -sameq -s %5 -acodec libmp3lame -ab %4 -y %3.mpg\"";
                cmd1=cmd1.arg(user).arg(fileName).arg(fileName1).arg(Audio).arg(resolucion);
                QStringList comandos;
                comandos<< cm << cmd1;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_action3gp_avi_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .3gp a .avi.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .3gp a .avi")),
                               QString::fromUtf8(tr("<center><b>Convertir formato .3gp a .avi</b></center><p>"

                               "Conversion de formatos 3gp a formatos avi.<p>"

                               "Solo se puede convertir un fichero por vez.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path="/home/%1/";
                path=path.arg(user);

                QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .3gp")),
                                    path,trUtf8(tr("Archivo .3gp (*.3gp)")));
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero .avi?")),
                                    path,trUtf8(tr("Archivo .avi (*.avi)")));
                if (fileNameDirectori.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".avi","");
                QString cm=QString::fromUtf8(tr("echo Conversion en proceso..."));
                QString cmd1 = "su - %1 -c \"ffmpeg -i %2 -sameq -s %5 -acodec libmp3lame -ab %4 -y %3.avi\"";
                cmd1=cmd1.arg(user).arg(fileName).arg(fileName1).arg(Audio).arg(resolucion);
                QStringList comandos;
                comandos<< cm << cmd1;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_action3gp_dvd_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .3gp a .DVD.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        if (dvdauthor == "0")
        {
            QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"dvdauthor\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
            m.exec();
        }
        else
        {
            int respuesta = 0;
            if (Mensaka!="Activo")
            {
                respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .3gp a .dvd")),
                                   QString::fromUtf8(tr("<center><b>Convertir formato .3gp a .dvd</b></center><p>"

                                   "Conversion de formatos 3gp a formatos DVD.<p>"

                                   "Solo se puede convertir un fichero por vez.<p>"

                                   "Este proceso, puede tardar un tiempo, se paciente, "
                                   "la espera lo merece.<p>"

                                   "<B>NOTA: Debes esperar a que termine completamente el "
                                   "proceso seleccionado, el cual te sera notificado "
                                   "cuando finalice en la consola de procesos.</B><p>"

                                   "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
            }
            else
            {
                respuesta=QMessageBox::Ok;
            }
            if (respuesta == QMessageBox::Ok){

                    QString path="/home/%1/";
                    path=path.arg(user);

                    QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .3gp")),
                                        path,trUtf8(tr("Archivo .3gp (*.3gp)")));
                    if (fileNameOrigen.isEmpty())
                    {
                        ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                        return;
                    }
                    QString fileNameDirectori = QFileDialog::getExistingDirectory(this,QString::fromUtf8(tr("Donde guardar ficheros de dvd?")),path,QFileDialog::ShowDirsOnly);
                    if (fileNameDirectori.isEmpty())
                    {
                        ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                        return;
                    }
                    QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                    QString cm1=QString::fromUtf8(tr("echo Creando temporales..."));
                    QString cm = "su - %1 -c \"mkdir %2DVD_DATA\"";
                    cm=cm.arg(user).arg(path);
                    QString cm2=QString::fromUtf8(tr("echo Conversion en mpg..."));
                    QString cmd = "su - %1 -c \"ffmpeg -i %2 -sameq -s %4 -target pal-dvd -y %3/dvd.mpg";
                    cmd=cmd.arg(user).arg(fileName).arg(fileNameDirectori).arg(resolucion);
                    QString cm3=QString::fromUtf8(tr("echo Convirtiendo a DVD..."));
                    QString cmd1 = "su - %1 -c \"dvdauthor -o %2DVD_DATA/ -t %3/dvd.mpg\"";
                    cmd1=cmd1.arg(user).arg(path).arg(fileNameDirectori);
                    QString cm4=QString::fromUtf8(tr("echo Borrando temporales..."));
                    QString cmd2 = "su - %1 -c \"rm -vf %2/dvd.mpg\"";
                    cmd2=cmd2.arg(user).arg(fileNameDirectori);
                    QStringList comandos;
                    comandos<< cm1 << cm << cm2 << cmd << cm3 << cmd1 <<cm4 << cmd2;

                    if (mib != 0)
                    delete mib;
                    mib = new DrakeProcesos(comandos, this);
                    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                    int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                    else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
        }
    }
}

void recoverdrake::on_action3gp_wmv_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .3gp a .wmv.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .3gp a wvm")),
                               QString::fromUtf8(tr("<center><b>Convertir formato .3gp a .wmv</b></center><p>"

                               "Conversion de formatos 3gp a formatos wmv.<p>"

                               "Solo se puede convertir un fichero por vez.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path="/home/%1/";
                path=path.arg(user);

                QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .3gp")),
                                    path,trUtf8(tr("Archivo .3gp (*.3gp)")));
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero .wmv?")),
                                    path,trUtf8(tr("Archivo .wmv (*.wmv)")));
                if (fileNameDirectori.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".wmv","");
                QString cm=QString::fromUtf8(tr("echo Conversion en proceso..."));
                QString cmd1 = "su - %1 -c \"ffmpeg -i %2 -sameq -s qcif -r 12 -ac 1 -ar 8000 -b 30 -ab 12.2K -s %4 -y %3.wmv\"";
                cmd1=cmd1.arg(user).arg(fileName).arg(fileName1).arg(resolucion);
                QStringList comandos;
                comandos<< cm << cmd1;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_action3gp_flv_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .3gp a .flv.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .3gp a .flv")),
                               QString::fromUtf8(tr("<center><b>Convertir formato .3gp a .flv</b></center><p>"

                               "Conversion de formatos 3gp formatos flv.<p>"

                               "Solo se puede convertir un fichero por vez.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path="/home/%1/";
                path=path.arg(user);

                QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .3gp")),
                                    path,trUtf8(tr("Archivo .3gp (*.3gp)")));
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero .flv?")),
                                    path,trUtf8(tr("Archivo .flv (*.flv)")));
                if (fileNameDirectori.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".flv","");
                QString cm=QString::fromUtf8(tr("echo Conversion en proceso..."));
                QString cmd1 = "su - %1 -c \"ffmpeg -i %2 -sameq -threads 2 -r 30.00 -threads 1 -pix_fmt yuv420p -g 300 -qmin 3 -b 512k -async 50 -ar 11025 -ac 1 -s %5 -acodec libmp3lame -ab %4 -y %3.flv\"";
                cmd1=cmd1.arg(user).arg(fileName).arg(fileName1).arg(Audio).arg(resolucion);
                QStringList comandos;
                comandos<< cm << cmd1;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_action3gp_mp4_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .3gp a .mp4.");
    Refrescar();
    if (ffmpeg == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir formato .3pg a .mp4")),
                               QString::fromUtf8(tr("<center><b>Convertir formato .3gp a .mp4</b></center><p>"

                               "Conversion de formatos 3gp a formatos mp4.<p>"

                               "Solo se puede convertir un fichero por vez.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path="/home/%1/";
                path=path.arg(user);

                QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .3gp")),
                                    path,trUtf8(tr("Archivo .3gp (*.3gp)")));
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero .mp4?")),
                                    path,trUtf8(tr("Archivo .mp4 (*.mp4)")));
                if (fileNameDirectori.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString fileName = fileNameOrigen.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)");
                QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".mp4","");
                QString cm=QString::fromUtf8(tr("echo Conversion en proceso..."));
                QString cmd1 = "su - %1 -c \"ffmpeg -i %2 -sameq -s qcif -r 12 -ac 1 -ar 8000 -b 30 -ab 12.2K -s %4 -y %3.mp4\"";
                cmd1=cmd1.arg(user).arg(fileName).arg(fileName1).arg(resolucion);
                QStringList comandos;
                comandos<< cm << cmd1;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionDvd_avi_2_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .DVD a .avi.");
    Refrescar();
    if (mencoder == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"mencoder\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        if (lsdvdDat == "0")
        {
            QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"lsdvd\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
            m.exec();
        }
        else
        {
            system("eject");
            QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr(QString::fromUtf8("Introduce el medio a ripear.<p>" "Pulsa Ok para continuar...")));
            m.exec();
            system("eject -t");
            QMessageBox mA; if (Stilo == "A") mA.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            mA.setText(tr("Espera a que el notificador de dispositivos te avise de que esta cargado el disco y pulsa Ok para continuar."));
            mA.exec();
            drakeSistema drake;
            lsdvd = drake.getlsdvd();
            QString lsdvdDat = lsdvd.right(3);
            QString lsdvdDat1= lsdvdDat.left(2);
            int respuesta = 0;
            if (Mensaka!="Activo")
            {
                respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Ripear DVD y convertir a .avi")),
                                   QString::fromUtf8(tr("<center><b>Ripear DVD y convertir a .avi</b></center><p>"

                                   "Ripeado de DVD y conversion posterior a formato avi.<p>"

                                   "Solo se puede convertir un fichero por vez.<p>"

                                   "Ref.: "+lsdvdDat1+" para titulo completo de pelicula.<p>"

                                   "Este proceso, puede tardar un tiempo, se paciente, "
                                   "la espera lo merece.<p>"

                                   "<B>NOTA: Debes esperar a que termine completamente el "
                                   "proceso seleccionado, el cual te sera notificado "
                                   "cuando finalice en la consola de procesos.</B><p>"

                                   "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
            }
            else
            {
                respuesta=QMessageBox::Ok;
            }
            if (respuesta == QMessageBox::Ok){

                        QString path="/home/%1/";
                        path=path.arg(user);

                        QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero .avi?")),
                                            path,trUtf8(tr("Archivo .avi (*.avi)")));
                        if (fileNameDirectori.isEmpty())
                        {
                            ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                            return;
                        }
                        QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".avi","");
                        QString cm =QString::fromUtf8(tr("echo Creando fichero avi temporal..."));
                        QString cmd1 = "su - %1 -c \"mencoder dvd://%2 -ovc frameno -o frameno.avi -oac mp3lame -lameopts vbr=3 -alang es\"";
                        cmd1=cmd1.arg(user).arg(lsdvdDat1);
                        QString cm1 =QString::fromUtf8(tr("echo Realizando primera pasada..."));
                        QString cmd2 = "su - %1 -c \"mencoder dvd://%2 -ovc lavc -lavcopts vcodec=mpeg4:vpass=1:vbitrate=1247 -oac copy -o %3.avi\"";
                        cmd2=cmd2.arg(user).arg(lsdvdDat1).arg(fileName1);
                        QString cm2 =QString::fromUtf8(tr("echo Realizando segunda pasada..."));
                        QString cmd3 = "su - %1 -c \"mencoder dvd://%2 -ovc lavc -lavcopts vcodec=mpeg4:vpass=2:vbitrate=1247 -oac copy -o %3.avi\"";
                        cmd3=cmd3.arg(user).arg(lsdvdDat1).arg(fileName1);
                        QString cm3 =QString::fromUtf8(tr("echo Borrando avi temporal..."));
                        QString cmd4 = "su - %1 -c \"rm -vf frameno.avi\"";
                        cmd4=cmd4.arg(user);
                        QStringList comandos;
                        comandos<< cm << cmd1 << cm1 << cmd2 << cm2 << cmd3 << cm3 << cmd4;

                        if (mib != 0)
                        delete mib;
                        mib = new DrakeProcesos(comandos, this);
                        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
        }
    }
}

void recoverdrake::on_actionDvd_mpg_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .DVD a .mpg.");
    Refrescar();
    if (mencoder == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"mencoder\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        if (lsdvdDat == "0")
        {
            QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"lsdvd\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
            m.exec();
        }
        else
        {
            if (ffmpeg == "0")
            {
                QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
                m.exec();
            }
            else
            {
                system("eject");
                QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                m.setText(tr(QString::fromUtf8("Introduce el medio a ripear.<p>" "Pulsa Ok para continuar...")));
                m.exec();
                system("eject -t");
                QMessageBox mA; if (Stilo == "A") mA.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                mA.setText(tr("Espera a que el notificador de dispositivos te avise de que esta cargado el disco y pulsa Ok para continuar."));
                mA.exec();
                drakeSistema drake;
                lsdvd = drake.getlsdvd();
                QString lsdvdDat = lsdvd.right(3);
                QString lsdvdDat1= lsdvdDat.left(2);
                int respuesta = 0;
                if (Mensaka!="Activo")
                {
                    respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Ripear DVD y convertir a .mpg")),
                                       QString::fromUtf8(tr("<center><b>Ripear DVD y convertir a .mpg</b></center><p>"

                                       "Ripeado de DVD y conversion posterior a formato mpg.<p>"

                                       "Solo se puede convertir un fichero por vez.<p>"

                                       "Este proceso, puede tardar un tiempo, se paciente, "
                                       "la espera lo merece.<p>"

                                       "<B>NOTA: Debes esperar a que termine completamente el "
                                       "proceso seleccionado, el cual te sera notificado "
                                       "cuando finalice en la consola de procesos.</B><p>"

                                       "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
                }
                else
                {
                    respuesta=QMessageBox::Ok;
                }
                if (respuesta == QMessageBox::Ok){

                            QString path="/home/%1/";
                            path=path.arg(user);

                            QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero .mpg?")),
                                                path,trUtf8(tr("Archivo .mpg (*.mpg)")));
                            if (fileNameDirectori.isEmpty())
                            {
                                ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                                return;
                            }
                            QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".mpg","");
                            QString cm =QString::fromUtf8(tr("echo Creando fichero avi temporal..."));
                            QString cmd1 = "su - %1 -c \"mencoder dvd://%2 -ovc frameno -o frameno.avi -oac mp3lame -lameopts vbr=3 -alang es\"";
                            cmd1=cmd1.arg(user).arg(lsdvdDat1);
                            QString cm1 =QString::fromUtf8(tr("echo Realizando primera pasada..."));
                            QString cmd2 = "su - %1 -c \"mencoder dvd://%2 -ovc lavc -lavcopts vcodec=mpeg4:vpass=1:vbitrate=1247 -oac copy -o tmp_avi.avi\"";
                            cmd2=cmd2.arg(user).arg(lsdvdDat1);
                            QString cm2 =QString::fromUtf8(tr("echo Realizando segunda pasada..."));
                            QString cmd3 = "su - %1 -c \"mencoder dvd://0%2 -ovc lavc -lavcopts vcodec=mpeg4:vpass=2:vbitrate=1247 -oac copy -o tmp_avi.avi\"";
                            cmd3=cmd3.arg(user).arg(lsdvdDat1);
                            QString c3 =QString::fromUtf8(tr("echo Borrando avi temporal..."));
                            QString cmd4 = "su - %1 -c \"rm -vf frameno.avi\"";
                            cmd4=cmd4.arg(user);
                            QString cm3 =QString::fromUtf8(tr("echo Construyendo video seleccionado..."));
                            QString cmd5 = "su - %1 -c \"ffmpeg -i tmp_avi.avi -sameq -s %4 -acodec libmp3lame -ab %3 -y %2.mpg\"";
                            cmd5=cmd5.arg(user).arg(fileName1).arg(Audio).arg(resolucion);
                            QString cm4 =QString::fromUtf8(tr("echo Borrando avi temporal..."));
                            QString cmd6 ="su - %1 -c \"rm -vf temp_avi.avi\"";
                            cmd6=cmd6.arg(user);
                            QStringList comandos;
                            comandos<< cm << cmd1 << cm1 << cmd2 << cm2 << cmd3 << c3 << cmd4 << cm3 << cmd5 << cm4 <<cmd6;

                            if (mib != 0)
                            delete mib;
                            mib = new DrakeProcesos(comandos, this);
                            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
            }
        }
    }
}

void recoverdrake::on_actionDVD_WMV_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .DVD a .wmv.");
    Refrescar();
    if (mencoder == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"mencoder\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        if (lsdvdDat == "0")
        {
            QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"lsdvd\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
            m.exec();
        }
        else
        {
            if (ffmpeg == "0")
            {
                QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
                m.exec();
            }
            else
            {
                system("eject");
                QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                m.setText(tr(QString::fromUtf8("Introduce el medio a ripear.<p>" "Pulsa Ok para continuar...")));
                m.exec();
                system("eject -t");
                QMessageBox mA; if (Stilo == "A") mA.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                mA.setText(tr("Espera a que el notificador de dispositivos te avise de que esta cargado el disco y pulsa Ok para continuar."));
                mA.exec();
                drakeSistema drake;
                lsdvd = drake.getlsdvd();
                QString lsdvdDat = lsdvd.right(3);
                QString lsdvdDat1= lsdvdDat.left(2);
                int respuesta = 0;
                if (Mensaka!="Activo")
                {
                    respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Ripear DVD y convertir a .mwmv")),
                                       QString::fromUtf8(tr("<center><b>Ripear DVD y convertir a .wmv</b></center><p>"

                                       "Ripeado de DVD y conversion posterior a formato wmv.<p>"

                                       "Solo se puede convertir un fichero por vez.<p>"

                                       "Este proceso, puede tardar un tiempo, se paciente, "
                                       "la espera lo merece.<p>"

                                       "<B>NOTA: Debes esperar a que termine completamente el "
                                       "proceso seleccionado, el cual te sera notificado "
                                       "cuando finalice en la consola de procesos.</B><p>"

                                       "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
                }
                else
                {
                    respuesta=QMessageBox::Ok;
                }
                if (respuesta == QMessageBox::Ok){

                            QString path="/home/%1/";
                            path=path.arg(user);

                            QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero .wmv?")),
                                                path,trUtf8(tr("Archivo .wmv (*.wmv)")));
                            if (fileNameDirectori.isEmpty())
                            {
                                ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                                return;
                            }
                            QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".wmv","");
                            QString cm =QString::fromUtf8(tr("echo Creando fichero avi temporal..."));
                            QString cmd1 = "su - %1 -c \"mencoder dvd://%2 -ovc frameno -o frameno.avi -oac mp3lame -lameopts vbr=3 -alang es\"";
                            cmd1=cmd1.arg(user).arg(lsdvdDat1);
                            QString cm1 =QString::fromUtf8(tr("echo Realizando primera pasada..."));
                            QString cmd2 = "su - %1 -c \"mencoder dvd://%2 -ovc lavc -lavcopts vcodec=mpeg4:vpass=1:vbitrate=1247 -oac copy -o tmp_avi.avi\"";
                            cmd2=cmd2.arg(user).arg(lsdvdDat1);
                            QString cm2 =QString::fromUtf8(tr("echo Realizando segunda pasada..."));
                            QString cmd3 = "su - %1 -c \"mencoder dvd://0%2 -ovc lavc -lavcopts vcodec=mpeg4:vpass=2:vbitrate=1247 -oac copy -o tmp_avi.avi\"";
                            cmd3=cmd3.arg(user).arg(lsdvdDat1);
                            QString c3 =QString::fromUtf8(tr("echo Borrando avi temporal..."));
                            QString cmd4 = "su - %1 -c \"rm -vf frameno.avi\"";
                            cmd4=cmd4.arg(user);
                            QString cm3 =QString::fromUtf8(tr("echo Construyendo video seleccionado..."));
                            QString cmd5 = "su - %1 -c \"ffmpeg -i tmp_avi.avi -sameq -s %4 -acodec libmp3lame -ab %3 -y %2.wmv\"";
                            cmd5=cmd5.arg(user).arg(fileName1).arg(Audio).arg(resolucion);
                            QString cm4 =QString::fromUtf8(tr("echo Borrando avi temporal..."));
                            QString cmd6 ="su - %1 -c \"rm -vf temp_avi.avi\"";
                            cmd6=cmd6.arg(user);
                            QStringList comandos;
                            comandos<< cm << cmd1 << cm1 << cmd2 << cm2 << cmd3 << c3 << cmd4 << cm3 << cmd5 << cm4 <<cmd6;

                            if (mib != 0)
                            delete mib;
                            mib = new DrakeProcesos(comandos, this);
                            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
            }
        }
    }
}

void recoverdrake::on_actionDvd_flv_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .DVD a .flv.");
    Refrescar();
    if (mencoder == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"mencoder\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        if (lsdvdDat == "0")
        {
            QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"lsdvd\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
            m.exec();
        }
        else
        {
            if (ffmpeg == "0")
            {
                QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
                m.exec();
            }
            else
            {
                system("eject");
                QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                m.setText(tr(QString::fromUtf8("Introduce el medio a ripear.<p>" "Pulsa Ok para continuar...")));
                m.exec();
                system("eject -t");
                QMessageBox mA; if (Stilo == "A") mA.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                mA.setText(tr("Espera a que el notificador de dispositivos te avise de que esta cargado el disco y pulsa Ok para continuar."));
                mA.exec();
                drakeSistema drake;
                lsdvd = drake.getlsdvd();
                QString lsdvdDat = lsdvd.right(3);
                QString lsdvdDat1= lsdvdDat.left(2);
                int respuesta = 0;
                if (Mensaka!="Activo")
                {
                    respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Ripear DVD y convertir a .flv")),
                                       QString::fromUtf8(tr("<center><b>Ripear DVD y convertir a .flv</b></center><p>"

                                       "Ripeado de DVD y conversion posterior a formato flv.<p>"

                                       "Solo se puede convertir un fichero por vez.<p>"

                                       "Este proceso, puede tardar un tiempo, se paciente, "
                                       "la espera lo merece.<p>"

                                       "<B>NOTA: Debes esperar a que termine completamente el "
                                       "proceso seleccionado, el cual te sera notificado "
                                       "cuando finalice en la consola de procesos.</B><p>"

                                       "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
                }
                else
                {
                    respuesta=QMessageBox::Ok;
                }
                if (respuesta == QMessageBox::Ok){

                            QString path="/home/%1/";
                            path=path.arg(user);

                            QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero .flv?")),
                                                path,trUtf8(tr("Archivo .flv (*.flv)")));
                            if (fileNameDirectori.isEmpty())
                            {
                                ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                                return;
                            }
                            QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".flv","");
                            QString cm =QString::fromUtf8(tr("echo Creando fichero avi temporal..."));
                            QString cmd1 = "su - %1 -c \"mencoder dvd://%2 -ovc frameno -o frameno.avi -oac mp3lame -lameopts vbr=3 -alang es\"";
                            cmd1=cmd1.arg(user).arg(lsdvdDat1);
                            QString cm1 =QString::fromUtf8(tr("echo Realizando primera pasada..."));
                            QString cmd2 = "su - %1 -c \"mencoder dvd://%2 -ovc lavc -lavcopts vcodec=mpeg4:vpass=1:vbitrate=1247 -oac copy -o tmp_avi.avi\"";
                            cmd2=cmd2.arg(user).arg(lsdvdDat1);
                            QString cm2 =QString::fromUtf8(tr("echo Realizando segunda pasada..."));
                            QString cmd3 = "su - %1 -c \"mencoder dvd://0%2 -ovc lavc -lavcopts vcodec=mpeg4:vpass=2:vbitrate=1247 -oac copy -o tmp_avi.avi\"";
                            cmd3=cmd3.arg(user).arg(lsdvdDat1);
                            QString c3 =QString::fromUtf8(tr("echo Borrando avi temporal..."));
                            QString cmd4 = "su - %1 -c \"rm -vf frameno.avi\"";
                            cmd4=cmd4.arg(user);
                            QString cm3 =QString::fromUtf8(tr("echo Construyendo video seleccionado..."));
                            QString cmd5 = "su - %1 -c \"ffmpeg -i tmp_avi.avi -sameq -threads 2 -r 30.00 -threads 1 -pix_fmt yuv420p -g 300 -qmin 3 -b 512k -async 50 -ar 11025 -ac 1 -s %4 -acodec libmp3lame -ab %2 -y %3.flv\"";
                            cmd5=cmd5.arg(user).arg(fileName1).arg(Audio).arg(resolucion);
                            QString cm4 =QString::fromUtf8(tr("echo Borrando avi temporal..."));
                            QString cmd6 ="su - %1 -c \"rm -vf temp_avi.avi\"";
                            cmd6=cmd6.arg(user);
                            QStringList comandos;
                            comandos<< cm << cmd1 << cm1 << cmd2 << cm2 << cmd3 << c3 << cmd4 << cm3 << cmd5 << cm4 <<cmd6;

                            if (mib != 0)
                            delete mib;
                            mib = new DrakeProcesos(comandos, this);
                            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
            }
        }
    }
}

void recoverdrake::on_actionDvd_3gp_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .DVD a .3gp.");
    Refrescar();
    if (mencoder == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"mencoder\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        if (lsdvdDat == "0")
        {
            QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"lsdvd\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
            m.exec();
        }
        else
        {
            if (ffmpeg == "0")
            {
                QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
                m.exec();
            }
            else
            {
                system("eject");
                QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                m.setText(tr(QString::fromUtf8("Introduce el medio a ripear.<p>" "Pulsa Ok para continuar...")));
                m.exec();
                system("eject -t");
                QMessageBox mA; if (Stilo == "A") mA.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                mA.setText(tr("Espera a que el notificador de dispositivos te avise de que esta cargado el disco y pulsa Ok para continuar."));
                mA.exec();
                drakeSistema drake;
                lsdvd = drake.getlsdvd();
                QString lsdvdDat = lsdvd.right(3);
                QString lsdvdDat1= lsdvdDat.left(2);
                int respuesta = 0;
                if (Mensaka!="Activo")
                {
                    respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Ripear DVD y convertir a .3gp")),
                                       QString::fromUtf8(tr("<center><b>Ripear DVD y convertir a .3gp</b></center><p>"

                                       "Ripeado de DVD y conversion posterior a formato 3gp.<p>"

                                       "Solo se puede convertir un fichero por vez.<p>"

                                       "Este proceso, puede tardar un tiempo, se paciente, "
                                       "la espera lo merece.<p>"

                                       "<B>NOTA: Debes esperar a que termine completamente el "
                                       "proceso seleccionado, el cual te sera notificado "
                                       "cuando finalice en la consola de procesos.</B><p>"

                                       "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
                }
                else
                {
                    respuesta=QMessageBox::Ok;
                }
                if (respuesta == QMessageBox::Ok){

                            QString path="/home/%1/";
                            path=path.arg(user);

                            QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero .3gp?")),
                                                path,trUtf8(tr("Archivo .3gp (*.3gp)")));
                            if (fileNameDirectori.isEmpty())
                            {
                                ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                                return;
                            }
                            QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".3gp","");
                            QString cm =QString::fromUtf8(tr("echo Creando fichero avi temporal..."));
                            QString cmd1 = "su - %1 -c \"mencoder dvd://%2 -ovc frameno -o frameno.avi -oac mp3lame -lameopts vbr=3 -alang es\"";
                            cmd1=cmd1.arg(user).arg(lsdvdDat1);
                            QString cm1 =QString::fromUtf8(tr("echo Realizando primera pasada..."));
                            QString cmd2 = "su - %1 -c \"mencoder dvd://%2 -ovc lavc -lavcopts vcodec=mpeg4:vpass=1:vbitrate=1247 -oac copy -o tmp_avi.avi\"";
                            cmd2=cmd2.arg(user).arg(lsdvdDat1);
                            QString cm2 =QString::fromUtf8(tr("echo Realizando segunda pasada..."));
                            QString cmd3 = "su - %1 -c \"mencoder dvd://0%2 -ovc lavc -lavcopts vcodec=mpeg4:vpass=2:vbitrate=1247 -oac copy -o tmp_avi.avi\"";
                            cmd3=cmd3.arg(user).arg(lsdvdDat1);
                            QString c3 =QString::fromUtf8(tr("echo Borrando avi temporal..."));
                            QString cmd4 = "su - %1 -c \"rm -vf frameno.avi\"";
                            cmd4=cmd4.arg(user);
                            QString cm3 =QString::fromUtf8(tr("echo Construyendo video seleccionado..."));
                            QString cmd5 = "su - %1 -c \"ffmpeg -i tmp_avi.avi -sameq -s qcif -r 12 -ac 1 -ar 8000 -b 30 -ab 12.2K -s %3 -y %2.3gp\"";
                            cmd5=cmd5.arg(user).arg(fileName1).arg(Audio).arg(resolucion);
                            QString cm4 =QString::fromUtf8(tr("echo Borrando avi temporal..."));
                            QString cmd6 ="su - %1 -c \"rm -vf temp_avi.avi\"";
                            cmd6=cmd6.arg(user);
                            QStringList comandos;
                            comandos<< cm << cmd1 << cm1 << cmd2 << cm2 << cmd3 << c3 << cmd4 << cm3 << cmd5 << cm4 <<cmd6;

                            if (mib != 0)
                            delete mib;
                            mib = new DrakeProcesos(comandos, this);
                            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
            }
        }
    }
}

void recoverdrake::on_actionDvd_mp4_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .DVD a .mp4.");
    Refrescar();
    if (mencoder == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"mencoder\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        if (lsdvdDat == "0")
        {
            QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"lsdvd\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
            m.exec();
        }
        else
        {
            if (ffmpeg == "0")
            {
                QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
                m.exec();
            }
            else
            {
        system("eject");
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("Introduce el medio a ripear.<p>" "Pulsa Ok para continuar...")));
        m.exec();
        system("eject -t");
        QMessageBox mA; if (Stilo == "A") mA.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        mA.setText(tr("Espera a que el notificador de dispositivos te avise de que esta cargado el disco y pulsa Ok para continuar."));
        mA.exec();
        drakeSistema drake;
        lsdvd = drake.getlsdvd();
        QString lsdvdDat = lsdvd.right(3);
        QString lsdvdDat1= lsdvdDat.left(2);
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Ripear DVD y convertir a .mp4")),
                               QString::fromUtf8(tr("<center><b>Ripear DVD y convertir a .mp4</b></center><p>"

                               "Ripeado de DVD y conversion posterior a formato mp4.<p>"

                               "Solo se puede convertir un fichero por vez.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Convertir formato?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                    QString path="/home/%1/";
                    path=path.arg(user);

                    QString fileNameDirectori = QFileDialog::getSaveFileName(this,QString::fromUtf8(tr("Guardar el fichero .mp4?")),
                                        path,trUtf8(tr("Archivo .mp4 (*.mp4)")));
                    if (fileNameDirectori.isEmpty())
                    {
                        ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                        return;
                    }
                    QString fileName1 = fileNameDirectori.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".mp4","");
                    QString cm =QString::fromUtf8(tr("echo Creando fichero avi temporal..."));
                    QString cmd1 = "su - %1 -c \"mencoder dvd://%2 -ovc frameno -o frameno.avi -oac mp3lame -lameopts vbr=3 -alang es\"";
                    cmd1=cmd1.arg(user).arg(lsdvdDat1);
                    QString cm1 =QString::fromUtf8(tr("echo Realizando primera pasada..."));
                    QString cmd2 = "su - %1 -c \"mencoder dvd://%2 -ovc lavc -lavcopts vcodec=mpeg4:vpass=1:vbitrate=1247 -oac copy -o tmp_avi.avi\"";
                    cmd2=cmd2.arg(user).arg(lsdvdDat1);
                    QString cm2 =QString::fromUtf8(tr("echo Realizando segunda pasada..."));
                    QString cmd3 = "su - %1 -c \"mencoder dvd://0%2 -ovc lavc -lavcopts vcodec=mpeg4:vpass=2:vbitrate=1247 -oac copy -o tmp_avi.avi\"";
                    cmd3=cmd3.arg(user).arg(lsdvdDat1);
                    QString c3 =QString::fromUtf8(tr("echo Borrando avi temporal..."));
                    QString cmd4 = "su - %1 -c \"rm -vf frameno.avi\"";
                    cmd4=cmd4.arg(user);
                    QString cm3 =QString::fromUtf8(tr("echo Construyendo video seleccionado..."));
                    QString cmd5 = "su - %1 -c \"ffmpeg -i tmp_avi.avi -sameq -s qcif -r 12 -ac 1 -ar 8000 -b 30 -ab 12.2K -s %3 -y %2.mp4\"";
                    cmd5=cmd5.arg(user).arg(fileName1).arg(Audio).arg(resolucion);
                    QString cm4 =QString::fromUtf8(tr("echo Borrando avi temporal..."));
                    QString cmd6 ="su - %1 -c \"rm -vf temp_avi.avi\"";
                    cmd6=cmd6.arg(user);
                    QStringList comandos;
                    comandos<< cm << cmd1 << cm1 << cmd2 << cm2 << cmd3 << c3 << cmd4 << cm3 << cmd5 << cm4 <<cmd6;

                    if (mib != 0)
                    delete mib;
                    mib = new DrakeProcesos(comandos, this);
                    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                    int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                    else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
            }
        }
    }
}

void recoverdrake::on_actionSaber_dependencias_de_librerias_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Saber librerias de binarios");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Saber librerias de binarios")),
                           QString::fromUtf8(tr("<center><b>Saber librerias de binarios</b></center><p>"

                           "Mediante esta utilidad, puedes saber todas las librerias "
                           "dependientes de un programa, a nivel informativo.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Comprobar dependencias de librerias?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString path="/usr/sbin/";

            QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo binario")),
                                path);
            if (fileNameOrigen.isEmpty())
            {
                ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                return;
            }
            QString cm= QString::fromUtf8(tr("echo Comprobando librerias que intervienen en el archivo seleccionado..."));
            QString cmd1 = "ldd -v %1";
            cmd1=cmd1.arg(fileNameOrigen);
            QStringList comandos;
            comandos<< cm << cmd1;

            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionActualizar_refrescar_soportes_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Actualizar soportes.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Actualizar soportes")),
                           QString::fromUtf8(tr("<center><b>Actualizar soportes</b></center><p>"
                           "Mediante esta utilidad, se actualizaran todos los "
                           "soportes para tener todas las sintesis al dia.<p>"
                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"
                           "&iquest;Actualizar soportes?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cm= QString::fromUtf8(tr("echo Refrescando soportes..."));
            QString cmd1 = "urpmi.update -a";            
            QStringList comandos;
            comandos<< cm << cmd1;

            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionSaber_paquetes_dependientes_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Saber dependencias de paquete.");
    Refrescar();
    int respuesta = 0;
    bool ok;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Saber dependencias de paquete")),
                           QString::fromUtf8(tr("<center><b>Saber dependencias de paquete</b></center><p>"

                           "Mediante esta utilidad, puedes saber todos los paquetes "
                           "necesarios para una buena instalacion de un paquete "
                           "que queramos instalar, para que no haya problema de "
                           "dependencias.<p>"

                           "Muy util, cuando al instalar un paquete nos falla algo.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Comprobar dependencias de paquete?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString texto = QInputDialog::getText(this, QString::fromUtf8(tr("Nombre del paquete a buscar")),
            QString::fromUtf8(tr("Introduzca el nombre del paquete a buscar.<P> "

            "<FONT COLOR=\"RED\">Ejemplo:<p>"

            "<FONT COLOR=\"RED\">RecoverDrake")),
            QLineEdit::Normal,
            "",
            &ok);
            if (ok && !texto.isEmpty()){

                QString cm= QString::fromUtf8(tr("echo Localizando las dependencias del paquete "+texto+"..."));
                QString cmd1 = "urpmq -d %1";
                cmd1=cmd1.arg(texto);
                QStringList comandos;
                comandos<< cm << cmd1;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
            }
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionSaber_el_repositorio_de_un_paquete_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Saber repositorio de un paquete.");
    Refrescar();
    int respuesta = 0;
    bool ok;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Saber repositorio de un paquete")),
                           QString::fromUtf8(tr("<center><b>Saber repositorio de un paquete</b></center><p>"

                           "Mediante esta utilidad, puedes saber a que repositorio "
                           "pertenece un paquete en cuestion.<p>"

                           "Se lo mas expecifico posible para la busqueda, ya que si pones el "
                           "nombre lo mas completo posible, te limitara a menos posibilidades.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Saber repositorio de un paquete?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString texto = QInputDialog::getText(this, QString::fromUtf8(tr("Nombre del paquete a buscar")),
            QString::fromUtf8(tr("Introduzca el nombre del paquete a buscar.<P> "

            "<FONT COLOR=\"RED\">Ejemplo:<p>"

            "<FONT COLOR=\"RED\">RecoverDrake")),
            QLineEdit::Normal,
            "",
            &ok);
            if (ok && !texto.isEmpty()){

                QString cm= QString::fromUtf8(tr("echo Localizando repositorio al que pertenece el paquete "+texto+"..."));
                QString cmd1 = "urpmf --filename --size --summary --license --vendor -m %1";
                cmd1=cmd1.arg(texto);
                QStringList comandos;
                comandos<< cm << cmd1;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
            }
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionLocalizador_de_archivos_en_repositorios_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Localizador de archivos en repositorios.");
    Refrescar();
    int respuesta = 0;
    bool ok;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Localizador de archivos en repositorios")),
                           QString::fromUtf8(tr("<center><b>Localizador de archivos en repositorios</b></center><p>"

                           "Mediante esta utilidad, puedes saber a que repositorio y paquete "
                           "pertenece un archivo en cuestion.<p>"

                           "Se lo mas expecifico posible para la busqueda, ya que si pones el "
                           "nombre lo mas completo posible, te limitara a menos posibilidades.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Localizar archivo en repositorios?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString texto = QInputDialog::getText(this, QString::fromUtf8(tr("Nombre del archivo a buscar")),
            QString::fromUtf8(tr("Introduzca el nombre del archivo a buscar.<P> "

            "<FONT COLOR=\"RED\">Ejemplo:<p>"

            "<FONT COLOR=\"RED\">libc.so.6")),
            QLineEdit::Normal,
            "",
            &ok);
            if (ok && !texto.isEmpty()){

                QString cm= QString::fromUtf8(tr("echo Localizando repositorio y paquete al que pertenece el archivo "+texto+"..."));
                QString cmd1 = "urpmf %1";
                cmd1=cmd1.arg(texto);
                QStringList comandos;
                comandos<< cm << cmd1;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
            }
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionCopiar_iso_a_CD_DVD_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Copiar ISO a CD/DVD.");
    Refrescar();
    if (cdrkit == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"cdrkit\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Copiar iso a soporte DVD/CD")),
                               QString::fromUtf8(tr("<center><b>Copiar iso a soporte DVD/CD</b></center><p>"

                               "Quemado de disco DVD/CD sobre una imagen ISO.<p>"

                               "Para un buen funcionamiento del lector/grabador, es "
                               "importante que se deje el disco introducido en la bandeja "
                               "abierta, ya que el proceso la cerrara automaticamente.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "Tambien se procedera a la expulsion del disco grabado "
                               "una vez haya finalizado.<p>"

                               "PRECAUCION: Cualquier disco que se introduzca SOBREESCRIBIRA "
                               "el contenido que hubiera por lo que se perderia su contenido original "
                               "y si fuera un regrabable, este sera formateado automaticamente, sin "
                               "previo aviso.<p>"

                               "&iquest;Copiar ISO a destino DVD/CD?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path="/home/%1/";
                path=path.arg(user);

                QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo .iso")),
                                    path,trUtf8(tr("Archivo .iso (*.iso)")));
                if (fileNameOrigen.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString cm= QString::fromUtf8(tr("echo Copiando iso en disco..."));
                QString cmd1 = "su - %1 -c \"cdrecord -v dev=%2 speed=%3 -overburn -data %4\"";
                cmd1=cmd1.arg(user).arg(Dev).arg(velocidad).arg(fileNameOrigen);
                QString cm1= QString::fromUtf8(tr("echo Expulsando disco..."));
                QString cmd2 = "eject /cdrw/";
                QStringList comandos;
                comandos<< cm << cmd1 << cm1 << cmd2;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionCopiar_CD_DVD_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Copiar CD/DVD.");
    Refrescar();
    if (cdrkit == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"cdrkit\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Copiar DVD/CD")),
                               QString::fromUtf8(tr("<center><b>Copiar DVD/CD</b></center><p>"

                               "Duplicado de disco DVD/CD.<p>"

                               "Para un buen funcionamiento del lector/grabador, es "
                               "importante que se deje el disco introducido en la bandeja "
                               "abierta, ya que el proceso la cerrara automaticamente.<p>"

                               "Este proceso, puede tardar un tiempo, se paciente, "
                               "la espera lo merece.<p>"

                               "PRECAUCION: Cualquier disco que se introduzca SOBREESCRIBIRA "
                               "el contenido que hubiera por lo que se perderia su contenido original "
                               "y si fuera un regrabable, este sera formateado automaticamente, sin "
                               "previo aviso.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "Tambien se procedera a la expulsion del disco grabado "
                               "una vez haya finalizado.<p>"

                               "&iquest;Copiar DVD/CD?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString cm= QString::fromUtf8(tr("echo Creando imagen temporal..."));
                QString cmd = "su - %1 -c \"dd if=/dev/cdrom of=imagenburn.iso bs=2048 count=140564\"";
                cmd=cmd.arg(user);
                QString cm1= QString::fromUtf8(tr("echo Grabando disco..."));
                QString cmd1 = "su - %1 -c \"cdrecord -v dev=%2 speed=%3 -overburn -data imagenburn.iso\"";
                cmd1=cmd1.arg(user).arg(Dev).arg(velocidad);
                QString cm2= QString::fromUtf8(tr("echo Expulsando medio..."));
                QString cmd2 = "eject /cdrw/";
                QString cm3= QString::fromUtf8(tr("echo Borrando imagen temporal..."));
                QString cmd3 = "su - %1 -c \"rm -vf imagenburn.iso\"";
                cmd3=cmd3.arg(user);
                QStringList comandos;
                comandos<< cm << cmd << cm1 << cmd1 << cm2 << cmd2 << cm3 << cmd3;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionVaciar_papeleras_del_sistema_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Vaciar papeleras del sistema.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Vaciar papelera de root")),
                           QString::fromUtf8(tr("<center><b>Vaciar papelera de root</b></center><p>"

                           "Con esta opcion vamos a ganar espacio en nuestro disco duro.<p>"

                           "Puede que por algun motivo hayas utilizado root para alguna "
                           "tarea y hayas borrado archivos y se este utilizando un espacio en "
                           "el disco duro que se esta desperdiciando tontamente, por lo que con esta tarea "
                           "de mantenimiento se borrara definitivamente el contenido de la papelera de root, "
                           "ubicada en una carpeta oculta dentro de /home, llamada .Trash-0 y "
                           "que al no estar visible, por defecto, puede estar perjudicando al espacio de tu "
                           "disco duro.<p>"

                           "PRECAUCION: Tenga en cuenta lo que esta haciendo, ya que dichos "
                           "ficheros y carpetas no se podran recuperar despues de vaciar las papeleras.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Comenzar tarea de mantenimiento?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cmd2 = QString::fromUtf8(tr("echo Vaciando papelera de root..."));
            system("rm -vr -f /home/.Trash-0/files/*");
            system("rm -vr -f /home/.Trash-0/info/*");
            QString cmd3 = QString::fromUtf8(tr("echo Espacio ocupado despues del mantenimiento..."));
            QString cmd4 = "du /home/.Trash-0/";
            QStringList comandos;
            comandos<< cmd2 << cmd3 << cmd4;

            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionLimpiar_temporales_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Vaciar archivos temporales.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Vaciar temporales")),
                           QString::fromUtf8(tr("<center><b>Vaciar temporales</b></center><p>"

                           "Con esta opcion vamos a ganar espacio en nuestro disco duro.<p>"

                           "En las carpetas /tmp se van quedando residuos que no son necesarios "
                           "y se esta utilizando un espacio en el disco duro que se esta desperdiciando "
                           "tontamente, por lo que con esta tarea de mantenimiento se borrara definitivamente "
                           "el contenido de dichos temporales.<p>"

                           "PRECAUCION: Tenga en cuenta lo que esta haciendo, ya que dichos "
                           "ficheros y carpetas no se podran recuperar despues del mantenimiento, ademas "
                           "de que se debería reiniciar el sistema ya que algunos temporales pueden ser "
                           "requeridos por el sistema y deben ser reconstruidos.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Comenzar tarea de mantenimiento?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cm = QString::fromUtf8(tr("echo Borrando temporales..."));
            system("rm -vr -f /home/'"+user+"'/tmp/*");
            system("rm -vr -f /tmp/*");
            system ("rm -vr -f /root/tmp/*");
            QString cmd = QString::fromUtf8(tr("echo Procesos de limpieza realizados."));
            QStringList comandos;
            comandos<< cm << cmd;

            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionVaciar_logs_de_RecoverDrake_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Vaciar logs de sucesos de RecoverDrake.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Vaciar logs de RecoverDrake")),
                           QString::fromUtf8(tr("<center><b>Vaciar logs</b></center><p>"
                           "Se borrara el registro de sucesos de RecoverDrake.<p>"
                           "PROCEDA CON PRECAUCION. Perdera todos los registros de "
                           "uso de RecoverDrake.<p>"
                           "&iquest;Borrar Logs activo?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cm = QString::fromUtf8(tr("echo Borrando logs de RecoverDrake..."));
            system("rm -vf /usr/share/RecoverDrake/RecoverDrake.log");
            QString cmd = "date";
            QStringList comandos;
            comandos<< cm << cmd;

            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionMenu_contextual_de_root_en_usuario_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Acceder a Menu contextual de root en usuario normal.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Menu contextual con operaciones de root")),
                           QString::fromUtf8(tr("<center><b>Privilegios de root en usuario normal</b></center><p>"
                           "Con esta opcion podemos acceder a realizar mantenimientos y opciones de root "
                           "desde un usuario normal sin privilegios avanzados con solo "
                           "introducir la clave de root, cuando se requerida.<p>"
                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"
                           "&iquest;Instalar menu contextual de root?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cm = QString::fromUtf8(tr("echo Instalando paquete seleccionado..."));
            QString comando="urpmi --fuzzy -a --auto kde-rootactions-servicemenu";
            QStringList comandos;
            comandos<< cm << comando;
            if (mib != 0)
                delete otros;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionHacer_DVD_de_video_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Hacer DVD de video.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Hacer DVD de video")),
                           QString::fromUtf8(tr("<center><b>Hacer DVD de video</b></center><p>"

                           "Con esta opcion podemos crear un DVD a partir de un archivo de video en "
                           "otros formatos.<p>"

                           "PRECAUCION: Cualquier disco que se introduzca SOBREESCRIBIRA "
                           "el contenido que hubiera por lo que se perderia su contenido original "
                           "y si fuera un regrabable, este sera formateado automaticamente, sin "
                           "previo aviso.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Hacer DVD de video?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok)
    {
        burn *quemar=new burn(this);
        if (Stilo == "A")
            quemar->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        quemar->Valor("DVDvideo");
        quemar->showMaximized();
        quemar->exec();
    }
    ui->progressBar->hide();
    ui->pushButton_2->hide();
    ui->label_13->hide();
    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;
}

void recoverdrake::on_actionHacer_CD_DVD_de_audio_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Hacer CD/DVD de audio.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
    respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Hacer CD de audio")),
                           QString::fromUtf8(tr("<center><b>Hacer CD de audio</b></center><p>"
                           "Con esta opcion podemos crear un CD de audio desde ficheros "
                           "alojados en su equipo.<p>"
                           "PRECAUCION: Cualquier disco que se introduzca SOBREESCRIBIRA "
                           "el contenido que hubiera por lo que se perderia su contenido original "
                           "y si fuera un regrabable, este sera formateado automaticamente, sin "
                           "previo aviso.<p>"
                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"
                           "&iquest;Hacer CD de audio?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok)
    {
        burn *quemar=new burn(this);
        if (Stilo == "A")
        quemar->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            quemar->Valor("CDaudio");
        quemar->showMaximized();
        quemar->exec();
    }
    ui->progressBar->hide();
    ui->pushButton_2->hide();
    ui->label_13->hide();
    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;
}

void recoverdrake::on_actionHacer_CD_de_video_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Hacer CD de video.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
    respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Hacer CD de Video (VCD)")),
                           QString::fromUtf8(tr("<center><b>Hacer CD de Video (VCD)</b></center><p>"

                           "Con esta opcion podemos crear un CD de video desde ficheros "
                           "alojados en su equipo, compatible con todos los DVD caseros "
                           "del mercado, aunque en la actualidad por el peso de las ultimas "
                           "peliculas, no se suele utilizar mucho que digamos.<p>"

                           "PRECAUCION: Cualquier disco que se introduzca SOBREESCRIBIRA "
                           "el contenido que hubiera por lo que se perderia su contenido original "
                           "y si fuera un regrabable, este sera formateado automaticamente, sin "
                           "previo aviso.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Hacer CD de Video?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok)
    {
        burn *quemar=new burn(this);
        if (Stilo == "A")if (Stilo == "A")
            quemar->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        quemar->Valor("CDvideo");
        quemar->showMaximized();
    }
    ui->progressBar->hide();
    ui->pushButton_2->hide();
    ui->label_13->hide();
    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;
}

void recoverdrake::on_actionAyuda_de_RecoverDrake_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Ayuda de RecoverDrake.");
    if (Window == 0)
    {
        help *hp=new help;
        if (Stilo == "A")
            hp->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        hp->showMaximized();
        hp->exec();
    }
    else if (Window == 1)
    {
        hp=new help;
        QMdiSubWindow *existing = buscarHelp();
        if(!existing)
        {
            Conectar();
            ui->tabWidget->insertTab(Pestanas,ui->tab_50,tr("Ayuda"));
            ui->tabWidget->setTabIcon(Pestanas,QIcon(":/Imagenes/help.png"));
            ui->tabWidget->setCurrentPage(Pestanas);
            Pagina8 = Pestanas;
            ui->mdiArea_8->addSubWindow(hp);
            connect(hp, SIGNAL(Cerrar()), this, SLOT(CerrarHp()));
            if (Stilo == "A")
                hp->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            hp->showMaximized();
            hp->Valor("Quitar");
            hp->exec();
        }
        else
        {
            ui->tabWidget->setCurrentPage(Pagina8);
            ui->mdiArea_8->setActiveSubWindow(existing);
        }
        hp->setWindowState(Qt::WindowMaximized);
    }
}

void recoverdrake::on_actionAcerca_de_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Acerda de...");
    Refrescar();
    notas *note=new notas(this);
    if (Stilo == "A")
        note->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
    note->exec();
    ui->progressBar->hide();
    ui->pushButton_2->hide();
    ui->label_13->hide();ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
}

void recoverdrake::actionConsola_como_root()
{    
    Refrescar();
    connect(ui->actionConsola_como_root,SIGNAL(triggered()),this,SLOT(Konsola_root()));
}

void recoverdrake::Konsola_root()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Consola como root.");
    Refrescar();
    system("konsole");
    ui->progressBar->hide();
    ui->pushButton_2->hide();
    ui->label_13->hide();ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
}

void recoverdrake::actionAcerca_de_Qt()
{
    connect(ui->actionAcerca_de_Qt,SIGNAL(triggered()),qApp,SLOT(aboutQt()));
}

void recoverdrake::mibEscribir(QString valor)
{
    valor = valor.remove("# ");
    bool opcion4;
    opcion4=ui->actionActivar_Logs_de_sucesos->isChecked();
    QSettings seting("myorg","Aplica");
    seting.setValue("opcion4",opcion4);
    ui->textEdit->append(valor);
    if (opcion4==true)
     {        
        system(QString::fromUtf8("echo '"+valor+"' >> /usr/share/RecoverDrake/RecoverDrake.log"));
     }
}

void recoverdrake::mibprogreso(QString Dat)
{    
    ui->progressBar->setValue(Dat.toInt());
}

void recoverdrake::mibFin()
{
    disconnect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    disconnect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    disconnect(mib, SIGNAL(DatoComand(QString)), this, SLOT(mibReferencia(QString)));
    disconnect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibRecibir(QString)));
    disconnect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    ui->progressBar->setValue(0);   
    if (UpDate == 1)
        UpDate = 0;
    this->Actualizar();
    if (Reconfigurar == "Si")
    {
        Reconfigurar = "No";
        QFuture<void> f1 = QtConcurrent::run(this, &recoverdrake::Paquetes);
        Q_UNUSED(f1);
    }
}

void recoverdrake::mibFinal()
{
    disconnect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    disconnect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    disconnect(mib, SIGNAL(DatoComand(QString)), this, SLOT(mibReferencia(QString)));
    disconnect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibRecibir(QString)));
    disconnect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    ui->progressBar->setValue(0);
    ui->progressBar->hide();
    ui->pushButton_2->hide();
    ui->label_13->hide();
    ui->tabWidget->setCurrentPage(pagina);
    ui->tabWidget_8->setCurrentPage(0);
}

void recoverdrake::closeEvent(QCloseEvent *event)
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Introduccion de clave de desbloqueo.");
    bool opcion3;
    opcion3=ui->actionMinimizar_al_Salir->isChecked();
    QSettings seting("myorg","Aplica");
    seting.setValue("opcion3",opcion3);
    if (opcion3==true)
    {
        if (trayIcon->isVisible())
        {
            if (Bloquear == 1)
            {
                int respuesta = 0;
                respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Accion a realizar")),
                                       QString::fromUtf8(tr("Tienes activado el control parental.<p>"
                                       "NOTA: No se puede cerrar el programa sin introducir la clave correspondiente.<p>"
                                       "&iquest;Cerrar completamente?")), QMessageBox::Ok, QMessageBox::No);
                if (respuesta == QMessageBox::Ok)
                {
                    Desbloquear *pass=new Desbloquear(this);
                    if (Stilo == "A")
                        pass->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                    pass->exec();
                    DatoRev=pass->Resultado;
                    if (DatoRev == "1")
                    {
                        mediaObject->stop();
                        QTest::qWait(500);
                        close();
                    }
                    else if(DatoRev == "0")
                    {                        
                        trayIconMenu->removeAction(quitAction);
                        trayIcon->showMessage("Control Systray activado",QString::fromUtf8(tr("El programa seguira corriendo en la bandeja del sistema.")),QSystemTrayIcon::Information, 3000);
                        hide();
                        event->ignore();
                    }
                }
                else
                {
                    trayIconMenu->removeAction(quitAction);
                    trayIcon->showMessage("Control Systray activado",QString::fromUtf8(tr("El programa seguira corriendo en la bandeja del sistema.")),QSystemTrayIcon::Information, 3000);
                    hide();
                    event->ignore();
                }
            }
            else if (Bloquear == 0)
            {
                if (ControlClose == 1)
                {
                    mediaObject->stop();
                    QTest::qWait(500);
                    close();
                }
                else
                {
                    trayIcon->showMessage("Control Systray activado",QString::fromUtf8(tr("El programa seguira corriendo en la bandeja del sistema.")),QSystemTrayIcon::Information, 3000);
                    hide();
                    event->ignore();
                }
            }
        }
    }
    else
    {
        if (Bloquear == 1)
        {
            Desbloquear *pass=new Desbloquear(this);
            if (Stilo == "A")
                pass->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            pass->exec();
            DatoRev=pass->Resultado;
            if (DatoRev == "1")
            {
                mediaObject->stop();
                QTest::qWait(500);
                close();
            }
            else if(DatoRev == "0")
            {
                event->ignore();
            }
        }
        else if (Bloquear == 0)
        {
            mediaObject->stop();
            QTest::qWait(500);
            close();
        }
    }
}

void recoverdrake::on_actionMinimizar_al_Salir_triggered(bool d)
{   
    Refrescar();
    QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
    bool opcion3;
    opcion3=ui->actionMinimizar_al_Salir->isChecked();
    QSettings seting("myorg","Aplica");
    seting.setValue("opcion3",opcion3);
    if (d==true)
     {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Minimizar a la bandeja del sistema")),
                        QString::fromUtf8(tr("Puede mandar el programa a la bandeja del sistema "
                        "en vez de cerrar directamente al pulsar el cierre de ventana.<p>"

                        "Para terminar completamente el uso del programa seleccione "
                        "<b>Quit</b> del menu contextual del icono, pulsando el botón <b>Salir</b> o desactivando de "
                        "nuevo esta opcion.<p>"

                        "&iquest;Activar el minimizar a la bandeja?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }

        if (respuesta == QMessageBox::Ok)
        {
            QString hora = QTime::currentTime().toString("hh:mm:ss");
            ui->textEdit_4->append(""+hora+"-- Activado minimizar a la bandeja del sistema.");
            ui->actionMinimizar_al_Salir->setIcon(QIcon(":/Imagenes/good.png"));
            m.setText(tr(QString::fromUtf8("Se ha activado el icono de la bandeja del sistema")));
        }
        ui->actionMinimizar_al_Salir->setChecked(true);
        opcion3=ui->actionMinimizar_al_Salir->isChecked();
        QSettings seting("myorg","Aplica");
        seting.setValue("opcion3",opcion3);
        ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;
     }
    else
    {
        QString hora = QTime::currentTime().toString("hh:mm:ss");
        ui->textEdit_4->append(""+hora+"-- <b><FONT COLOR=\"RED\">Desactivado minimizar a la bandeja del sistema.");
        ui->actionMinimizar_al_Salir->setIcon(QIcon(""));
        m.setText(tr(QString::fromUtf8("Se ha desactivado el icono de la bandeja del sistema.<p>""Utiliza esta opcion para volver a activarla.")));
    }
    m.exec();
    ui->progressBar->hide();
    ui->pushButton_2->hide();
    ui->label_13->hide();ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
}

void recoverdrake::crearIcono()
{
    trayIconMenu = new QMenu(this);
    trayIconMenu->addAction(minimizeAction);
    minimizeAction->setIcon(QIcon(":/Imagenes/menos.png"));
    trayIconMenu->addAction(maximizeAction);
    maximizeAction->setIcon(QIcon(":/Imagenes/mas.png"));
    trayIconMenu->addAction(restoreAction);
    restoreAction->setIcon(QIcon(":/Imagenes/sustituir.png"));
    trayIconMenu->addSeparator();
    trayIconMenu->addAction(quitAction);
    quitAction->setIcon(QIcon(":/Imagenes/puerta.png"));
    trayIcon = new QSystemTrayIcon(this);
    trayIcon->setContextMenu(trayIconMenu);
}

void recoverdrake::iconActivated(QSystemTrayIcon::ActivationReason reason)
{
    switch (reason)
    {
    case QSystemTrayIcon::DoubleClick:
        showNormal();
        break;
    case QSystemTrayIcon::Trigger:
        trayIcon->showMessage("Control Systray activado",QString::fromUtf8(tr("Pulse Boton derecho para elegir opcion.")),QSystemTrayIcon::Information, 1000);
        break;
    default:;
    }
}

void recoverdrake::setIcono()
{
    trayIcon->setIcon(QIcon("/usr/share/RecoverDrake/logo.png"));
}

void recoverdrake::crearAcciones()
{
         minimizeAction = new QAction(tr("Mi&nimize"), this);
         connect(minimizeAction, SIGNAL(triggered()), this, SLOT(hide()));
         maximizeAction = new QAction(QString::fromUtf8(tr("Ma&ximize")),this);
         connect(maximizeAction, SIGNAL(triggered()), this, SLOT(showMaximized()));
         restoreAction = new QAction(QString::fromUtf8(tr("&Restore")),this);
         connect(restoreAction, SIGNAL(triggered()), this, SLOT(showNormal()));
         quitAction = new QAction(QString::fromUtf8(tr("&Quit")), this);
         connect(quitAction, SIGNAL(triggered()), this, SLOT(Cerrar()));
}

void recoverdrake::Cerrar()
{
    ControlClose = 1;
    mediaObject->stop();
    QTest::qWait(500);
    close();
}

void recoverdrake::on_actionActivar_Desactivar_inicio_con_Linux_triggered(bool b)
{
    Refrescar();
    QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
    bool opcion;
    opcion=ui->actionActivar_Desactivar_inicio_con_Linux->isChecked();
    QSettings seting("myorg","Aplica");
    seting.setValue("opcion",opcion);
   if (b==true)
    {
       ui->actionActivar_Desactivar_inicio_con_Linux->setIcon(QIcon(":/Imagenes/good.png"));
       QString hora = QTime::currentTime().toString("hh:mm:ss");
       ui->textEdit_4->append(""+hora+"-- Activado inicio con Linux.");
       QString cm = QString::fromUtf8(tr("echo Instalando ficheros necesarios..."));
       QString cmd = "cp -v /usr/share/applications/RecoverDrake.desktop /home/%1/.config/autostart/RecoverDrake.desktop";
       cmd = cmd.arg(user);
       QStringList comandos;
       comandos<< cm << cmd;

       if (mib != 0)
       delete mib;
       mib = new DrakeProcesos(comandos, this);
       connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
       connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
       int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
       m.setText(tr(QString::fromUtf8("Se ha activado el inicio automatico con Linux.")));
    }
   else
   {
       ui->actionActivar_Desactivar_inicio_con_Linux->setIcon(QIcon(""));
       QString hora = QTime::currentTime().toString("hh:mm:ss");
       ui->textEdit_4->append(""+hora+"-- <b><FONT COLOR=\"RED\">Desactivado inicio con Linux.");
       QString cm = QString::fromUtf8(tr("echo Desinstalando ficheros de inicio..."));
       QString cmd = "rm -vf /home/%1/.config/autostart/RecoverDrake.desktop";
       cmd = cmd.arg(user);
       QStringList comandos;
       comandos<< cm << cmd;

       if (mib != 0)
       delete mib;
       mib = new DrakeProcesos(comandos, this);
       connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
       connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
       int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
       m.setText(tr(QString::fromUtf8("Se ha desactivado el inicio automatico con Linux")));
   }
   m.exec();
}

void recoverdrake::chekar(bool b)
{
    QSettings seting("myorg","Aplica");
    seting.setValue("opcion",b);
}

void recoverdrake::chekar1(bool c)
{
    if (ui->actionComprabar_depndencias_RecoverDrake->isChecked()==true)
    {
        QString hora = QTime::currentTime().toString("hh:mm:ss");
        ui->textEdit_4->append(""+hora+"-- Comprobacion de dependencias activada.");
    }
    else
    {
        QString hora = QTime::currentTime().toString("hh:mm:ss");
        ui->textEdit_4->append(""+hora+"-- <b><FONT COLOR=\"RED\">Comprobacion de dependencias desactivada.");
    }
    QSettings seting("myorg","Aplica");
    seting.setValue("opcion1",c);
}

void recoverdrake::chekar2(bool a)
{
    if (ui->actionSugerencias_y_avisos->isChecked()==true)
    {
        Dialog *sugerencias=new Dialog(this);
        if (Stilo == "A")
            sugerencias->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        sugerencias->exec();
    }
    QSettings seting("myorg","Aplica");
    seting.setValue("opcion2",a);
}

void recoverdrake::chekar3(bool d)
{
    QSettings seting("myorg","Aplica");
    seting.setValue("opcion3",d);
}

void recoverdrake::chekar4(bool e)
{
    QSettings seting("myorg","Aplica");
    seting.setValue("opcion4",e);
}

void recoverdrake::chekar5(bool f)
{
    QSettings seting("myorg","Aplica");
    seting.setValue("opcion5",f);
}

void recoverdrake::chekar6(bool g)
{
    QSettings seting("myorg","Aplica");
    seting.setValue("opcion7",g);
}

void recoverdrake::chekar7(bool h)
{
    QSettings seting("myorg","Aplica");
    seting.setValue("opcion8",h);
}

void recoverdrake::chekar8(bool i)
{
    QSettings seting("myorg","Aplica");
    seting.setValue("opcion9",i);
}

void recoverdrake::chekar9(bool j)
{
    QSettings seting("myorg","Aplica");
    seting.setValue("opcion10",j);
}

void recoverdrake::chekar10(bool k)
{
    QSettings seting("myorg","Aplica");
    seting.setValue("opcion11",k);
}

void recoverdrake::chekar11(bool l)
{
    QSettings seting("myorg","Aplica");
    seting.setValue("opcion12",l);
}

void recoverdrake::chekar12(bool m)
{
    QSettings seting("myorg","Aplica");
    seting.setValue("opcion13",m);
}

void recoverdrake::chekar13(bool n)
{
    QSettings seting("myorg","Aplica");
    seting.setValue("opcion14",n);
}

void recoverdrake::on_actionSupervisar_visualizacion_previa_en_dolphin_triggered(bool h)
{
    Refrescar();
    QMessageBox m;
    if (Stilo == "A")
        m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
    bool opcion8;
    opcion8=ui->actionSupervisar_visualizacion_previa_en_dolphin->isChecked();
    QSettings seting("myorg","Aplica");
    seting.setValue("opcion8",opcion8);
    if (h==true)
    {
        ui->actionSupervisar_visualizacion_previa_en_dolphin->setIcon(QIcon(":/Imagenes/good.png"));
        QString hora = QTime::currentTime().toString("hh:mm:ss");
        ui->textEdit_4->append(""+hora+"-- Supervisar uso excesivo de memoria por Dolphin activado.");
        ControlDolphin = new QTimer(this);
        connect(ControlDolphin, SIGNAL(timeout()), this, SLOT(CtrlDolphin()));
        ControlDolphin->start(300000);
        m.setText(tr("Se ha activado la comprobacion de uso excesivo de memoria por Dolphin."));
        m.exec();
    }
    else
    {
        ui->actionSupervisar_visualizacion_previa_en_dolphin->setIcon(QIcon(""));
        QString hora = QTime::currentTime().toString("hh:mm:ss");
        ui->textEdit_4->append(""+hora+"-- Supervisar uso excesivo de memoria por Dolphin desactivado.");
        ControlDolphin->stop();
        m.setText(tr("Se ha desactivado la comprobacion de uso excesivo de memoria por Dolphin.<p>""Utiliza esta opcion para volver a activarla."));
        m.exec();
    }
    ui->progressBar->hide();
    ui->pushButton_2->hide();
    ui->label_13->hide();ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
}

void recoverdrake::on_actionBloquear_salvapantallas_triggered(bool m)
{
    Refrescar();
    QMessageBox x; if (Stilo == "A") x.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
    bool opcion13;
    opcion13=ui->actionBloquear_salvapantallas->isChecked();
    QSettings seting("myorg","Aplica");
    seting.setValue("opcion13",opcion13);
    if (m==true)
    {
        ui->actionBloquear_salvapantallas->setIcon(QIcon(":/Imagenes/good.png"));
        QString hora = QTime::currentTime().toString("hh:mm:ss");
        ui->textEdit_4->append(""+hora+"-- Bloqueo de salvapantallas activado.");
        ControlScreen = new QTimer(this);
        connect(ControlScreen, SIGNAL(timeout()), this, SLOT(CtrlScreen()));
        ControlScreen->start(30000);
        x.setText(tr("Se ha activado el bloqueo del salvapantallas."));
        x.exec();
    }
    else
    {
        ui->actionBloquear_salvapantallas->setIcon(QIcon(""));
        QString hora = QTime::currentTime().toString("hh:mm:ss");
        ui->textEdit_4->append(""+hora+"-- Bloqueo de salvapantallas desactivado.");
        ControlScreen->stop();
        x.setText(tr("Se ha desactivado el bloqueo del salvapantallas.<p>""Utiliza esta opcion para volver a activarla."));
        x.exec();
    }
    ui->progressBar->hide();
    ui->pushButton_2->hide();
    ui->label_13->hide();ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
}

void recoverdrake::on_actionLiberar_memoria_de_Cache_triggered(bool j)
{
    Refrescar();
    QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
    bool opcion10;
    opcion10=ui->actionLiberar_memoria_de_Cache->isChecked();
    QSettings seting("myorg","Aplica");
    seting.setValue("opcion10",opcion10);
    if (j==true)
    {
        ui->actionLiberar_memoria_de_Cache->setIcon(QIcon(":/Imagenes/good.png"));
        QString hora = QTime::currentTime().toString("hh:mm:ss");
        ui->textEdit_4->append(""+hora+"-- Liberador de memoria de Cache activado.");        
        ControlCache = new QTimer(this);
        connect(ControlCache, SIGNAL(timeout()), this, SLOT(CtrlCache()));
        ControlCache->start(600000);
        m.setText(tr("Se ha activado el liberador de memoria de Cache."));
        m.exec();
    }
    else
    {
        ui->actionLiberar_memoria_de_Cache->setIcon(QIcon(""));
        QString hora = QTime::currentTime().toString("hh:mm:ss");
        ui->textEdit_4->append(""+hora+"-- Liberador de memoria de Cache desactivado.");
        ControlCache = new QTimer(this);
        connect(ControlCache, SIGNAL(timeout()), this, SLOT(CtrlCache()));
        ControlCache->stop();
        m.setText(tr("Se ha desactivado el liberador de memoria de Cache.<p>""Utiliza esta opcion para volver a activarlo."));
        m.exec();
    }
    system("sync && sysctl vm.drop_caches=3");
    ui->progressBar->hide();
    ui->pushButton_2->hide();
    ui->label_13->hide();ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
}

void recoverdrake::on_actionActivar_Comprobaci_n_de_wifi_triggered(bool g)
{
    Refrescar();
    QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
    bool opcion7;
    opcion7=ui->actionActivar_Comprobaci_n_de_wifi->isChecked();
    QSettings seting("myorg","Aplica");
    seting.setValue("opcion7",opcion7);
    if (g==true)
    {
        if (ip != "")
        {
            ui->actionActivar_Comprobaci_n_de_wifi->setIcon(QIcon(":/Imagenes/good.png"));
            QString hora = QTime::currentTime().toString("hh:mm:ss");
            ui->textEdit_4->append(""+hora+"-- Comprobacion de red activada.");
            if ( TipoRed == "ETH")
            {
                if (ConectEthernet != "Sin definir")
                {
                    Wf = 1;
                    ControlWifi = new QTimer(this);
                    connect(ControlWifi, SIGNAL(timeout()), this, SLOT(CtrlWifi()));
                    ControlWifi->start(300000);
                    m.setText(tr("Se ha activado el control de wifi."));
                    m.exec();
                }
                else
                {
                    int respuesta = 0;
                    respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Red Ethernet")),
                                QString::fromUtf8(tr("<center><b>Definir datos de conexion</b></center><p>"
                
                                "No tienes definido la Conexion de tu red en las preferencias.<p>"
                                "Es necesario para que puedas realizar esta opcion.<p>"
                                "Se accedera a las preferencias para que puedas definirla.<p>"
                
                                "&iquest;Acceder a la configuración de red?")), QMessageBox::Ok, QMessageBox::No);
                    if (respuesta == QMessageBox::Ok)
                    {
                        opciones *opcion=new opciones(this);
                        if (Stilo == "A")
                            opcion->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                        opcion->exec();
                        this->Actualizar();
                        ui->actionActivar_Comprobaci_n_de_wifi->setChecked(false);
                    }
                    else
                    {
                        ui->actionActivar_Comprobaci_n_de_wifi->setChecked(false);
                        opcion7=ui->actionActivar_Comprobaci_n_de_wifi->isChecked();
                        QSettings seting("myorg","Aplica");
                        seting.setValue("opcion7",opcion7);
                        ui->actionActivar_Comprobaci_n_de_wifi->setIcon(QIcon(""));
                        QString hora = QTime::currentTime().toString("hh:mm:ss");
                        ui->textEdit_4->append(""+hora+"-- <b><FONT COLOR=\"RED\">Comprobacion de red activa desactivada. Falta definir los datos de red.");
                        ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;
                    }
                }
            }
            else if ( TipoRed == "WIF")
            {
                if (Essid != "Sin definir")
                {
                    if (ConectWifi != "Sin definir")
                    {   
                        Wf = 1;
                        ControlWifi = new QTimer(this);
                        connect(ControlWifi, SIGNAL(timeout()), this, SLOT(CtrlWifi()));
                        ControlWifi->start(300000);
                        m.setText(tr("Se ha activado el control de wifi."));
                        m.exec();
                    }
                    else
                    {
                        int respuesta = 0;
                        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Red Wifi")),
                                    QString::fromUtf8(tr("<center><b>Definir datos de conexion</b></center><p>"
                                    "No tienes definido el Essid o Conexion de tu red en las preferencias.<p>"
                                    "Son necesarias para que puedas realizar esta opcion.<p>"
                                    "Se accedera a las preferencias para que puedas definirlas.<p>"                    
                                    "&iquest;Acceder a la configuración de red?")), QMessageBox::Ok, QMessageBox::No);
                        if (respuesta == QMessageBox::Ok)
                        {
                            opciones *opcion=new opciones(this);
                            if (Stilo == "A")
                                opcion->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                            opcion->exec();
                            this->Actualizar();
                            ui->actionActivar_Comprobaci_n_de_wifi->setChecked(false);
                        }
                        else
                        {
                            ui->actionActivar_Comprobaci_n_de_wifi->setChecked(false);
                            opcion7=ui->actionActivar_Comprobaci_n_de_wifi->isChecked();
                            QSettings seting("myorg","Aplica");
                            seting.setValue("opcion7",opcion7);
                            ui->actionActivar_Comprobaci_n_de_wifi->setIcon(QIcon(""));
                            QString hora = QTime::currentTime().toString("hh:mm:ss");
                            ui->textEdit_4->append(""+hora+"-- <b><FONT COLOR=\"RED\">Comprobacion de red activa desactivada. Falta definir los datos de red.");
                            ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;
                        }
                    }
                }
                else
                {
                    int respuesta = 0;
                    respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Red Wifi/Ethernet")),
                                QString::fromUtf8(tr("<center><b>Definir datos de conexion</b></center><p>"
                                "No tienes definido el Essid o Conexion de tu red en las preferencias.<p>"
                                "Son necesarias para que pueda realizar esta opcion.<p>"
                                "Se accedera a las preferencias para que puedas definirlas.<p>"                
                                "&iquest;Acceder a la configuración de red?")), QMessageBox::Ok, QMessageBox::No);
                    if (respuesta == QMessageBox::Ok)
                    {
                        opciones *opcion=new opciones(this);
                        if (Stilo == "A")
                            opcion->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                        opcion->exec();
                        this->Actualizar();
                        ui->actionActivar_Comprobaci_n_de_wifi->setChecked(false);
                    }
                    else
                    {
                        ui->actionActivar_Comprobaci_n_de_wifi->setChecked(false);
                        opcion7=ui->actionActivar_Comprobaci_n_de_wifi->isChecked();
                        QSettings seting("myorg","Aplica");
                        seting.setValue("opcion7",opcion7);
                        ui->actionActivar_Comprobaci_n_de_wifi->setIcon(QIcon(""));
                        QString hora = QTime::currentTime().toString("hh:mm:ss");
                        ui->textEdit_4->append(""+hora+"-- <b><FONT COLOR=\"RED\">Comprobacion de red activa desactivada. Falta definir los datos de red.");
                        ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;
                    }
                }
            }
        }
        else
        {
            ui->actionActivar_Comprobaci_n_de_wifi->setChecked(false);
            m.setText(tr("Problemas con la linea, por favor verifica que tienes acceso a Internet."));
            m.exec();           
        }
    }
    else
    {
        ui->actionActivar_Comprobaci_n_de_wifi->setIcon(QIcon(""));
        QString hora = QTime::currentTime().toString("hh:mm:ss");
        ui->textEdit_4->append(""+hora+"-- <b><FONT COLOR=\"RED\">Comprobacion de red activa desactivada.");
        if (Wf == 1)
        {
            ControlWifi->stop();
        }
        m.setText(tr("Se ha desactivado el control de wifi.<p>""Utiliza esta opcion para volver a activarla."));
        m.exec();
    }
    ui->progressBar->hide();
    ui->pushButton_2->hide();
    ui->label_13->hide();ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
}

void recoverdrake::on_actionActivar_Logs_de_sucesos_triggered(bool e)
{    
    Refrescar();
    int respuesta = 0;
    QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
    bool opcion4;
    opcion4=ui->actionActivar_Logs_de_sucesos->isChecked();
    QSettings seting("myorg","Aplica");
    seting.setValue("opcion4",opcion4);
    if (e==true)
    {
        Logs = "S";
        ui->actionActivar_Logs_de_sucesos->setIcon(QIcon(":/Imagenes/good.png"));
        QString hora = QTime::currentTime().toString("hh:mm:ss");
        ui->textEdit_4->append(""+hora+"-- Activado logs de sucesos de RecoverDrake.");
        m.setText(tr(QString::fromUtf8("Se ha activado los logs del sistema.")));
    }
    else
    {
        Logs = "N";
        ui->actionActivar_Logs_de_sucesos->setIcon(QIcon(""));
        QString hora = QTime::currentTime().toString("hh:mm:ss");
        ui->textEdit_4->append(""+hora+"-- <b><FONT COLOR=\"RED\">Desactivado logs de sucesos de RecoverDrake.");
        m.setText(tr(QString::fromUtf8("Se ha desactivado las logs del sistema.<p>""Utiliza esta opcion para volver a activarla.")));
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Borrar Logs actual")),
                               QString::fromUtf8(tr("<center><b>Borrar Logs actual</b></center><p>"
                               "&iquest;Borrar Logs activo?")), QMessageBox::Ok, QMessageBox::No);
        if (respuesta == QMessageBox::Ok)
        {
            system("rm -vf /usr/share/RecoverDrake/RecoverDrake.log");
        }
    }
    m.exec();
    ui->progressBar->hide();
    ui->pushButton_2->hide();
    ui->label_13->hide();ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
}

void recoverdrake::on_actionActualizar_DB_Virus_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Actualizar DB de virus.");
    Refrescar();
    if (clamav == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"clamav\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Actualizacion de la DB de firmas de Virus")),
                               QString::fromUtf8(tr("<center><b>Actualizacion de DB de firmas</b></center><p>"

                               "Se accedera a internet y se actualizara la base de datos "
                               "de firmas de virus, para estar completamente al dia.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"

                               "&iquest;Actualizar Antivirus?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString cm = QString::fromUtf8(tr("echo Actualizando firmas de virus..."));
                QString cmd = "freshclam";
                QString cm1 = QString::fromUtf8(tr("echo Actualizacion realizada."));
                QStringList comandos;
                comandos<< cm << cmd << cm1;

                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionScanear_Virus_2_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Escanear en busca de virus.");
    Refrescar();
    if (clamav == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"clamav\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Escanear en busca de virus")),
                               QString::fromUtf8(tr("<center><b>Escanear en busca de virus</b></center><p>"

                               "Partimos de la base de que no se necesita un antivirus "
                               "para linux, pero si que puedes tener en perfecta sintonia "
                               "una particion con Guindows, por lo que seria necesario "
                               "tener un antivirus activo para que no se infectada "
                               "dicha unidad.<p>"

                               "PROCEDA CON PRECAUCION: Si encuentra cualquier virus, eliminara el "
                               "fichero contenedor del mismo, por lo que se borrara del "
                               "sistema.<p>"

                               "Con esta opcion se busca y elimina cualquier tipo de virus "
                               "que haya en tu sistema.<p>"

                               "<b>IMPORTANTE: El directorio raiz de escaneado, no puede tener espacios "
                               "en el nombre.<p></b>"

                               "Se generara un fichero con los ficheros infectados.<p>"

                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos. Este proceso puede ser muy prolongado.</B><p>"

                               "&iquest;Escanear virus?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

                QString path="/home/%1/";
                path=path.arg(user);
                QString fileNameDirectori = QFileDialog::getExistingDirectory(this,QString::fromUtf8(tr("Que directorio escanear?")),path,QFileDialog::ShowDirsOnly);
                if (fileNameDirectori.isEmpty())
                {
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                    return;
                }
                QString c1 = QString::fromUtf8(tr("echo Creando baul en la carpeta temporal del usuario..."));
                QString cmd0 = "su - %1 -c \"mkdir /home/%1/tmp/clamav\"";
                cmd0 = cmd0.arg(user);
                QString cm = QString::fromUtf8(tr("echo Escaneando virus en proceso...se paciente..."));
                QString cmd = "su - %1 -c \"clamscan -r --move=/home/%1/tmp/clamav --heuristic-scan-precedence --detect-broken --block-encrypted --algorithmic-detection %2\"";
                cmd=cmd.arg(user).arg(fileNameDirectori);
                QString cm1 = QString::fromUtf8(tr("echo Creando registro de virus..."));
                QString cmd1 ="RecoverAntivirus";
                QStringList comandos;
                comandos<< c1 << cmd0 << cm << cmd << cm1 << cmd1;
                if (mib != 0)
                delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionBorrar_ficheros_de_Cuarentena_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Borrar ficheros en cuarentena.");
    Refrescar();
    if (clamav == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"clamav\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        if (dolphin == "0")
        {
            QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"dolphin\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
            m.exec();
        }
        else
        {
            int respuesta = 0;
            if (Mensaka!="Activo")
            {
                respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Borrar ficheros de cuarentena")),
                                   QString::fromUtf8(tr("<center><b>Borrar ficheros de cuarentena</b></center><p>"

                                   "Con esta utilidad borraremos los ficheros que tengamos en "
                                   "cuarentena, que estan alojados en la carpeta /tmp de tu "
                                   "usuario.<p>"

                                   "Es interesante que revise los ficheros a borrar, ya que puede "
                                   "haber algo importante. En el caso de tener algo que no se quiera "
                                   "borrar, cambielo de ubicacion en el navegador de ficheros que "
                                   "se ha abierto junto con esta funcion.<p>"

                                   "<B>NOTA: Debes esperar a que termine completamente el "
                                   "proceso seleccionado, el cual te sera notificado "
                                   "cuando finalice en la consola de procesos. Este proceso puede ser muy prolongado.</B><p>"

                                   "&iquest;Vaciar Cuarentena?")), QMessageBox::Ok, QMessageBox::No);
            }
            else
            {
                respuesta=QMessageBox::Ok;
            }
            if (respuesta == QMessageBox::Ok){

                    QString path="/home/%1/";
                    path=path.arg(user);

                    QString cm = QString::fromUtf8(tr("echo Accediendo a la carpeta temporal de virus..."));
                    system("dolphin "+path+"/tmp/clamav");
                    QString cm1 = QString::fromUtf8(tr("echo Borrrando ficheros de cuarentena..."));
                    QString cmd = "su - %1 -c \"clamscan -r --remove --heuristic-scan-precedence --detect-broken --block-encrypted --algorithmic-detection /home/%1/tmp/clamav\"";
                    cmd=cmd.arg(user);
                    QStringList comandos;
                    comandos<< cm << cm1 << cmd;

                    if (mib != 0)
                    delete mib;
                    mib = new DrakeProcesos(comandos, this);
                    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                    int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
                    else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
        }
    }
}

void recoverdrake::on_actionListar_logs_de_accesos_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Listar logs de accesos al sistema RecoverDrake.");
    if (Window == 0)
    {
        Visualizar *Visual=new Visualizar(this);
        if (Stilo == "A")
            Visual->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        Visual->Valor("","Logs","");
        Visual->showMaximized();
    }
    else if (Window == 1)
    {
        Visual = new Visualizar;
        QMdiSubWindow *existing = buscarLogs();
        if(!existing)
        {
            Conectar();
            ui->tabWidget->insertTab(Pestanas,ui->tab_51,tr("Logs de accesos"));
            ui->tabWidget->setTabIcon(Pestanas,QIcon(":/Imagenes/ojo2.png"));
            ui->tabWidget->setCurrentPage(Pestanas);
            Pagina9 = Pestanas;
            ui->mdiArea_9->addSubWindow(Visual);
            connect(Visual, SIGNAL(Cerrar()), this, SLOT(CerrarVisual()));
            Visual->Valor("Quitar","Logs","");
            Visual->showMaximized();
        }
        else
        {
            ui->tabWidget->setCurrentPage(Pagina9);
            ui->mdiArea_9->setActiveSubWindow(existing);
        }
        Visual->setWindowState(Qt::WindowMaximized);
    }
}

void recoverdrake::on_actionAmarok_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Amarok.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Reproductores de audio): Amarok")),
                           QString::fromUtf8(tr("<center><b>Instalar Amarok</b></center><p>"
                           "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                           "para un completo uso de tu sistema operativo.<p>"
                           "En este caso: Amarok.<p>"
                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"
                           "&iquest;Instalar Amarok?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok)
    {

            QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
            QString cmd = "urpmi --fuzzy -a --wget --auto amarok";
            QStringList comandos;
            comandos<< cm << cmd;
            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;
    }
}

void recoverdrake::on_actionExaile_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Exaile.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Reproductores de audio): Exaile")),
                           QString::fromUtf8(tr("<center><b>Instalar Exaile</b></center><p>"
                           "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                           "para un completo uso de tu sistema operativo.<p>"
                           "En este caso: Exaile.<p>"
                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"
                           "&iquest;Instalar Exaile?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
            QString cmd = "urpmi --fuzzy -a --wget --auto exaile streamripper";
            QStringList comandos;
            comandos<< cm << cmd;

            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionAudacius_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Audacius.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
    respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Reproductores de audio): Audacious")),
                           QString::fromUtf8(tr("<center><b>Instalar Audacious</b></center><p>"

                           "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                           "para un completo uso de tu sistema operativo.<p>"

                           "En este caso: Audacious.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Instalar Audacious?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
            QString cmd = "urpmi --fuzzy -a --wget --auto audacious";
            QStringList comandos;
            comandos<< cm << cmd;

            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionBanshee_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Banshee.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Reproductores de audio): Banshee")),
                           QString::fromUtf8(tr("<center><b>Instalar Banshee</b></center><p>"

                           "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                           "para un completo uso de tu sistema operativo.<p>"

                           "En este caso: Banshee.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Instalar Banshee?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
            QString cmd = "urpmi --fuzzy -a --wget --auto banshee";
            QStringList comandos;
            comandos<< cm << cmd;

            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionRhythmbox_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Rhythmbox.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Reproductores de audio): Rhythmbox")),
                           QString::fromUtf8(tr("<center><b>Instalar Rhythmbox</b></center><p>"

                           "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                           "para un completo uso de tu sistema operativo.<p>"

                           "En este caso: Rhythmbox.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Instalar Rhythmbox?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
            QString cmd = "urpmi --fuzzy -a --wget --auto rhythmbox";
            QStringList comandos;
            comandos<< cm << cmd;

            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionXmms_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar xmms.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Reproductores de audio): Xmms")),
                           QString::fromUtf8(tr("<center><b>Instalar Xmms</b></center><p>"

                           "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                           "para un completo uso de tu sistema operativo.<p>"

                           "En este caso: Xmms.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Instalar Xmms?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
       respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
            QString cmd = "urpmi --fuzzy -a --wget --auto xmms";
            QStringList comandos;
            comandos<< cm << cmd;

            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionTodos_3_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar todos los reproductores de audio recomendados.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Reproductores de audio): Todos")),
                           QString::fromUtf8(tr("<center><b>Instalar Todos</b></center><p>"

                           "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                           "para un completo uso de tu sistema operativo.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Instalar todos los reproductores de audio?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cm = QString::fromUtf8(tr("echo Instalando paquetes solicitados..."));
            QString cmd = "urpmi --fuzzy -a --wget --auto amarok exaile streamripper audacious banshee rhythmbox xmms";
            QStringList comandos;
            comandos<< cm << cmd;

            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionInstalar_Pack_de_Juegos_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Pack de juegos recomendados.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Juegos): Pack")),
                           QString::fromUtf8(tr("<center><b>Instalar Pack de juegos</b></center><p>"

                           "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                           "para un completo uso de tu sistema operativo.<p>"

                           "Este proceso es prolongado, ya que se descargaran unas "
                           "4 Gb de juegos aproximadamente.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Instalar Pack de Juegos?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
            QString cmd = "urpmi --fuzzy -a --wget --auto task-games";
            QStringList comandos;
            comandos<< cm << cmd;

            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionCairo_Dock_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Cairo Dock.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Docks): Cairo")),
                           QString::fromUtf8(tr("<center><b>Instalar Cairo</b></center><p>"

                           "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                           "para un completo uso de tu sistema operativo.<p>"

                           "En este caso: Cairo.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Instalar Cairo?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
            QString cmd = "urpmi --fuzzy -a --wget --auto cairo-dock";
            QStringList comandos;
            comandos<< cm << cmd;

            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionDragonPlayer_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Dragon Player.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Reproductores de video): Dragon Player")),
                           QString::fromUtf8(tr("<center><b>Instalar Dragon Player</b></center><p>"

                           "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                           "para un completo uso de tu sistema operativo.<p>"

                           "En este caso: Dragon Player.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Instalar Dragon Player?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
            QString cmd = "urpmi --fuzzy -a --wget --auto dragonplayer";
            QStringList comandos;
            comandos<< cm << cmd;

            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionKaffeine_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Kaffeine.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Reproductores de video): Kaffeine")),
                           QString::fromUtf8(tr("<center><b>Instalar Kaffeine</b></center><p>"

                           "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                           "para un completo uso de tu sistema operativo.<p>"

                           "En este caso: Kaffeine.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Instalar Kaffeine?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
            QString cmd = "urpmi --fuzzy -a --wget --auto kaffeine4";
            QStringList comandos;
            comandos<< cm << cmd;

            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionTotem_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Totem.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Reproductores de video): Totem")),
                           QString::fromUtf8(tr("<center><b>Instalar Totem</b></center><p>"

                           "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                           "para un completo uso de tu sistema operativo.<p>"

                           "En este caso: Totem.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Instalar Totem?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
            QString cmd = "urpmi --fuzzy -a --wget --auto totem-gstreamer";
            QStringList comandos;
            comandos<< cm << cmd;

            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionVlc_2_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Vlc.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Reproductores de video): VLC")),
                           QString::fromUtf8(tr("<center><b>Instalar VLC</b></center><p>"

                           "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                           "para un completo uso de tu sistema operativo.<p>"

                           "En este caso: VLC.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Instalar VLC?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
            QString cmd = "urpmi --fuzzy -a --wget --auto vlc-plugin-a52 vlc-plugin-aa vlc-plugin-dv vlc-plugin-dvdnav vlc-plugin-flac vlc-plugin-fluidsynth vlc-plugin-ggi vlc-plugin-mod vlc-plugin-ogg vlc-plugin-opengl vlc-plugin-pulse vlc-plugin-schroedinger vlc-plugin-sdl vlc-plugin-speex vlc-plugin-theora vlc-plugin-twolame vlc-plugin-xosd svlc";
            QStringList comandos;
            comandos<< cm << cmd;

            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionSmplay7er_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Smplayer.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Reproductores de video): Smplayer")),
                           QString::fromUtf8(tr("<center><b>Instalar Smplayer</b></center><p>"

                           "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                           "para un completo uso de tu sistema operativo.<p>"

                           "En este caso: Smplayer.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Instalar Smplayer?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
            QString cmd = "urpmi --fuzzy -a --wget --auto smplayer";
            QStringList comandos;
            comandos<< cm << cmd;

            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionKmplayer_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Kmplayer.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Reproductores de video): Kmplayer")),
                           QString::fromUtf8(tr("<center><b>Instalar Kmplayer</b></center><p>"

                           "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                           "para un completo uso de tu sistema operativo.<p>"

                           "En este caso: Kmplayer.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Instalar Kmplayer?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
            QString cmd = "urpmi --fuzzy -a --wget --auto kmplayer mplayerplugin";
            QStringList comandos;
            comandos<< cm << cmd;

            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionParole_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Parole.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Reproductores de video): Parole")),
                           QString::fromUtf8(tr("<center><b>Instalar Parole</b></center><p>"

                           "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                           "para un completo uso de tu sistema operativo.<p>"

                           "En este caso: Parole.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Instalar Parole?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
            QString cmd = "urpmi --fuzzy -a --wget --auto parole parole-browser-plugin";
            QStringList comandos;
            comandos<< cm << cmd;

            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionXine_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Xine.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Reproductores de video): Xine")),
                           QString::fromUtf8(tr("<center><b>Instalar Xine</b></center><p>"

                           "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                           "para un completo uso de tu sistema operativo.<p>"

                           "En este caso: Xine.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Instalar Xine?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
            QString cmd = "urpmi --fuzzy -a --wget --auto xine-ui";
            QStringList comandos;
            comandos<< cm << cmd;

            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionTodos_2_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar todos los Reproductores de audio recomendados.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Reproductores de audio): Todos")),
                           QString::fromUtf8(tr("<center><b>Instalar Todos</b></center><p>"

                           "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                           "para un completo uso de tu sistema operativo.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Instalar Todos los reproductores de audio?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cm = QString::fromUtf8(tr("echo Instalando paquetes solicitados..."));
            QString cmd = "urpmi --fuzzy -a --wget --auto dragonplayer kaffeine4 totem-gstreamer "
                          "vlc-plugin-a52 vlc-plugin-aa vlc-plugin-dv vlc-plugin-dvdnav "
                          "vlc-plugin-flac vlc-plugin-fluidsynth vlc-plugin-ggi vlc-plugin-mod "
                          "vlc-plugin-ogg vlc-plugin-opengl vlc-plugin-pulse vlc-plugin-schroedinger "
                          "vlc-plugin-sdl vlc-plugin-speex vlc-plugin-theora vlc-plugin-twolame "
                          "vlc-plugin-xosd svlc smplayer kmplayer mplayerplugin parole "
                          "parole-browser-plugin xine-ui";
            QStringList comandos;
            comandos<< cm << cmd;

            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionAmsn_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Amsn.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Clientes de Mensajeria): Amsn")),
                           QString::fromUtf8(tr("<center><b>Instalar Amsn</b></center><p>"

                           "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                           "para un completo uso de tu sistema operativo.<p>"

                           "En este caso: Amsn.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Instalar Amsn?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
            QString cmd = "urpmi --fuzzy -a --wget --auto amsn";
            QStringList comandos;
            comandos<< cm << cmd;

            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionPidgin_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Pidgin.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Clientes de Mensajeria): Pidgin")),
                           QString::fromUtf8(tr("<center><b>Instalar Pidgin</b></center><p>"

                           "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                           "para un completo uso de tu sistema operativo.<p>"

                           "En este caso: Pidgin.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Instalar Pidgin?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
            QString cmd = "urpmi --fuzzy -a --wget --auto pidgin-plugins pidgin-musictracker "
                          "pidgin-guifications pidgin-plugin-pack";
            QStringList comandos;
            comandos<< cm << cmd;

            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionKopete_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Kopete.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Clientes de Mensajeria): Kopete")),
                           QString::fromUtf8(tr("<center><b>Instalar Kopete</b></center><p>"

                           "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                           "para un completo uso de tu sistema operativo.<p>"

                           "En este caso: Kopete.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Instalar Kopete?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
            QString cmd = "urpmi --fuzzy -a --wget --auto kopete";
            QStringList comandos;
            comandos<< cm << cmd;

            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionEmesene_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Emesene.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Clientes de Mensajeria): Emesene")),
                           QString::fromUtf8(tr("<center><b>Instalar Emesene</b></center><p>"

                           "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                           "para un completo uso de tu sistema operativo.<p>"

                           "En este caso: Emesene.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Instalar Emesene?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
            QString cmd = "urpmi --fuzzy -a --wget --auto emesene";
            QStringList comandos;
            comandos<< cm << cmd;

            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionKmess_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Kmess.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Clientes de Mensajeria): Kmess")),
                           QString::fromUtf8(tr("<center><b>Instalar Kmess</b></center><p>"

                           "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                           "para un completo uso de tu sistema operativo.<p>"

                           "En este caso: Kmess.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Instalar Kmess?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
            QString cmd = "urpmi --fuzzy -a --wget --auto kmess";
            QStringList comandos;
            comandos<< cm << cmd;

            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionSkype_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Skype.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Clientes de Mensajeria): Skype")),
                           QString::fromUtf8(tr("<center><b>Instalar Skype</b></center><p>"

                           "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                           "para un completo uso de tu sistema operativo.<p>"

                           "En este caso: Skype.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Instalar Skype?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
            QString cmd = "urpmi --fuzzy -a --wget --auto skype";
            QStringList comandos;
            comandos<< cm << cmd;

            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionTodos_4_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar todos lo Clientes de mensajeria recomendados.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Clientes de Mensajeria): Todos")),
                           QString::fromUtf8(tr("<center><b>Instalar Todos</b></center><p>"

                           "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                           "para un completo uso de tu sistema operativo.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Instalar Todos los Clientes de Mensajeria?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cm = QString::fromUtf8(tr("echo Instalando paquetes solicitados..."));
            QString cmd = "urpmi --fuzzy -a --wget --auto amsn pidgin-plugins pidgin-musictracker "
                          "pidgin-guifications pidgin-plugin-pack kopete emesene kmess skype";
            QStringList comandos;
            comandos<< cm << cmd;

            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionEkiga_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Ekiga.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Videoconferencia): Ekiga")),
                           QString::fromUtf8(tr("<center><b>Instalar Ekiga</b></center><p>"

                           "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                           "para un completo uso de tu sistema operativo.<p>"

                           "En este caso: Ekiga.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Instalar Ekiga?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
            QString cmd = "urpmi --fuzzy -a --wget --auto ekiga";
            QStringList comandos;
            comandos<< cm << cmd;

            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionGnokii_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Gnokii.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Videoconferencia): Gnokii")),
                           QString::fromUtf8(tr("<center><b>Instalar Gnokii</b></center><p>"

                           "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                           "para un completo uso de tu sistema operativo.<p>"

                           "En este caso: Gnokii.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Instalar Gnokii?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
            QString cmd = "urpmi --fuzzy -a --wget --auto gnokii-xgnokii";
            QStringList comandos;
            comandos<< cm << cmd;

            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionPhone_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Phone.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Videoconferencia): Phone")),
                           QString::fromUtf8(tr("<center><b>Instalar Phone</b></center><p>"

                           "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                           "para un completo uso de tu sistema operativo.<p>"

                           "En este caso: Phone.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Instalar Phone?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
            QString cmd = "urpmi --fuzzy -a --wget --auto gnome-phone-manager";
            QStringList comandos;
            comandos<< cm << cmd;

            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionTodos_5_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar todos las Videoconferencias recomendadas.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Videoconferencia): Todos")),
                           QString::fromUtf8(tr("<center><b>Instalar Todos</b></center><p>"

                           "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                           "para un completo uso de tu sistema operativo.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Instalar Todos los de Videoconferencia?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cm = QString::fromUtf8(tr("echo Instalando paquetes solicitados..."));
            QString cmd = "urpmi --fuzzy -a --wget --auto ekiga gnokii-xgnokii gnome-phone-manager";
            QStringList comandos;
            comandos<< cm << cmd;

            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionVuze_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Vuze.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (P2P): Vuze")),
                           QString::fromUtf8(tr("<center><b>Instalar Vuze</b></center><p>"

                           "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                           "para un completo uso de tu sistema operativo.<p>"

                           "En este caso: Vuze.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Instalar Vuze?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
            QString cmd = "urpmi --fuzzy -a --wget --auto vuze";
            QStringList comandos;
            comandos<< cm << cmd;

            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionAmule_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Amule.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (P2P): Amule")),
                           QString::fromUtf8(tr("<center><b>Instalar Amule</b></center><p>"

                           "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                           "para un completo uso de tu sistema operativo.<p>"

                           "En este caso: Amule.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Instalar Amule?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
            QString cmd = "urpmi --fuzzy -a --wget --auto amule";
            QStringList comandos;
            comandos<< cm << cmd;

            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionApollon_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Apollon.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (P2P): Apollon")),
                           QString::fromUtf8(tr("<center><b>Instalar Apollon</b></center><p>"

                           "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                           "para un completo uso de tu sistema operativo.<p>"

                           "En este caso: Apollon.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Instalar Apollon?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
            QString cmd = "urpmi --fuzzy -a --wget --auto apollon gift gift-gnutella gift-openft";
            QStringList comandos;
            comandos<< cm << cmd;

            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionKtorrent_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Ktorrent.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (P2P): Ktorrent")),
                           QString::fromUtf8(tr("<center><b>Instalar Ktorrent</b></center><p>"

                           "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                           "para un completo uso de tu sistema operativo.<p>"

                           "En este caso: Ktorrent.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Instalar Ktorrent?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
            QString cmd = "urpmi --fuzzy -a --wget --auto ktorrent";
            QStringList comandos;
            comandos<< cm << cmd;

            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionDeluge_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Deluge.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (P2P): Deluge")),
                           QString::fromUtf8(tr("<center><b>Instalar Deluge</b></center><p>"

                           "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                           "para un completo uso de tu sistema operativo.<p>"

                           "En este caso: Deluge.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Instalar Deluge?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
            QString cmd = "urpmi --fuzzy -a --wget --auto deluge";
            QStringList comandos;
            comandos<< cm << cmd;

            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionTransmission_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Transmission.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (P2P): Transmission")),
                           QString::fromUtf8(tr("<center><b>Instalar Transmission</b></center><p>"

                           "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                           "para un completo uso de tu sistema operativo.<p>"

                           "En este caso: Transmission.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Instalar Transmission?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
            QString cmd = "urpmi --fuzzy -a --wget --auto transmission transmission-gtk transmission-qt4";
            QStringList comandos;
            comandos<< cm << cmd;

            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionNicotine_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Nicotine.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (P2P): Nicotine")),
                           QString::fromUtf8(tr("<center><b>Instalar Nicotine</b></center><p>"

                           "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                           "para un completo uso de tu sistema operativo.<p>"

                           "En este caso: Nicotine.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Instalar Nicotine?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
            QString cmd = "urpmi --fuzzy -a --wget --auto nicotine";
            QStringList comandos;
            comandos<< cm << cmd;

            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionFrostwire_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Frostwire.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (P2P): Frostwire")),
                           QString::fromUtf8(tr("<center><b>Instalar Frostwire</b></center><p>"

                           "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                           "para un completo uso de tu sistema operativo.<p>"

                           "En este caso: Frostwire.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Instalar Frostwire?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
            QString cmd = "urpmi --fuzzy -a --wget --auto frostwire";
            QStringList comandos;
            comandos<< cm << cmd;

            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionMegaupload_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Megaupload.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (P2P): Megaupload")),
                           QString::fromUtf8(tr("<center><b>Instalar Megaupload</b></center><p>"

                           "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                           "para un completo uso de tu sistema operativo.<p>"

                           "En este caso: Megaupload.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Instalar Megaupload?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
            QString cmd = "urpmi --fuzzy -a --wget --auto megaupload-dl";
            QStringList comandos;
            comandos<< cm << cmd;

            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionJdownloader_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Jdownloader.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (P2P): Jdownloader")),
                           QString::fromUtf8(tr("<center><b>Instalar Jdownloader</b></center><p>"

                           "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                           "para un completo uso de tu sistema operativo.<p>"

                           "En este caso: Jdownloader.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Instalar Jdownloader?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
            QString cmd = "urpmi --fuzzy -a --wget --auto JDownloader";
            QStringList comandos;
            comandos<< cm << cmd;

            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionMegaJc_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar MegaJc.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (P2P): MegaJc")),
                           QString::fromUtf8(tr("<center><b>Instalar MegaJc</b></center><p>"

                           "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                           "para un completo uso de tu sistema operativo.<p>"

                           "En este caso: MegaJc.<p>"

                           "<b>IMPORTANTE: MegaJc no esta en los repositorios, ni se le espera "
                           "por lo que accedes a Internet y descargamos el paquete en formato .deb, "
                           "luego lo transformamos automaticamente y despues son instaladas las "
                           "dependencias necesarias para que todo funcione correctamente.</b><p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Instalar MegaJc?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cm = QString::fromUtf8("echo Descargando paquete solicitado...");
            QString cmd = "wget http://nexxuz.com/repositorios/ubuntu/megajc/stable.deb";
            QString cm1 = QString::fromUtf8("echo Creando rpm compatible...");
            QString cmd1 ="fakeroot alien -r -c stable.deb";
            QString cm2 = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
            QString cmd2 ="urpmi megajc-reloaded-1.0.12-2.noarch.rpm";
            QString cm3 = QString::fromUtf8("echo Borrando ficheros temporales...");
            QString cmd3 ="rm -vf stable.deb megajc-reloaded-1.0.12-2.noarch.rpm";
            QString cm4 = QString::fromUtf8("echo Instalando dependencias necesarias...");
            QString cmd4 ="urpmi --fuzzy -a --auto python-gdata curl wput ffmpeg libnotify wondershaper gambas2";
            QStringList comandos;
            comandos<< cm << cmd << cm1 << cmd1 << cm2 << cmd2 << cm3 << cmd3 << cm4 << cmd4;

            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionEd2k_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Ed2k.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (P2P): Ed2k")),
                       QString::fromUtf8(tr("<center><b>Instalar Ed2k</b></center><p>"

                       "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                       "para un completo uso de tu sistema operativo.<p>"

                       "En este caso: Ed2k.<p>"

                       "<B>NOTA: Debes esperar a que termine completamente el "
                       "proceso seleccionado, el cual te sera notificado "
                       "cuando finalice en la consola de procesos.</B><p>"

                       "&iquest;Instalar Ed2k?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

        QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
        QString cmd = "urpmi --fuzzy -a --wget --auto ed2k-gtk-gui";
        QStringList comandos;
        comandos<< cm << cmd;

        if (mib != 0)
        delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionTodos_6_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar todos los clientes de P2P recomendados.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (P2P): Todos")),
                           QString::fromUtf8(tr("<center><b>Instalar Todos</b></center><p>"

                           "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                           "para un completo uso de tu sistema operativo.<p>"

                           "En este caso: Todos.<p>"

                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"

                           "&iquest;Instalar Todos los clientes de p2p?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cm = QString::fromUtf8(tr("echo Instalando paquetes solicitados..."));
            QString cmd = "urpmi --fuzzy -a --wget --auto vuze amule apollon gift gift-gnutella gift-openft "
                          "ktorrent deluge transmission transmission-gtk transmission-qt4 nicotine "
                          "frostwire megaupload-dl JDownloader ed2k-gtk-gui";
            QString cmd1 = "wget http://nexxuz.com/repositorios/ubuntu/megajc/stable.deb";
            QString cmd2 ="fakeroot alien -r -c stable.deb";
            QString cmd3 ="urpmi megajc-reloaded-1.0.12-2.noarch.rpm";
            QString cmd4 ="rm -vf stable.deb megajc-reloaded-1.0.12-2.noarch.rpm";
            QString cmd5 ="urpmi --fuzzy -a --auto python-gdata curl wput ffmpeg libnotify wondershaper gambas2";
            QStringList comandos;
            comandos<< cm << cmd << cmd1 << cmd2 << cmd3 << cmd4 <<cmd5;

            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionK3b_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar k3b.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Quemadores CD/DVD): K3b")),
                       QString::fromUtf8(tr("<center><b>Instalar K3b</b></center><p>"

                       "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                       "para un completo uso de tu sistema operativo.<p>"

                       "En este caso: K3b.<p>"

                       "<B>NOTA: Debes esperar a que termine completamente el "
                       "proceso seleccionado, el cual te sera notificado "
                       "cuando finalice en la consola de procesos.</B><p>"

                       "&iquest;Instalar K3b?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

        QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
        QString cmd = "urpmi --fuzzy --wget --auto -a k3b";
        QStringList comandos;
        comandos<< cm << cmd;

        if (mib != 0)
        delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionBrasero_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Brasero.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Quemadores CD/DVD): Brasero")),
                       QString::fromUtf8(tr("<center><b>Instalar Brasero</b></center><p>"

                       "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                       "para un completo uso de tu sistema operativo.<p>"

                       "En este caso: Brasero.<p>"

                       "<B>NOTA: Debes esperar a que termine completamente el "
                       "proceso seleccionado, el cual te sera notificado "
                       "cuando finalice en la consola de procesos.</B><p>"

                       "&iquest;Instalar Brasero?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

        QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
        QString cmd = "urpmi --fuzzy -a --wget --auto brasero";
        QStringList comandos;
        comandos<< cm << cmd;

        if (mib != 0)
        delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionTodos_11_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar todos los quemadores de CD/DVD recomendados.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Quemadores CD/DVD): Todos")),
                       QString::fromUtf8(tr("<center><b>Instalar Todos</b></center><p>"

                       "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                       "para un completo uso de tu sistema operativo.<p>"

                       "En este caso: Todos.<p>"

                       "<B>NOTA: Debes esperar a que termine completamente el "
                       "proceso seleccionado, el cual te sera notificado "
                       "cuando finalice en la consola de procesos.</B><p>"

                       "&iquest;Instalar Todos?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

        QString cm = QString::fromUtf8(tr("echo Instalando paquetes solicitados..."));
        QString cmd = "urpmi --fuzzy -a --wget --auto k3b brasero";
        QStringList comandos;
        comandos<< cm << cmd;

        if (mib != 0)
        delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionAkr_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Ark.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Compresores): Ark")),
                       QString::fromUtf8(tr("<center><b>Instalar Ark</b></center><p>"

                       "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                       "para un completo uso de tu sistema operativo.<p>"

                       "En este caso: Ark.<p>"

                       "<B>NOTA: Debes esperar a que termine completamente el "
                       "proceso seleccionado, el cual te sera notificado "
                       "cuando finalice en la consola de procesos.</B><p>"

                       "&iquest;Instalar Ark?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

        QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
        QString cmd = "urpmi --fuzzy -a --wget --auto ark";
        QStringList comandos;
        comandos<< cm << cmd;

        if (mib != 0)
        delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionUnrar_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Unrar.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Compresores): Pack unrar/zip/arj/p7zip")),
                       QString::fromUtf8(tr("<center><b>Instalar Pack unrar/zip/arj/p7zip</b></center><p>"

                       "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                       "para un completo uso de tu sistema operativo.<p>"

                       "En este caso: Pack unrar/zip/arj/p7zip.<p>"

                       "<B>NOTA: Debes esperar a que termine completamente el "
                       "proceso seleccionado, el cual te sera notificado "
                       "cuando finalice en la consola de procesos.</B><p>"

                       "&iquest;Instalar Pack unrar/zip/arj/p7zip?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

        QString cm = QString::fromUtf8(tr("echo Instalando paquetes solicitados..."));
        QString cmd = "urpmi --fuzzy -a --wget --auto gzip bzip2 tar zip unzip unrar zoo p7zip arj unarj zoo unace cabextract";
        QStringList comandos;
        comandos<< cm << cmd;

        if (mib != 0)
        delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionFile_Roller_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar File-roller.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Compresores): File-Roller")),
                       QString::fromUtf8(tr("<center><b>Instalar File-Roller</b></center><p>"

                       "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                       "para un completo uso de tu sistema operativo.<p>"

                       "En este caso: File-Roller.<p>"

                       "<B>NOTA: Debes esperar a que termine completamente el "
                       "proceso seleccionado, el cual te sera notificado "
                       "cuando finalice en la consola de procesos.</B><p>"

                       "&iquest;Instalar File-Roller?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

        QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
        QString cmd = "urpmi --fuzzy -a --wget --auto file-roller";
        QStringList comandos;
        comandos<< cm << cmd;
        if (mib != 0)
            delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
        connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionXarchiver_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Xarchiver.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Compresores): Xarchiver")),
                       QString::fromUtf8(tr("<center><b>Instalar Xarchiver</b></center><p>"

                       "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                       "para un completo uso de tu sistema operativo.<p>"

                       "En este caso: Xarchiver.<p>"

                       "<B>NOTA: Debes esperar a que termine completamente el "
                       "proceso seleccionado, el cual te sera notificado "
                       "cuando finalice en la consola de procesos.</B><p>"

                       "&iquest;Instalar Xarchiver?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

        QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
        QString cmd = "urpmi --fuzzy -a --wget --auto xarchiver";
        QStringList comandos;
        comandos<< cm << cmd;

        if (mib != 0)
        delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionDalle_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Dalle.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Compresores): Dalle")),
                       QString::fromUtf8(tr("<center><b>Instalar Dalle</b></center><p>"

                       "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                       "para un completo uso de tu sistema operativo.<p>"

                       "En este caso: Dalle.<p>"

                       "<B>NOTA: Debes esperar a que termine completamente el "
                       "proceso seleccionado, el cual te sera notificado "
                       "cuando finalice en la consola de procesos.</B><p>"

                       "&iquest;Instalar Dalle?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

        QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
        QString cmd = "urpmi --fuzzy -a --wget --auto dalle";
        QStringList comandos;
        comandos<< cm << cmd;

        if (mib != 0)
        delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionTodos_7_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar todos los Compresores recomendados.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Compresores): Todos")),
                       QString::fromUtf8(tr("<center><b>Instalar Todos</b></center><p>"

                       "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                       "para un completo uso de tu sistema operativo.<p>"

                       "En este caso: Todos.<p>"

                       "<B>NOTA: Debes esperar a que termine completamente el "
                       "proceso seleccionado, el cual te sera notificado "
                       "cuando finalice en la consola de procesos.</B><p>"

                       "&iquest;Instalar Todos los Compresores?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

        QString cm = QString::fromUtf8(tr("echo Instalando paquetes solicitados..."));
        QString cmd = "urpmi --fuzzy -a --wget --auto ark gzip bzip2 tar zip unzip unrar zoo p7zip arj unarj zoo unace cabextract file-roller xarchiver dalle";
        QStringList comandos;
        comandos<< cm << cmd;

        if (mib != 0)
        delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionC_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar lenguaje C.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Programacion): C")),
                       QString::fromUtf8(tr("<center><b>Instalar C</b></center><p>"

                       "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                       "para un completo uso de tu sistema operativo.<p>"

                       "En este caso: C.<p>"

                       "<B>NOTA: Debes esperar a que termine completamente el "
                       "proceso seleccionado, el cual te sera notificado "
                       "cuando finalice en la consola de procesos.</B><p>"

                       "&iquest;Instalar C?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

        QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
        QString cmd = "urpmi --fuzzy -a --wget --auto task-c-devel";
        QStringList comandos;
        comandos<< cm << cmd;

        if (mib != 0)
        delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionC_2_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar lenguaje C++.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Programacion): C++")),
                       QString::fromUtf8(tr("<center><b>Instalar C++</b></center><p>"

                       "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                       "para un completo uso de tu sistema operativo.<p>"

                       "En este caso: C++ (RecoverDrake esta escrito en C++ y Qt).<p>"

                       "<B>NOTA: Debes esperar a que termine completamente el "
                       "proceso seleccionado, el cual te sera notificado "
                       "cuando finalice en la consola de procesos.</B><p>"

                       "&iquest;Instalar C++?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

        QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
        QString cmd = "urpmi --fuzzy -a --wget --auto task-c++-devel";
        QStringList comandos;
        comandos<< cm << cmd;

        if (mib != 0)
        delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionQt_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar QT.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Programacion): Qt")),
                       QString::fromUtf8(tr("<center><b>Instalar Qt</b></center><p>"

                       "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                       "para un completo uso de tu sistema operativo.<p>"

                       "En este caso: Qt (RecoverDrake esta escrito en C++ y utiliza las librerias Qt).<p>"

                       "<B>NOTA: Debes esperar a que termine completamente el "
                       "proceso seleccionado, el cual te sera notificado "
                       "cuando finalice en la consola de procesos.</B><p>"

                       "&iquest;Instalar Qt?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

        QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
        QString cmd;
        if (arqt == "x86_64")
            cmd = "urpmi --fuzzy -a --wget --auto --force lib64qt4-devel qt-creator qt4-designer qt4-linguist gcc";
        else
            cmd = "urpmi --fuzzy -a --wget --auto --force libqt4-devel qt-creator qt4-designer qt4-linguist gcc";
        QStringList comandos;
        comandos<< cm << cmd;

        if (mib != 0)
        delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionRpm_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar rpm.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Programacion): Rpm")),
                       QString::fromUtf8(tr("<center><b>Instalar Rpm</b></center><p>"

                       "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                       "para un completo uso de tu sistema operativo.<p>"

                       "En este caso: Rpm.<p>"

                       "<B>NOTA: Debes esperar a que termine completamente el "
                       "proceso seleccionado, el cual te sera notificado "
                       "cuando finalice en la consola de procesos.</B><p>"

                       "&iquest;Instalar Rpm?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

        QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
        QString cmd = "urpmi --fuzzy -a --wget --auto rpmlint rpm-build spec-helper libtool easyrpmbuilder";
        QStringList comandos;
        comandos<< cm << cmd;

        if (mib != 0)
        delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionFortran_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Fortran.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Programacion): Fortran")),
                       QString::fromUtf8(tr("<center><b>Instalar Fortran</b></center><p>"

                       "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                       "para un completo uso de tu sistema operativo.<p>"

                       "En este caso: Fortran.<p>"

                       "<B>NOTA: Debes esperar a que termine completamente el "
                       "proceso seleccionado, el cual te sera notificado "
                       "cuando finalice en la consola de procesos.</B><p>"

                       "&iquest;Instalar Fortran?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

        QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
        QString cmd = "urpmi --fuzzy -a --wget --auto gcc-gfortran";
        QStringList comandos;
        comandos<< cm << cmd;

        if (mib != 0)
        delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionGambas_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Gambas.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Programacion): Gambas")),
                       QString::fromUtf8(tr("<center><b>Instalar Gambas</b></center><p>"

                       "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                       "para un completo uso de tu sistema operativo.<p>"

                       "En este caso: Gambas.<p>"

                       "<B>NOTA: Debes esperar a que termine completamente el "
                       "proceso seleccionado, el cual te sera notificado "
                       "cuando finalice en la consola de procesos.</B><p>"

                       "&iquest;Instalar Gambas?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

        QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
        QString cmd = "urpmi --fuzzy -a --wget --auto gambas2-ide gambas2-gb-gui";
        QStringList comandos;
        comandos<< cm << cmd;

        if (mib != 0)
        delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionJava_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Java.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Programacion): Java")),
                       QString::fromUtf8(tr("<center><b>Instalar Java</b></center><p>"

                       "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                       "para un completo uso de tu sistema operativo.<p>"

                       "En este caso: Java.<p>"

                       "<B>NOTA: Debes esperar a que termine completamente el "
                       "proceso seleccionado, el cual te sera notificado "
                       "cuando finalice en la consola de procesos.</B><p>"

                       "&iquest;Instalar Java?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

        QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
        QString cmd = "urpmi --fuzzy --wget -a --auto java-1.6.0-sun eclipse netbeans";
        QStringList comandos;
        comandos<< cm << cmd;

        if (mib != 0)
        delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionTodos_8_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar todos los Lenguajes de programacion recomendados.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Programacion): Todos")),
                       QString::fromUtf8(tr("<center><b>Instalar Todos</b></center><p>"

                       "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                       "para un completo uso de tu sistema operativo.<p>"

                       "En este caso: Todos.<p>"

                       "<B>NOTA: Debes esperar a que termine completamente el "
                       "proceso seleccionado, el cual te sera notificado "
                       "cuando finalice en la consola de procesos.</B><p>"

                       "&iquest;Instalar Todos los paquetes de programacion?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

        QString cm = QString::fromUtf8(tr("echo Instalando paquetes solicitados..."));
        QString cmd;
        if (arqt == "x86_64")
        {
            cmd = "urpmi --fuzzy --wget -a --auto task-c-devel task-c++-devel lib64qt4-devel qt-creator qt4-designer qt4-linguist"
                                  "rpmlint rpm-build spec-helper libtool easyrpmbuilder gcc-gfortran gambas2-ide gambas2-gb-gui "
                                  "java-1.6.0-sun eclipse netbeans";
        }
        else
        {
            cmd = "urpmi --fuzzy --wget -a --auto task-c-devel task-c++-devel libqt4-devel qt-creator qt4-designer qt4-linguist"
                      "rpmlint rpm-build spec-helper libtool easyrpmbuilder gcc-gfortran gambas2-ide gambas2-gb-gui "
                      "java-1.6.0-sun eclipse netbeans";
        }
        QStringList comandos;
        comandos<< cm << cmd;

        if (mib != 0)
        delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionCerrar_sesion_activa_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Cerrar sesion activa");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Cerrar sesion activa")),
                       QString::fromUtf8(tr("<center><b>Cerrar sesion activa</b></center><p>"

                       "Con esta utilidad puedes cerrar la sesion activa y se "
                       "volvera al gestor de accesos.<p>"

                       "&iquest;Cerrar sesion activa?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){
        system("killall X");}
}

void recoverdrake::on_actionReiniciar_equipo_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Reiniciar equipo.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Reiniciar sistema")),
                       QString::fromUtf8(tr("<center><b>Reiniciar sistema</b></center><p>"

                       "Puede pasar que no podamos apagar o reiniciar el "
                       "equipo por que no aparecen los botones correspondientes "
                       "o en su defecto, fallan.<p>"

                       "Con esta utilidad puedes reiniciar el sistema sin peligro, "
                       "ya que antes de hacerlo, deja todos los procesos cerrados.<p>"

                       "&iquest;Reiniciar sistema?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok)
    {
        system("reboot");
    }
    ui->progressBar->hide();
    ui->pushButton_2->hide();
    ui->label_13->hide();ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
}

void recoverdrake::on_actionApagar_equipo_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Apagar equipo.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Apagar sistema")),
                       QString::fromUtf8(tr("<center><b>Apagar sistema</b></center><p>"

                       "Puede pasar que no podamos apagar o reiniciar el "
                       "equipo por que no aparecen los botones correspondientes "
                       "o en su defecto, fallan.<p>"

                       "Con esta utilidad puedes apagar el sistema sin peligro, "
                       "ya que antes de hacerlo, deja todos los procesos cerrados.<p>"

                       "&iquest;Apagar sistema?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok)
    {
        system("halt");
    }
    ui->progressBar->hide();
    ui->pushButton_2->hide();
    ui->label_13->hide();ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
}

void recoverdrake::on_actionEntrar_en_modo_consola_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Reiniciar a modo consola.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Entrar en modo consola")),
                       QString::fromUtf8(tr("<center><b>Entrar en modo consola</b></center><p>"

                       "Puede que tengamos que hacer algo en consola sin tener "
                       "abierto el servidor grafico (X), como por ejemplo instalar "
                       "los drivers privativos de nvidia.<p>"

                       "Con esta utilidad puedes cerrar el servidor grafico y "
                       "hacer los procesos necesarios desde la terminal sin peligro "
                       "de tener procesos graficos activados.<p>"

                       "IMPORTANTE: Para volver otra vez al servidor grafico tienes que "
                       "escribir como <b>root</b>, el siguiente comando: <p>"
                       "<b>init 5</b><p>"

                       "&iquest;Entrar en modo consola?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok)
    {
        system("init 3");
    }
    ui->progressBar->hide();
    ui->pushButton_2->hide();
    ui->label_13->hide();ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
}

void recoverdrake::on_actionProcesos_activos_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Control de procesos activos.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Control de procesos")),
                       QString::fromUtf8(tr("<center><b>Control de procesos</b></center><p>"

                       "Control de todos los procesos activos, tanto del usuario como "
                       "de root, incluso se pueden matar cualquiera de los procesos "
                       "que necesitemos hacerlo.<p>"

                       "&iquest;Abrir consola de procesos?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok)
        system("konsole -e top");
    ui->progressBar->hide();
    ui->pushButton_2->hide();
    ui->label_13->hide();
    ui->tabWidget->setCurrentPage(pagina);
    ui->tabWidget_8->setCurrentPage(0);
}

void recoverdrake::on_actionWine_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Wine.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Emulacion): Wine")),
                       QString::fromUtf8(tr("<center><b>Instalar Wine</b></center><p>"

                       "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                       "para un completo uso de tu sistema operativo.<p>"

                       "En este caso: Wine.<p>"

                       "<B>NOTA: Debes esperar a que termine completamente el "
                       "proceso seleccionado, el cual te sera notificado "
                       "cuando finalice en la consola de procesos.</B><p>"

                       "&iquest;Instalar Wine?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

        QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
        QString cmd = "urpmi --fuzzy --wget -a --auto wine";
        QStringList comandos;
        comandos<< cm << cmd;

        if (mib != 0)
        delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionWine_doors_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Wine-doors.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Emulacion): Wine-doors")),
                       QString::fromUtf8(tr("<center><b>Instalar Wine-doors</b></center><p>"

                       "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                       "para un completo uso de tu sistema operativo.<p>"

                       "En este caso: Wine-doors.<p>"

                       "<B>NOTA: Debes esperar a que termine completamente el "
                       "proceso seleccionado, el cual te sera notificado "
                       "cuando finalice en la consola de procesos.</B><p>"

                       "&iquest;Instalar Wine-doors?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

        QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
        QString cmd = "urpmi --fuzzy --wget -a --auto wine-doors";
        QStringList comandos;
        comandos<< cm << cmd;

        if (mib != 0)
        delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionPlayonlinux_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Playonlinux.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Emulacion): Playonlinux")),
                       QString::fromUtf8(tr("<center><b>Instalar Playonlinux</b></center><p>"

                       "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                       "para un completo uso de tu sistema operativo.<p>"

                       "En este caso: Playonlinux.<p>"

                       "<B>NOTA: Debes esperar a que termine completamente el "
                       "proceso seleccionado, el cual te sera notificado "
                       "cuando finalice en la consola de procesos.</B><p>"

                       "&iquest;Instalar Playonlinux?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

        QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
        QString cmd = "urpmi --fuzzy --wget -a --auto playonlinux";
        QStringList comandos;
        comandos<< cm << cmd;

        if (mib != 0)
        delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionVirtualBox_2_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar VirtualBox OSE.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Emulacion): Virtualbox")),
                       QString::fromUtf8(tr("<center><b>Instalar Virtualbox</b></center><p>"

                       "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                       "para un completo uso de tu sistema operativo.<p>"

                       "En este caso: Virtualbox.<p>"

                       "<B>NOTA: Debes esperar a que termine completamente el "
                       "proceso seleccionado, el cual te sera notificado "
                       "cuando finalice en la consola de procesos.</B><p>"

                       "&iquest;Instalar Virtualbox?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

        QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
        QString cmd = "urpmi --fuzzy --wget -a --auto virtualbox virtualbox-guest-additions dkms-virtualbox";
        QStringList comandos;
        comandos<< cm << cmd;

        if (mib != 0)
        delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionQuemu_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Qemu.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Emulacion): Qemu")),
                       QString::fromUtf8(tr("<center><b>Instalar Qemu</b></center><p>"

                       "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                       "para un completo uso de tu sistema operativo.<p>"

                       "En este caso: Qemu.<p>"

                       "<B>NOTA: Debes esperar a que termine completamente el "
                       "proceso seleccionado, el cual te sera notificado "
                       "cuando finalice en la consola de procesos.</B><p>"

                       "&iquest;Instalar Qemu?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

        QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
        QString cmd = "urpmi --fuzzy --wget -a --auto qemu-launcher qemu qemu-img";
        QStringList comandos;
        comandos<< cm << cmd;

        if (mib != 0)
        delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionM_A_M_E_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar M.(Multi) A.(Arcade) M.(Machine) E.(Emulator).");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Emulacion): M.A.M.E.")),
                       QString::fromUtf8(tr("<center><b>Instalar M.A.M.E.</b></center><p>"

                       "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                       "para un completo uso de tu sistema operativo.<p>"

                       "En este caso: M.A.M.E.<p>"

                       "<B>NOTA: Debes esperar a que termine completamente el "
                       "proceso seleccionado, el cual te sera notificado "
                       "cuando finalice en la consola de procesos.</B><p>"

                       "&iquest;Instalar M.A.M.E.?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

        QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
        QString cmd = "urpmi --fuzzy --wget -a --auto sdlmame sdlmame-extra-data";
        QStringList comandos;
        comandos<< cm << cmd;

        if (mib != 0)
        delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionRock_Diamonds_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Rock'n'Diamonds.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Emulacion): Rocks'n'Diamonds")),
                       QString::fromUtf8(tr("<center><b>Instalar Rocks'n'Diamonds</b></center><p>"

                       "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                       "para un completo uso de tu sistema operativo.<p>"

                       "En este caso: Rocks'n'Diamonds<p>"

                       "<B>NOTA: Debes esperar a que termine completamente el "
                       "proceso seleccionado, el cual te sera notificado "
                       "cuando finalice en la consola de procesos.</B><p>"

                       "&iquest;Instalar Rocks'n'Diamonds?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

        QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
        QString cmd = "urpmi --fuzzy --wget -a --auto rocksndiamonds";
        QStringList comandos;
        comandos<< cm << cmd;

        if (mib != 0)
        delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionPack_Emuladores_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Pack de emuladores Retro.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Emulacion): Pack emuladores")),
                       QString::fromUtf8(tr("<center><b>Instalar Pack emuladores</b></center><p>"

                       "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                       "para un completo uso de tu sistema operativo.<p>"

                       "En este caso: Pack emuladores<p>"

                       "<B>NOTA: Debes esperar a que termine completamente el "
                       "proceso seleccionado, el cual te sera notificado "
                       "cuando finalice en la consola de procesos.</B><p>"

                       "&iquest;Instalar Pack emuladores?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

        QString cm = QString::fromUtf8(tr("echo Instalando paquetes solicitados..."));
        QString cmd = "urpmi --fuzzy --wget -a --auto desmume arnold atari800-sdl boycotadvance dosbox dosemu e-uae epsxe fceux frodo"
                      "fuse-emulator fuse-emulator-utils fuse-utils gcube gens-gs gngeo gngb goosnes hatari lxdream mednafen "
                      "openmsx osmose snes9x vice zsnes";
        QStringList comandos;
        comandos<< cm << cmd;

        if (mib != 0)
        delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionTodos_9_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar todos los emuladores recomendados.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Emulacion): Todos")),
                       QString::fromUtf8(tr("<center><b>Instalar Todos</b></center><p>"

                       "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                       "para un completo uso de tu sistema operativo.<p>"

                       "En este caso: Todos.<p>"

                       "<B>NOTA: Debes esperar a que termine completamente el "
                       "proceso seleccionado, el cual te sera notificado "
                       "cuando finalice en la consola de procesos.</B><p>"

                       "&iquest;Instalar todos los paquetes de emulacion?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

        QString cm = QString::fromUtf8(tr("echo Instalando paquetes solicitados..."));
        QString cmd = "urpmi --fuzzy --wget -a --auto wine wine-doors playonlinux virtualbox virtualbox-guest-additions dkms-virtualbox "
                      "qemu-launcher qemu qemu-img sdlmame sdlmame-extra-data rocksndiamonds desmume arnold atari800-sdl "
                      "boycotadvance dosbox dosemu e-uae epsxe fceux frodo fuse-emulator fuse-emulator-utils fuse-utils "
                      "gcube gens-gs gngeo gngb goosnes hatari lxdream mednafen openmsx osmose snes9x vice zsnes";
        QStringList comandos;
        comandos<< cm << cmd;

        if (mib != 0)
        delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionSoundStudio_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar SoundStudio.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Conversores): SoundStudio")),
                       QString::fromUtf8(tr("<center><b>Instalar SoundStudio</b></center><p>"

                       "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                       "para un completo uso de tu sistema operativo.<p>"

                       "En este caso: SoundStudio<p>"

                       "<B>NOTA: Debes esperar a que termine completamente el "
                       "proceso seleccionado, el cual te sera notificado "
                       "cuando finalice en la consola de procesos.</B><p>"

                       "&iquest;Instalar SoundStudio?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

        QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
        QString cmd = "urpmi --fuzzy --wget -a --auto task-sound-studio";
        QStringList comandos;
        comandos<< cm << cmd;

        if (mib != 0)
        delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionSoundConverter_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar SoundConverter.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Conversores): SoundConverter")),
                       QString::fromUtf8(tr("<center><b>Instalar SoundConverter</b></center><p>"

                       "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                       "para un completo uso de tu sistema operativo.<p>"

                       "En este caso: SoundConverter<p>"

                       "<B>NOTA: Debes esperar a que termine completamente el "
                       "proceso seleccionado, el cual te sera notificado "
                       "cuando finalice en la consola de procesos.</B><p>"

                       "&iquest;Instalar SoundConverter?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

        QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
        QString cmd = "urpmi --fuzzy --wget -a --auto soundconverter";
        QStringList comandos;
        comandos<< cm << cmd;

        if (mib != 0)
        delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionAudioKonverter_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar AudioKonverter.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Conversores): AudioKonverter")),
                       QString::fromUtf8(tr("<center><b>Instalar AudioKonverter</b></center><p>"

                       "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                       "para un completo uso de tu sistema operativo.<p>"

                       "En este caso: AudioKonverter<p>"

                       "<B>NOTA: Debes esperar a que termine completamente el "
                       "proceso seleccionado, el cual te sera notificado "
                       "cuando finalice en la consola de procesos.</B><p>"

                       "&iquest;Instalar AudioKonverter?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

        QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
        QString cmd = "urpmi --fuzzy --wget -a --auto audiokonverter";
        QStringList comandos;
        comandos<< cm << cmd;

        if (mib != 0)
        delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionMixxx_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Mixxx.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Conversores): Mixxx")),
                       QString::fromUtf8(tr("<center><b>Instalar Mixxx</b></center><p>"

                       "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                       "para un completo uso de tu sistema operativo.<p>"

                       "En este caso: Mixxx<p>"

                       "<B>NOTA: Debes esperar a que termine completamente el "
                       "proceso seleccionado, el cual te sera notificado "
                       "cuando finalice en la consola de procesos.</B><p>"

                       "&iquest;Instalar Mixxx?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

        QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
        QString cmd = "urpmi --fuzzy --wget -a --auto mixxx";
        QStringList comandos;
        comandos<< cm << cmd;

        if (mib != 0)
        delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionAvidemux_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Avidemux.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Conversores): Avidemux")),
                       QString::fromUtf8(tr("<center><b>Instalar Avidemux</b></center><p>"

                       "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                       "para un completo uso de tu sistema operativo.<p>"

                       "En este caso: Avidemux<p>"

                       "<B>NOTA: Debes esperar a que termine completamente el "
                       "proceso seleccionado, el cual te sera notificado "
                       "cuando finalice en la consola de procesos.</B><p>"

                       "&iquest;Instalar Avidemux?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

        QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
        QString cmd = "urpmi --fuzzy --wget -a --auto avidemux";
        QStringList comandos;
        comandos<< cm << cmd;

        if (mib != 0)
        delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionDvDRip_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar dvd::rip.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Conversores): dvd::rip")),
                       QString::fromUtf8(tr("<center><b>Instalar dvd::rip</b></center><p>"

                       "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                       "para un completo uso de tu sistema operativo.<p>"

                       "En este caso: dvd::rip<p>"

                       "<B>NOTA: Debes esperar a que termine completamente el "
                       "proceso seleccionado, el cual te sera notificado "
                       "cuando finalice en la consola de procesos.</B><p>"

                       "&iquest;Instalar dvd::rip?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

        QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
        QString cmd = "urpmi --fuzzy --wget -a --auto dvdrip";
        QStringList comandos;
        comandos<< cm << cmd;

        if (mib != 0)
        delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionAsunder_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar Asunder.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Conversores): Asunder CD Ripper")),
                       QString::fromUtf8(tr("<center><b>Instalar Asunder CD Ripper</b></center><p>"

                       "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                       "para un completo uso de tu sistema operativo.<p>"

                       "En este caso: Asunder CD Ripper<p>"

                       "<B>NOTA: Debes esperar a que termine completamente el "
                       "proceso seleccionado, el cual te sera notificado "
                       "cuando finalice en la consola de procesos.</B><p>"

                       "&iquest;Instalar Asunder CD Ripper?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

        QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
        QString cmd = "urpmi --fuzzy --wget -a --auto asunder";
        QStringList comandos;
        comandos<< cm << cmd;

        if (mib != 0)
        delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionTodos_10_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar todos los Conversores recomendados.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Conversores): Todos")),
                       QString::fromUtf8(tr("<center><b>Instalar Todos</b></center><p>"

                       "Con esta opcion vamos a instalar paquetes considerados imprescindibles "
                       "para un completo uso de tu sistema operativo.<p>"

                       "En este caso: Todos.<p>"

                       "<B>NOTA: Debes esperar a que termine completamente el "
                       "proceso seleccionado, el cual te sera notificado "
                       "cuando finalice en la consola de procesos.</B><p>"

                       "&iquest;Instalar todos los paquetes de conversion?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

        QString cm = QString::fromUtf8(tr("echo Instalando paquetes solicitados..."));
        QString cmd = "urpmi --fuzzy --wget -a --auto task-sound-studio soundconverter audiokonverter mixxx avidemux dvdrip asunder";
        QStringList comandos;
        comandos<< cm << cmd;

        if (mib != 0)
        delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionInstalar_Recomendables_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar imprescindibles no catalogados.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Imprescindibles (Recomendables)")),
                       QString::fromUtf8(tr("<center><b>Instalar Recomendables</b></center><p>"

                       "Con esta opcion vamos a instalar paquetes considerados recomendables "
                       "para un completo uso de tu sistema operativo y siempre siguiendo mi "
                       "criterio personal.<p>"

                       "En este caso: festival, amor, koffice, matrix, openoffice, kshisen (mahjongg), gimp, etc.<p>"

                       "<B>NOTA: Debes esperar a que termine completamente el "
                       "proceso seleccionado, el cual te sera notificado "
                       "cuando finalice en la consola de procesos.</B><p>"

                       "&iquest;Instalar recomendables?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

        QString cm = QString::fromUtf8(tr("echo Instalando paquetes solicitados..."));
        QString cmd = "urpmi --fuzzy --wget -a --auto festival amor koffice-l10n-es koffice xscreensaver-matrix tmux "
                      "kate task-blackberry-gnome task-3ddesktop-kde openoffice.org openoffice.org-help-es "
                      "xsane-gimp gimp kttsd gaupol alsamixergui asunder compiz-fusion";
        QStringList comandos;
        comandos<< cm << cmd;

        if (mib != 0)
        delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionSystemSetting_como_root_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: systemsetting como root.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("SytemSettings como root")),
                       QString::fromUtf8(tr("<center><b>SystemSettings como root</b></center><p>"

                       "Con esta opcion sirve para configurar el escritorio, pero en este "
                       "caso como root, ya que por ejemplo para cambiar la ventana de "
                       "bienvenida por otra es necesario acceder a el como root.<p>"

                       "&iquest;Acceder a SystemSettings?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok)
    {
        system("systemsettings");
    }
    ui->progressBar->hide();
    ui->pushButton_2->hide();
    ui->label_13->hide();
    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;
}

void recoverdrake::on_actionError_en_ventanas_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Solucionar marco ventanas con compiz-fusion activado.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Sin marco de ventana en compiz-fusion")),
                       QString::fromUtf8(tr("<center><b>Sin marco de ventana en compiz-fusion</b></center><p>"

                       "Con esta opcion arreglaremos el problema de las ventanas "
                       "al instalar emerald y paquetes complementarios de compiz-fusion, "
                       "por lo que se instala o comprueba si esta instalado y despues se "
                       "acceda a su configuracion.<p>"

                       "<B>NOTA: Debes esperar a que termine completamente el "
                       "proceso seleccionado, el cual te sera notificado "
                       "cuando finalice en la consola de procesos.</B><p>"

                       "&iquest;Preparar para arreglar marco de ventana de compiz-fusion?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

        QString cm = QString::fromUtf8(tr("echo Instalando paquetes solicitados..."));
        QString cmd = "urpmi --fuzzy --wget -a --auto emerald compiz compiz-fusion compiz-fusion-icon compiz-fusion-plugins-extra compiz-fusion-plugins-unsupported gset-compiz";
        QString cm1 = QString::fromUtf8(tr("echo Ejecutando emerald..."));
        QString cmd1 ="su - %1 -c \"emerald-theme-manager\"";
        cmd1=cmd1.arg(user);
        QStringList comandos;
        comandos<< cm << cmd << cm1 << cmd1;

        if (mib != 0)
        delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionConfigurar_emerald_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Configurar emarald para compiz-fusion.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Configurar emerald")),
                       QString::fromUtf8(tr("<center><b>Configurar emerald</b></center><p>"

                       "Con esta opcion sirve para configurar la decoracion de las "
                       "ventanas de compiz-fusion.<p>"

                       "&iquest;Acceder a emerald?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok)
    {
        system("su - "+user+" -c \"emerald-theme-manager\"");
    }
    ui->progressBar->hide();
    ui->pushButton_2->hide();
    ui->label_13->hide();
    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;
}

void recoverdrake::on_actionCompizfussion_icon_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Activar Fusion Icon.");
    Refrescar();
    int respuesta = 0;
    respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Activar Fusion Icon")),
                       QString::fromUtf8(tr("<center><b>Activar Fusion Icon</b></center><p>"

                       "NOTA MUY IMPORTANTE: NO ACTIVE ESTA OPCION SI NO TIENE "
                       "COMPIZ-FUSION ACTIVADO EN EL SISTEMA, YA QUE SIN REMEDIO "
                       "IRA A UNA PANTALLA EN BLANCO. LA SOLUCION EN EL CASO DE QUE "
                       "LE OCURRA ESTO ES PULSAR \"CTRL+ALT+BACKSPACE\" DOS VECES O "
                       "NO PODRA SALIR DE LA PANTALLA BLANCA.<p>"

                       "Con esta opcion ponemos en la barra de tareas un icono "
                       "para poder, en caso necesario, restaurar los marcos de "
                       "las ventanas de compiz-fusion.<p>"

                       "&iquest;Activar Fusion Icon?")), QMessageBox::Ok, QMessageBox::No);

    if (respuesta == QMessageBox::Ok){

            QString cm = QString::fromUtf8(tr("echo Ejecutando fusion-icon..."));
            QString cmd = "su - %1 -c \"fusion-icon\"";
            cmd=cmd.arg(user);
            QStringList comandos;
            comandos<< cmd;

            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionRecuperar_barra_de_tareas_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Recuperar barra de tareas desaparecida.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Recuperar barra de tareas")),
                       QString::fromUtf8(tr("<center><b>Recuperar barra de tareas</b></center><p>"

                       "Con esta opcion arreglaremos el problema de la barra de "
                       "tareas en el caso de que haya desaparecido.<p>"

                       "Tenga en cuenta que con esta opcion, cambiara el aspecto "
                       "de su escritorio, no asi las demas configuraciones que "
                       "seguiran tal cual las tenia.<p>"

                       "<B>NOTA: Debes esperar a que termine completamente el "
                       "proceso seleccionado, el cual te sera notificado "
                       "cuando finalice en la consola de procesos.</B><p>"

                       "&iquest;Recuperar barra de tareas?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

        QString cm = QString::fromUtf8(tr("echo Restaurando barra de tareas..."));
        QString cmd = "su - %1 -c \"kquitapp plasma-desktop\"";
        cmd=cmd.arg(user);
        QString cmd1 = "su - %1 -c \"mv /home/%1/.kde4/share/config/plasma-desktop-appletsrc /home/%1/.kde4/share/config/plasma-desktop-appletsrc.bak\"";
        cmd1=cmd1.arg(user);
        QString cmd2 = "su - %1 -c \"plasma-desktop\"";
        cmd2=cmd2.arg(user);
        QStringList comandos;
        comandos<< cm << cmd << cmd1 << cmd2;

        if (mib != 0)
        delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionCaptura_de_pantalla_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Captura de pantalla.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Captura de pantalla interactiva")),
                       QString::fromUtf8(tr("<center><b>Captura de pantalla interactiva</b></center><p>"

                       "Con esta utilidad puedes hacer una captura de pantalla "
                       "pero eligiendo que capturar y cuando.<p>"

                       "&iquest;Captura de pantalla interactiva?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

        QString cm = QString::fromUtf8(tr("echo Ejecutando captura de pantalla..."));
        QString cmd = "su - %1 -c \"gnome-screenshot --interactive\"";
        cmd=cmd.arg(user);
        QStringList comandos;
        comandos<< cm << cmd;

        if (mib != 0)
        delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionListar_logs_de_comandos_de_shell_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Listar logs de comandos realizados en la consola.");
    Refrescar();
    if (kwrite == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"zenity\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Listar logs de uso de comandos de shell")),
                           QString::fromUtf8(tr("<center><b>Listar logs de uso de comandos de shell</b></center><p>"

                           "Con esta utilidad puedes saber los ultimos comandos que has "
                           "escrito en la consola.<p>"

                           "Para el publico en general esto tiene poco de efectivo, pero "
                           "para algunos, es bastante interesante saber que comandos hemos "
                           "ejecutado.<p>"

                           "&iquest;Listar logs de comandos shell?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok)
        {
            system("kwrite /home/"+user+"/.bash_history");
        }
        else{
            ui->tabWidget->setCurrentPage(pagina);
            ui->tabWidget_8->setCurrentPage(0);
            return;
        }
    }
    ui->progressBar->hide();
    ui->pushButton_2->hide();
    ui->label_13->hide();
    ui->tabWidget->setCurrentPage(pagina);
    ui->tabWidget_8->setCurrentPage(0);
}

void recoverdrake::on_pushButton_clicked()
{
    ui->progressBar->setValue(0);
    drakeSistema drake;
    setUpdatesEnabled(false);
    QProgressDialog progress(tr("Refrescando datos... Espera por favor"), tr("Cancelar"), 0, 27, this);
    progress.show();
    for(i=0;i<27;i++)
    {
        qApp->processEvents();
        progress.setValue(i);
        if (progress.wasCanceled())
            break;
        if (i==0)
            dist = drake.getDistribucion();
        if (i==1)
            arqt = drake.getArquitectura();
        if (i==2)
            user = drake.getUser();
        if (i==3)
            Tip = drake.getTipKernel();
        if (i==4)
            Ver = drake.getVerKernel();
        if (i==5)
            Rev = drake.getRevKernel();
        if (i==6)
            Dir = drake.getDirActual();
        if (i==7)
            Vir = drake.getVirtual();
        if (i==8)
            Linux = drake.getLinux();
        if (i==9)
            Pci = drake.getPci();
        if (i==10)
            Mod = drake.getModulo();
        if (i==11)
            du = drake.getEspacio();
        if (i==12)
            repo = drake.getRepositorio();
        if (i==13)
            red = drake.getRedes();
        if (i==14)
            rpm = drake.getRpms();
        if (i==15)
            Distro = drake.getDistrop();
        if (i==16)
            free = drake.getFree();
        if (i==17)
            Total = drake.getDisco();
        if (i==18)
            Raiz = drake.getDiscR();
        if (i==19)
            Home = drake.getDiscH();
        if (i==20)
            ip = drake.getIP();
        if (i==21)
            Bios = drake.getBios();
        if (i==22)
            release = drake.getRelease();
        if (i==23)
        {
            ipRoute = drake.getIPRouter();
            QStringList Route = ipRoute.split(" ");
            ipRoute = Route.value(Route.count()-1);
            MAC = drake.getMAC(ipRoute);
            this->ui->label_161->setText(MAC);
        }
        if (i==24)
        {
            infoPro = drake.getInfoPro();
            Home=Home.right(10).left(3).remove("%");
            Raiz=Raiz.right(6).left(3).remove("%");
        }
        if (i==25)
        {
            Resolution = drake.getResolucion();
            Resolution = Resolution.replace("minimum","Min.").replace("current","Actual").replace("maximum","Max.").remove("Screen 0:");
        }
        if (i==26)
        {
            IPconexion = drake.getIPconexion("www.google.com");
            if (IPconexion == "")
                IPconexion = drake.getIPconexion("www.ebay.com");
            if (IPconexion == "")
                IPconexion = drake.getIPconexion("www.wikipedia.org");
        }
    }
    this->ui->textEdit_9->setText(QString::fromUtf8(rpm));
    this->ui->textEdit_6->setText(QString::fromUtf8(du));
    this->ui->lineEdit->setText(QString::fromUtf8(user));
    this->ui->lineEdit_2->setText(QString::fromUtf8(arqt));
    this->ui->lineEdit_3->setText(QString::fromUtf8(dist));
    this->ui->lineEdit_4->setText(QString::fromUtf8(Ver));
    this->ui->lineEdit_5->setText(QString::fromUtf8(Tip));
    this->ui->lineEdit_6->setText(QString::fromUtf8(Rev));
    this->ui->lineEdit_7->setText(QString::fromUtf8(Resolution));
    this->ui->textEdit_3->setText(QString::fromUtf8(Linux));
    this->ui->textEdit_10->setText(QString::fromUtf8(Pci));
    this->ui->textEdit_11->setText(QString::fromUtf8(infoPro));
    this->ui->textEdit_5->setText(QString::fromUtf8(Mod));
    this->ui->textEdit_7->setText(QString::fromUtf8(repo));
    this->ui->textEdit_8->setText(QString::fromUtf8(red));
    this->ui->label_21->setText(QString::fromUtf8(release));
    this->ui->textBrowser_2->setText(QString::fromUtf8(free));
    this->ui->textBrowser_3->setText(QString::fromUtf8(Total));
    this->ui->progressBar_2->setValue(Raiz.toInt());
    this->ui->progressBar_3->setValue(Home.toInt());
    this->ui->textEdit_12->setText(QString::fromUtf8(Bios));
    if (ipRoute!="")
    {
        if (EthF > 0)
            this->ui->label_22->setText(""+ipRoute+"");
        else
            this->ui->label_22->setText(""+ipRoute+" / "+Essid+"");
    }
    else if (ipRoute == "")
        this->ui->label_22->setText(tr("Utilizando Ethernet"));
    if (ip == "")
        this->ui->label_19->setText(tr("Sin Acceso a Red"));
    else if (ip != "")
        this->ui->label_19->setText(QString::fromUtf8(ip));
    else
    {
        ui->tabWidget->setCurrentPage(pagina);
        ui->tabWidget_8->setCurrentPage(0);
        return;
    }
    progress.setValue(27);
    setUpdatesEnabled(true);
}

QString recoverdrake::getPackGenerico()
{
    QProcess *procesoRPM;
    QStringList argumentosRPM;
    QByteArray Paquete;
    procesoRPM=new QProcess(this);
    argumentosRPM << "-qa";
    procesoRPM->start("rpm",argumentosRPM);
    if (! procesoRPM->waitForStarted())
        return QString("");
    procesoRPM->waitForFinished();
    Paquete = QString(procesoRPM->readAllStandardOutput());
    delete procesoRPM;
    QString res =  QString(Paquete);
    res.chop(1);
    return res;
}

QString recoverdrake::getRpm(QString Valor)
{
    QProcess *procesoRPM;
    QStringList argumentosRPM;
    QByteArray Paquete;
    procesoRPM=new QProcess(this);
    argumentosRPM << "-q" << Valor;
    procesoRPM->start("rpm",argumentosRPM);
    if (! procesoRPM->waitForStarted())
        return QString("");
    procesoRPM->waitForFinished();
    Paquete = QString(procesoRPM->readAllStandardOutput());
    delete procesoRPM;
    QString res =  QString(Paquete);
    res.chop(1);
    return res;
}

void recoverdrake::on_actionEvitar_reconocimiento_como_memoria_USB_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Evitar reconocimiento de memoria en stick de Internet (3G).");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Evitar reconocimiento como memoria USB")),
                       QString::fromUtf8(tr("<center><b>Evitar reconocimiento como memoria USB</b></center><p>"

                       "Con esta opcion evitamos que nuestro stick 3G de internet, se reconocido "
                       "como un disco USB y por lo tanto no podamos acceder a el como Stick de "
                       "Internet .<p>"

                       "<B>NOTA: Debes esperar a que termine completamente el "
                       "proceso seleccionado, el cual te sera notificado "
                       "cuando finalice en la consola de procesos.</B><p>"

                       "&iquest;Evitar problema de reconocimiento?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

        QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
        QString cmd = "urpmi --fuzzy --wget -a --auto usb_modeswitch";
        QStringList comandos;
        comandos<< cm << cmd;

        if (mib != 0)
        delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
        connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionImg_iso_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .img a .iso.");
    Refrescar();
    if (ccd2iso == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ccd2iso\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        QStringList comandos;
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir imagen .img a .iso")),
                        QString::fromUtf8(tr("<center><b>Convertir imagen .img a .iso</b></center><p>"

                        "Con esta utilidad podemos convertir imagenes iso no compatibles "
                        "con Linux al standard 9960, como en este caso imagenes con extension "
                        ".img<P>"

                        "Se creara el fichero con extension .iso en la misma ubicacion que su predecesor.<p>"

                        "<B>NOTA Debes esperar a que termine completamente el "
                        "proceso seleccionado, el cual te sera notificado "
                        "cuando finalice en la consola de procesos.</B><p>"

                        "&iquest;Convertir archivo de imagen?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok)
        {

            QString path=tr("/home/%1/Documentos/");
            path=path.arg(user);

            QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo imagen")),
                                     path,trUtf8(tr("Archivo de imagen (*.img)")));
            system ("mv -v '"+fileNameOrigen+"' `echo '"+fileNameOrigen+"' |tr ' ' '_'`");
            system ("mv -v '"+fileNameOrigen+"' `echo '"+fileNameOrigen+"' |tr '&' 'y'`");
            if (fileNameOrigen.isEmpty())
            {
                ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                return;
            }
            QString cm =QString::fromUtf8(tr("echo Montando imagen..."));
            QString fileName = fileNameOrigen.replace(" ", "_").replace("&","y").replace(".img","");
            QString cm1= "su - %1 -c \"ccd2iso %2.img %3.iso\"";
            cm1 = cm1.arg(user).arg(fileName).arg(fileName);
            comandos<< cm << cm1;

            if (mib != 0)
                delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
            connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
        }
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionCdi_iso_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .cdi a .iso.");
    Refrescar();
    if (cdi2iso == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"cdi2iso\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        QStringList comandos;
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir imagen .cdi a .iso")),
                        QString::fromUtf8(tr("<center><b>Convertir imagen .cdi a .iso</b></center><p>"

                        "Con esta utilidad podemos convertir imagenes iso no compatibles "
                        "con Linux al standard 9960, como en este caso imagenes con extension "
                        ".cdi<P>"

                        "Se creara el fichero con extension .iso en la misma ubicacion que su predecesor.<p>"

                        "<B>NOTA Debes esperar a que termine completamente el "
                        "proceso seleccionado, el cual te sera notificado "
                        "cuando finalice en la consola de procesos.</B><p>"

                        "&iquest;Convertir archivo de imagen?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

            QString path=tr("/home/%1/Documentos/");
            path=path.arg(user);

            QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo imagen")),
                                     path,trUtf8(tr("Archivo de imagen (*.cdi)")));
            system ("mv -v '"+fileNameOrigen+"' `echo '"+fileNameOrigen+"' |tr ' ' '_'`");
            system ("mv -v '"+fileNameOrigen+"' `echo '"+fileNameOrigen+"' |tr '&' 'y'`");
            if (fileNameOrigen.isEmpty())
            {
                ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                return;
            }
            QString cm =QString::fromUtf8(tr("echo Montando imagen..."));
            QString fileName = fileNameOrigen.replace(" ", "_").replace("&","y").replace(".cdi","");
            QString cm1= "su - %1 -c \"cdi2iso %2.img %3.iso\"";
            cm1 = cm1.arg(user).arg(fileName).arg(fileName);
            comandos<< cm << cm1;

            if (mib != 0)
                delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
            connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionMdf_iso_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .mdf a .iso.");
    Refrescar();
    if (mdf2iso == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"mdf2iso\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        QStringList comandos;
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir imagen .mdf a .iso")),
                        QString::fromUtf8(tr("<center><b>Convertir imagen .mdf a .iso</b></center><p>"

                        "Con esta utilidad podemos convertir imagenes iso no compatibles "
                        "con Linux al standard 9960, como en este caso imagenes con extension "
                        ".mdf<P>"

                        "Se creara el fichero con extension .iso en la misma ubicacion que su predecesor.<p>"

                        "<B>NOTA Debes esperar a que termine completamente el "
                        "proceso seleccionado, el cual te sera notificado "
                        "cuando finalice en la consola de procesos.</B><p>"

                        "&iquest;Convertir archivo de imagen?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

            QString path=tr("/home/%1/Documentos/");
            path=path.arg(user);

            QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo imagen")),
                                     path,trUtf8(tr("Archivo de imagen (*.mdf)")));
            system ("mv -v '"+fileNameOrigen+"' `echo '"+fileNameOrigen+"' |tr ' ' '_'`");
            system ("mv -v '"+fileNameOrigen+"' `echo '"+fileNameOrigen+"' |tr '&' 'y'`");
            if (fileNameOrigen.isEmpty())
            {
                ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                return;
            }
            QString cm =QString::fromUtf8(tr("echo Montando imagen..."));
            QString fileName = fileNameOrigen.replace(" ", "_").replace("&","y").replace(".mdf","");
            QString cm1= "su - %1 -c \"mdf2iso %2.img %3.iso\"";
            cm1 = cm1.arg(user).arg(fileName).arg(fileName);
            comandos<< cm << cm1;

            if (mib != 0)
                delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
            connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionNrg_iso_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Convertir .nrg a .iso.");
    Refrescar();
    if (nrg2iso == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"nrg2iso\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        QStringList comandos;
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Convertir imagen .nrg a .iso")),
                        QString::fromUtf8(tr("<center><b>Convertir imagen .nrg a .iso</b></center><p>"

                        "Con esta utilidad podemos convertir imagenes iso no compatibles "
                        "con Linux al standard 9960, como en este caso imagenes con extension "
                        ".nrg<P>"

                        "Se creara el fichero con extension .iso en la misma ubicacion que su predecesor.<p>"

                        "<B>NOTA Debes esperar a que termine completamente el "
                        "proceso seleccionado, el cual te sera notificado "
                        "cuando finalice en la consola de procesos.</B><p>"

                        "&iquest;Convertir archivo de imagen?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok){

            QString path=tr("/home/%1/Documentos/");
            path=path.arg(user);

            QString fileNameOrigen = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo imagen")),
                                     path,trUtf8(tr("Archivo de imagen (*.nrg)")));
            system ("mv -v '"+fileNameOrigen+"' `echo '"+fileNameOrigen+"' |tr ' ' '_'`");
            system ("mv -v '"+fileNameOrigen+"' `echo '"+fileNameOrigen+"' |tr '&' 'y'`");
            if (fileNameOrigen.isEmpty())
            {
                ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                return;
            }
            QString cm =QString::fromUtf8(tr("echo Montando imagen..."));
            QString fileName = fileNameOrigen.replace(" ", "_").replace("&","y").replace(".nrg","");
            QString cm1= "su - %1 -c \"nrg2iso %2.img %3.iso\"";
            cm1 = cm1.arg(user).arg(fileName).arg(fileName);
            comandos<< cm << cm1;

            if (mib != 0)
                delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
            connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_pushButton_2_clicked()
{
    disconnect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    disconnect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    disconnect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    system("su - "+user+" -c \"/usr/bin/notify-send -i /usr/share/icons/gnome/32x32/status/important.png \'(RecoverDrake)...\' \'CANCELADO: El proceso ha sido interrumpido por ti.\'\"");
    ui->progressBar->setValue(0);
    this->Actualizar();
}

void recoverdrake::on_actionGenerar_Actulizar_DB_del_Men_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Generar/Actualizar DB del menu.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Generar/Actualizar DB del Menu")),
                       QString::fromUtf8(tr("<center><b>Generar/Actualizar DB del Menu</b></center><p>"

                       "Con esta opcion generamos o actualizamos la base de datos que tenemos "
                       "de los paquetes que componen el menu principal del escritorio, pudiendo "
                       "lanzar cualquier programa instalado en el equipo con solo pincharlo.<p>"

                       "<B>NOTA: Debes esperar a que termine completamente el "
                       "proceso seleccionado, el cual te sera notificado "
                       "cuando finalice en la consola de procesos.</B><p>"

                       "&iquest;Generar/Actualizar DB del Menu?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok)
    {
        QTest::qWait(20);
        ui->textEdit->append("Realizando proceso seleccionado y recopilando los datos solicitados... espera por favor, puede tardar unos segundos.");
        drakeSistema drake;
        db = drake.getDB();
        Receptor = db.split("\n");
        ui->progressBar->setRange(0,Receptor.count());
        int cantidad=1;
        for(int i=0;i<Receptor.count();i++)
        {
            if (cantidad == 1)
            {
                dbs.transaction();
            }
            Valor = Receptor.value(i);
            Catalog = drake.getCat(Valor);
            val = "Exec=";
            val1 = "Name=";
            val2 = "Name[es]=";           
            val5 = "Comment=";
            val6 = "Comment[es]=";
            val7 = "Categories=";
            val8 = "Icon=";
            QStringList lines = Catalog.split("\n");
            for(int a=0;a<lines.count();a++)
            {     
                QString verlo=QString::fromUtf8(lines.value(a));
                QString exacto = verlo.remove("TryExec").remove("GenericName");
                pos = exacto.indexOf(val, 0);
                pos1 = exacto.indexOf(val1, 0);
                pos2 = exacto.indexOf(val2, 0);
                pos5 = exacto.indexOf(val5, 0);
                pos6 = exacto.indexOf(val6, 0);
                pos7 = exacto.indexOf(val7, 0);
                pos8 = exacto.indexOf(val8, 0);
                if (pos != -1)
                {
                    Value0 = lines.at(a);
                }                
                if (pos1 != -1)
                {
                    Value1 = lines.at(a);                    
                }
                if (pos2 != -1)
                {
                    Value2 = lines.at(a);                    
                }
                if (pos5 != -1)
                {
                    Value5 = lines.at(a);                   
                }
                if (pos6 != -1)
                {
                    Value6 = lines.at(a);                    
                }
                if (pos7 != -1)
                {
                    Value7 = lines.at(a);                    
                }
                if (pos8 != -1)
                {
                    Value8 = lines.at(a);
                }
            }
            Value0 = QString::fromUtf8(Value0.remove(val));
            Value1 = QString::fromUtf8(Value1.remove(val1));
            Value2 = QString::fromUtf8(Value2.remove(val2));
            Value5 = QString::fromUtf8(Value5.remove(val5));
            Value6 = QString::fromUtf8(Value6.remove(val6));
            Value7 = QString::fromUtf8(Value7.remove(val7));
            Value8 = QString::fromUtf8(Value8.remove(val8)).remove("/usr/share/").remove("/usr/share/icons/");
            QSqlQuery queryVal(dbs);
            queryVal.exec("SELECT Name FROM Menu WHERE Name='"+Value1+"'");
            queryVal.first();
            Valor=queryVal.value(0).toString();
            if (Value1 == Valor)
            {
                QSqlRecord record= Model->record(this->fila);
                record.setValue(1, Value1);
                record.setValue(2, Value2);
                record.setValue(3, Value6);
                record.setValue(4, Value5);
                record.setValue(5, Value7);
                record.setValue(6, Value8);
                record.setValue(7, Value0);
                Model->setRecord(this->fila,record);
                Model->submitAll();
            }
            else
            {
                QSqlQuery queryValor(dbs);
                queryValor.prepare("INSERT INTO Menu (Name,Name_es,Comment_es,Comment,Categories,Icon,Exec)"
                                   "VALUES (:Name, :NameEs, :CommentEs, :Comment, :Categories, :Icon, :Exec)");
                queryValor.bindValue(":Name", Value1);
                queryValor.bindValue(":NameEs", Value2);
                queryValor.bindValue(":CommentEs", Value6);
                queryValor.bindValue(":Comment", Value5);
                queryValor.bindValue(":Categories", Value7);
                queryValor.bindValue(":Icon", Value8);
                queryValor.bindValue(":Exec", Value0);
                queryValor.exec();
            }
            Value0 = "";
            Value1 = "";
            Value2 = "";
            Value5 = "";
            Value6 = "";
            Value7 = "";
            Value8 = "";
            ui->progressBar->setValue(i);
            cantidad++;
            if (cantidad == 100)
            {
                cantidad=1;
                dbs.commit();
            }
        }
    ui->progressBar->setValue(Receptor.count());
    }
    ui->progressBar->setRange(0,100);
    ui->progressBar->setValue(0);
    ui->textEdit->append("Recopilacion realizada.");
    dbs.commit();
    this->Actualizar();
    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;
}

void recoverdrake::on_actionModificar_DB_del_Men_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Lanzador de aplicaciones personalizado.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Lanzador de aplicaciones")),
                       QString::fromUtf8(tr("<center><b>Lanzador de aplicaciones</b></center><p>"
                       "Con esta opcion podemos lanzar cualquier programa que hayamos capturado "
                       "con la opcion de generar/actualizar DB de Menu, incluso modificarla, borrarla, "
                       "sin ninguna modificacion en el menu original de tu escritorio favorito.<p>"
                       "<B>Tambien puedes, si te interesa, crear tus propias opciones de menu, "
                       "personalizandolo a tu gusto.</B><p>"
                       "&iquest;Ejecutar lanzador de aplicaciones?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok)
    {
        MenuAcceso *lanzador=new MenuAcceso(this);
        if (Stilo == "A")
            lanzador->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        lanzador->showMaximized();
        lanzador->exec();
    }
    ui->progressBar->hide();
    ui->pushButton_2->hide();
    ui->label_13->hide();ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
}

void recoverdrake::on_actionEtiquetado_de_mp3_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Tags para mp3/ogg.");
    QString id3lib = getRpm("id3lib");
    if (id3lib.contains(tr("instalado")) || id3lib.contains("installed") || id3lib.contains("instalado"))
    {
        QMessageBox m;
        if (Stilo == "A")
            m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"id3lib\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        QString id3v2 = getRpm("id3v2");
        if (id3v2.contains(tr("instalado")) || id3v2.contains("installed") || id3v2.contains("instalado"))
        {
            QMessageBox m;
            if (Stilo == "A")
                m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"id3v2\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
            m.exec();
        }
        else
        {
            int respuesta = 0;
            if (Mensaka!="Activo")
            {
                respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Etiquetado de mp3/ogg (Tags)")),
                               QString::fromUtf8(tr("<center><b>Etiquetado de mp3/ogg (Tags)</b></center><p>"
                               "Con esta opcion podemos modificar o crear etiquetas (tags) de nuestros "
                               "mp3/ogg favoritos, tanto individual como de forma masiva siguiendo unos patrones.<p>"
                               "&iquest;Ejecutar etiquetado de mp3/ogg?")), QMessageBox::Ok, QMessageBox::No);
            }
            else
            {
                respuesta=QMessageBox::Ok;
            }
            if (respuesta == QMessageBox::Ok)
            {

                if (Window == 0)
                {
                    id3mp3 *mp3=new id3mp3(this);
                    if (Stilo == "A")
                        mp3->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                    CancionAnt = ActualRow;
                    disconnect(mediaObject, SIGNAL(currentSourceChanged(Phonon::MediaSource)), this, SLOT(sourceChanged(Phonon::MediaSource)));
                    disconnect(mediaObject, SIGNAL(aboutToFinish()), this, SLOT(siguiente()));
                    disconnect(mediaObject, SIGNAL(finished()), this, SLOT(final()));
                    mp3->Valor("",Logs,mediaObject,audioOutput,path,effect);
                    mp3->showMaximized();
                    mp3->exec();
                }
                else if (Window == 1)
                {
                    QMdiSubWindow *existing = buscarid3mp3();
                    if(!existing)
                    {
                        Conectar();
                        mp3=new id3mp3(this);
                        ui->tabWidget->insertTab(Pestanas,ui->tab_66,tr("Etiquetador"));
                        ui->tabWidget->setTabIcon(Pestanas,QIcon(":/Imagenes/etiqueta.png"));
                        ui->tabWidget->setCurrentPage(Pestanas);
                        Pagina20 = Pestanas;
                        ui->mdiArea_20->addSubWindow(mp3);
                        connect(mp3, SIGNAL(Cerrar()), this, SLOT(Cerrarid3mp3()));
                        if (Stilo == "A")
                            mp3->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                        mp3->showMaximized();
                        CancionAnt = ActualRow;
                        disconnect(mediaObject, SIGNAL(currentSourceChanged(Phonon::MediaSource)), this, SLOT(sourceChanged(Phonon::MediaSource)));
                        disconnect(mediaObject, SIGNAL(aboutToFinish()), this, SLOT(siguiente()));
                        disconnect(mediaObject, SIGNAL(finished()), this, SLOT(final()));
                        mp3->Valor("Quitar",Logs,mediaObject,audioOutput,path,effect);
                        mp3->exec();
                    }
                    else
                    {
                        ui->tabWidget->setCurrentPage(Pagina20);
                        ui->mdiArea_20->setActiveSubWindow(existing);
                    }
                    mp3->setWindowState(Qt::WindowMaximized);
                }
            }
        }
    }
}

void recoverdrake::hora()
{
    QDateTime time =QDateTime::currentDateTime();
    QString hora = time.toString("hh:mm:ss (dd-MM-yyyy)");
    ui->label_20->setText(hora);
}

void recoverdrake::Transcurso()
{
    QTime x(00,00,00);
    ui->timeEdit->setTime(x.addSecs(+(iTcrs)));
    iTcrs++;
}

void recoverdrake::on_actionSupervisar_red_privada_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Supervisar red privada wifi.");
    if (nmap == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"nmap\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        if (iptables == "0")
        {
            QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"iptables\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
            m.exec();
        }
        else
        {
            Refrescar();
            int respuesta = 0;
            if (Mensaka!="Activo")
            {
                respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Supervisar red wifi")),
                               QString::fromUtf8(tr("<center><b>Supervisar red wifi</b></center><p>"
                               "Con esta opcion podemos supervisar la red privada wifi y ver si hay "
                               "intrusos en ella, pudiendo bloquear o poner en lista blanca para que "
                               "no sen escaneadas.<p>"
                               "&iquest;Supervisar red wifi?")), QMessageBox::Ok, QMessageBox::No);
            }
            else
            {
                respuesta=QMessageBox::Ok;
            }
            if (respuesta == QMessageBox::Ok)
            {
                wifi *wifired=new wifi(this);
                if (Stilo == "A")
                    wifired->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                wifired->exec();
            }
            ui->progressBar->hide();
            ui->pushButton_2->hide();
            ui->label_13->hide();ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
        }
    }
}

void recoverdrake::on_actionActivar_control_parental_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Activar control parental.");
    if (Bloquear == 0)
    {
        Refrescar();
        QStringList comandos;
        QString cm ="echo Verificando linea...";
        QString cm1= "iwconfig %1";
        cm1 = cm1.arg(ipRoute);
        comandos<< cm << cm1;

        if (mib != 0)
            delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(ControlApagado(QString)));
        connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(AccesoEncendido()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
    }
    else
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("Ya tiene activado el control de acceso a Internet con una duracion de "+tiempo+" minutos.")));
        m.exec();
    }
    ui->progressBar->hide();
    ui->pushButton_2->hide();
    ui->label_13->hide();ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
}

void recoverdrake::AccesoEncendido()
{
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Activar control parental")),
                           QString::fromUtf8(tr("<center><b>Activar control parental</b></center><p>"

                           "Si queremos tener a nuestros \"nin@s\" controlados por el tiempo de "
                           "uso que tienen de Internet, solo tienes que activar esta opcion y los "
                           "tendras controlados y estaras tranquilo.<p>"

                           "&iquest;Activar control parental?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok)
    {
        if (ipRoute != "")
        {
            QFile file("/home/"+user+"/TempEth.txt");
            file.open(QIODevice::ReadOnly | QIODevice::Text);
            QTextStream eth(&file);
            Ethernet = eth.readAll();
            file.close();
            ListEthernet = Ethernet.split("\n");
            valEth = ""+ipRoute+"";
            for(int i=0;i<ListEthernet.count();i++)
            {
                QString verlo=QString::fromUtf8(ListEthernet.value(i));
                pos = verlo.indexOf(valEth, 0);
                if (pos != -1)
                {
                    Value0 = ListEthernet.at(i);
                    Value0 = Value0.remove(valEth);
                    Value0 = Value0.right(23).remove(".");
                }
            }
            system("rm -vf /home/"+user+"/TempEth.txt");
            if (Value0 == "no wireless extensions")
            {           
                if (ConectEthernet != "Sin definir")
                {
                        Bloquear = 1;
                        this->Actualizar();
                        ui->textEdit_2->setText(tr("<center><span style='font-size:12pt'><b>Alarmas activas"));
                        ui->checkBox_2->setEnabled(true);
                        ui->checkBox_2->setChecked(true);
                        ui->timeEdit_3->setEnabled(true);
                        ui->tabWidget_2->setCurrentPage(5);
                        crono = new QTimer(this);
                        connect(crono, SIGNAL(timeout()), this, SLOT(cronos()));
                        crono->start(1000);
                        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                        m.setText(tr(QString::fromUtf8("Se ha activado el control de acceso a Internet con una duracion de "+tiempo+" minutos.<p>Comienza a navegar antes del bloqueo.")));
                        m.exec();
                }
                else
                {
                        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");

                        m.setText(tr(QString::fromUtf8("No tienes definido la Conexion de tu red en las preferencias.<p>Es necesario para que pueda realizar esta opcion.<p>Se accedera a las preferencias para que puedas definirla.")));
                        m.exec();
                        opciones *opcion=new opciones(this);
                        if (Stilo == "A")
                            opcion->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                        opcion->exec();
                        this->Actualizar();
                }
            }
            else if (Value0 != "no wireless extensions")
            {
                if (Essid != "Sin definir")
                {
                    if (ConectWifi != "Sin definir")
                    {
                        Bloquear = 1;
                        ui->textEdit_2->setText(tr("<center><span style='font-size:12pt'><b>Alarmas activas"));
                        ui->checkBox->setEnabled(true);
                        ui->checkBox->setChecked(true);
                        ui->timeEdit_2->setEnabled(true);
                        ui->tabWidget_2->setCurrentPage(5);
                        crono = new QTimer(this);
                        this->Actualizar();
                        connect(crono, SIGNAL(timeout()), this, SLOT(cronos()));
                        crono->start(1000);
                        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                        m.setText(tr(QString::fromUtf8("Se ha activado el control de acceso a Internet con una duracion de "+tiempo+" minutos.<p>Comienza a navegar antes del bloqueo.")));
                        m.exec();
                    }
                    else
                    {
                        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                        m.setText(tr(QString::fromUtf8("No tienes definido el Essid o Conexion de tu red en las preferencias.<p>Son necesarias para que puedas realizar esta opcion.<p>Se accedera a las preferencias para que puedas definirlas.")));
                        m.exec();
                        opciones *opcion=new opciones(this);
                        if (Stilo == "A")
                            opcion->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                        opcion->exec();
                        this->Actualizar();
                    }
                }
                else
                {
                    QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                    m.setText(tr(QString::fromUtf8("No tienes definido el Essid o Conexion de tu red en las preferencias.<p>Son necesarias para que puedas realizar esta opcion.<p>Se accedera a las preferencias para que puedas definirlas.")));
                    m.exec();
                    opciones *opcion=new opciones(this);
                    if (Stilo == "A")
                        opcion->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                    opcion->exec();
                    this->Actualizar();
                }
            }
        }
        else if (ipRoute == "")
        {
            if ( TipoRed == "ETH")
            {
                if (ConectEthernet != "Sin definir")
                {
                    Bloquear = 1;
                    this->Actualizar();
                    ui->textEdit_2->setText(tr("<center><span style='font-size:12pt'><b>Alarmas activas"));
                    ui->checkBox_2->setEnabled(true);
                    ui->checkBox_2->setChecked(true);
                    ui->timeEdit_3->setEnabled(true);
                    ui->tabWidget_2->setCurrentPage(5);
                    crono = new QTimer(this);
                    connect(crono, SIGNAL(timeout()), this, SLOT(cronos()));
                    crono->start(1000);
                    QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                    m.setText(tr(QString::fromUtf8("Se ha activado el control de acceso a Internet con una duracion de "+tiempo+" minutos.<p>Comienza a navegar antes del bloqueo.")));
                    m.exec();
                }
                else
                {
                    QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                    m.setText(tr(QString::fromUtf8("No tienes definido la Conexion de tu red en las preferencias.<p>Es necesario para que pueda realizar esta opcion.<p>Se accedera a las preferencias para que puedas definirla.")));
                    m.exec();
                    opciones *opcion=new opciones(this);
                    if (Stilo == "A")
                        opcion->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                    opcion->exec();
                    this->Actualizar();
                }
            }
            else if ( TipoRed == "WIF")
            {
                if (Essid != "Sin definir")
                {
                    if (ConectWifi != "Sin definir")
                    {
                        Bloquear = 1;
                        ui->textEdit_2->setText(tr("<center><span style='font-size:12pt'><b>Alarmas activas"));
                        ui->checkBox->setEnabled(true);
                        ui->checkBox->setChecked(true);
                        ui->timeEdit_2->setEnabled(true);
                        ui->tabWidget_2->setCurrentPage(5);
                        crono = new QTimer(this);
                        this->Actualizar();
                        connect(crono, SIGNAL(timeout()), this, SLOT(cronos()));
                        crono->start(1000);
                        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                        m.setText(tr(QString::fromUtf8("Se ha activado el control de acceso a Internet con una duracion de "+tiempo+" minutos.<p>Comienza a navegar antes del bloqueo.")));
                        m.exec();
                    }
                    else
                    {
                        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                        m.setText(tr(QString::fromUtf8("No tienes definido el Essid o Conexion de tu red en las preferencias.<p>Son necesarias para que puedas realizar esta opcion.<p>Se accedera a las preferencias para que puedas definirlas.")));
                        m.exec();
                        opciones *opcion=new opciones(this);
                        if (Stilo == "A")
                            opcion->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                        opcion->exec();
                        this->Actualizar();
                    }
                }
                else
                {
                    QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                    m.setText(tr(QString::fromUtf8("No tienes definido el Essid o Conexion de tu red en las preferencias.<p>Son necesarias para que puedas realizar esta opcion.<p>Se accedera a las preferencias para que puedas definirlas.")));
                    m.exec();
                    opciones *opcion=new opciones(this);
                    if (Stilo == "A")
                        opcion->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                    opcion->exec();
                    this->Actualizar();
                }
            }
        }
    }
}

void recoverdrake::cronos()
{
    if (ip != "")
    {
        int contador = 60000 * tiempo.toInt();
        QTimer::singleShot(contador,this,SLOT(matar()));
        iCtrl = 1;
        Control = new QTimer(this);
        connect(Control, SIGNAL(timeout()), this, SLOT(Regresiva()));
        Control->start(1000);
        if (Bloquear == 1)
        {
            crono->stop();            
        }
    }
}

void recoverdrake::Regresiva()
{
    if (Bloquear == 1)
    {
        if (TipoRed == "ETH")
        {
            QTime n(Ta.toInt(), Tb.toInt(), Tc.toInt());
            ui->timeEdit_3->setTime(n.addSecs(-(iCtrl)));
            iCtrl++;
        }
        else if (TipoRed == "WIF")
        {
            QTime n(Ta.toInt(), Tb.toInt(), Tc.toInt());
            ui->timeEdit_2->setTime(n.addSecs(-(iCtrl)));
            iCtrl++;
        }
    }
    else if (Bloquear == 0)
    {
        Control->stop();
        iCtrl = 1;
        QTime n(00, 00, 00);
        if (TipoRed == "ETH")
        {
            ui->timeEdit_3->setTime(n);
            ui->checkBox_2->setEnabled(false);
            ui->checkBox_2->setChecked(false);
            ui->timeEdit_3->setEnabled(false);
            ui->tabWidget_2->setCurrentPage(0);
        }
        else if (TipoRed == "WIF")
        {
            ui->timeEdit_2->setTime(n);
            ui->checkBox->setEnabled(false);
            ui->checkBox->setChecked(false);
            ui->timeEdit_2->setEnabled(false);
            ui->tabWidget_2->setCurrentPage(0);
        }
        ui->textEdit_2->setText(tr("<center><span style='font-size:12pt'><b>Sin alarmas activas"));
        ui->tabWidget->setCurrentPage(pagina);
        ui->tabWidget_8->setCurrentPage(0);
        return;
    }
}

void recoverdrake::matar()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- <b><FONT COLOR=\"RED\">ATENCION: RED DE INTERNET BLOQUEADA (TIEMPO AGOTADO DE NAVEGACION).");
    if (Bloquear == 1)
    {
        system("ifdown "+ipRoute+"");
        trayIcon->showMessage("Control Parental activado","Red bloqueada...",QSystemTrayIcon::Information, 3000);
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("Se han terminado los "+tiempo+" minutos de Internet. Ya no tendra acceso a el si no desactiva el control parental.")));
        m.exec();
        Supervisar = new QTimer(this);
        connect(Supervisar, SIGNAL(timeout()), this, SLOT(comprobar()));
        Supervisar->start(300000);
    }
    else if (Bloquear == 0)
    {
        ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;
    }
}

void recoverdrake::comprobar()
{
    if (Bloquear == 0)
    {
        Supervisar->stop();
    }
    else if (Bloquear == 1)
    {
        drakeSistema drake;
        ip = drake.getIP();
        if (ip != "")
        {
            system("ifdown "+ipRoute+"");
            trayIcon->showMessage("Control Parental activado","Red bloqueada...",QSystemTrayIcon::Information, 3000);
        }
    }
}

void recoverdrake::on_actionSalir_triggered()
{
    ControlClose=1;
    float Volumen = audioOutput->volume();
    QSqlQuery Miscelanea(dbs);
    Miscelanea.exec("UPDATE Ecualizador SET Volume='"+QString::number(Volumen)+"' WHERE id=2");
    close();
}

void recoverdrake::on_actionDesactivar_control_parental_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Desactivar control parental.");
    if (Bloquear == 1)
    {
        Refrescar();
        QStringList comandos;
        QString cm ="echo Verificando linea...";
        QString cm1= "iwconfig %1";
        cm1 = cm1.arg(ipRoute);
        comandos<< cm << cm1;

        if (mib != 0)
            delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(ControlApagado(QString)));
        connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(AccesoApagado()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
    }
    else
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No tienes activado el control de acceso a Internet")));
        m.exec();
    }
}

void recoverdrake::ControlApagado(QString valor)
{
    ui->textEdit->append(valor);
    system(QString::fromUtf8("echo '"+valor+"' >> /home/'"+user+"'/TempEth.txt"));
}

void recoverdrake::AccesoApagado()
{
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Desactivar control parental")),
                           QString::fromUtf8(tr("<center><b>Desactivar control parental</b></center><p>"

                           "Si queremos navegar con internet sin ningun bloqueo de tiempo deberemos "
                           "desactivar el bloqueo.<p>"

                           "Con esta opcion realizamos dicho proposito.<p>"

                           "&iquest;Desactivar control parental?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok)
    {
        if (ipRoute != "")
        {
            this->Actualizar();
            QFile file("/home/"+user+"/TempEth.txt");
            file.open(QIODevice::ReadOnly | QIODevice::Text);
            QTextStream eth(&file);
            Ethernet = eth.readAll();
            file.close();
            ListEthernet = Ethernet.split("\n");
            valEth = ""+ipRoute+"";
            for(int i=0;i<ListEthernet.count();i++)
            {
                QString verlo=QString::fromUtf8(ListEthernet.value(i));
                pos = verlo.indexOf(valEth, 0);
                if (pos != -1)
                {
                    Value0 = ListEthernet.at(i);
                    Value0 = Value0.remove(valEth);
                    Value0 = Value0.right(23).remove(".");
                }
            }
            system("rm -vf /home/"+user+"/TempEth.txt");
            if (Value0 == "no wireless extensions")
            {
                if (ConectEthernet != "Sin definir")
                {
                    Desbloquear *pass=new Desbloquear(this);
                    if (Stilo == "A")
                        pass->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                    pass->exec();
                    DatoRev=pass->Resultado;
                    if (DatoRev == "1")
                    {
                        if (Bloquear == 1)
                        {
                               Bloquear = 0;
                               trayIconMenu->addAction(quitAction);
                               system("ifup "+ipRoute+"");
                               ui->checkBox_2->setEnabled(false);
                               ui->checkBox_2->setChecked(false);
                               ui->timeEdit_3->setEnabled(false);
                               ui->tabWidget_2->setCurrentPage(0);
                        }
                        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
                    }
                    else if(DatoRev == "0")
                    {
                        ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;
                    }
                }
                else
                {
                        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                        m.setText(tr(QString::fromUtf8("No tienes definido la Conexion de tu red en las preferencias.<p>Es necesario para que pueda realizar esta opcion.<p>Se accedera a las preferencias para que puedas definirla.")));
                        m.exec();
                        opciones *opcion=new opciones(this);
                        if (Stilo == "A")
                            opcion->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                        opcion->exec();
                        this->Actualizar();
                }
            }
            else if (Value0 != "no wireless extensions")
            {
                if (Essid != "Sin definir")
                {
                    if (ConectWifi != "Sin definir")
                    {
                        Desbloquear *pass=new Desbloquear(this);
                        if (Stilo == "A")
                            pass->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                        pass->exec();
                        DatoRev=pass->Resultado;
                        if (DatoRev == "1")
                        {
                            if (Bloquear == 1)
                            {
                                   Bloquear = 0;
                                   trayIconMenu->addAction(quitAction);
                                   system("ifconfig "+ConectWifi+" up");
                                   system("iwconfig "+ConectWifi+" essid "+Essid+"");
                                   ui->checkBox->setEnabled(false);
                                   ui->checkBox->setChecked(false);
                                   ui->timeEdit_2->setEnabled(false);
                                   ui->tabWidget_2->setCurrentPage(0);
                            }
                            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
                        }
                        else if(DatoRev == "0")
                        {
                            ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;
                        }
                    }
                    else
                    {
                        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                        m.setText(tr(QString::fromUtf8("No tienes definido el Essid o Conexion de tu red en las preferencias.<p>Son necesarias para que puedas realizar esta opcion.<p>Se accedera a las preferencias para que puedas definirlas.")));
                        m.exec();
                        opciones *opcion=new opciones(this);
                        if (Stilo == "A")
                            opcion->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                        opcion->exec();
                        this->Actualizar();
                    }
                }
                else
                {
                    QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                    m.setText(tr(QString::fromUtf8("No tienes definido el Essid o Conexion de tu red en las preferencias.<p>Son necesarias para que puedas realizar esta opcion.<p>Se accedera a las preferencias para que puedas definirlas.")));
                    m.exec();
                    opciones *opcion=new opciones(this);
                    if (Stilo == "A")
                        opcion->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                    opcion->exec();
                    this->Actualizar();
                }
            }
        else if (ipRoute == "")
        {
                if ( TipoRed == "ETH")
                {
                    if (ConectEthernet != "Sin definir")
                    {
                        Desbloquear *pass=new Desbloquear(this);
                        if (Stilo == "A")
                            pass->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                        pass->exec();
                        DatoRev=pass->Resultado;
                        if (DatoRev == "1")
                        {
                            if (Bloquear == 1)
                            {
                                   Bloquear = 0;
                                   trayIconMenu->addAction(quitAction);
                                   system("ifup "+ConectEthernet+"");
                                   ui->checkBox_2->setEnabled(false);
                                   ui->checkBox_2->setChecked(false);
                                   ui->timeEdit_3->setEnabled(false);
                                   ui->tabWidget_2->setCurrentPage(0);
                            }
                            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
                        }
                        else if(DatoRev == "0")
                        {
                            ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;
                        }
                    }
                    else
                    {
                        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                        m.setText(tr(QString::fromUtf8("No tienes definido la Conexion de tu red en las preferencias.<p>Es necesario para que pueda realizar esta opcion.<p>Se accedera a las preferencias para que puedas definirla.")));
                        m.exec();
                        opciones *opcion=new opciones(this);
                        if (Stilo == "A")
                            opcion->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                        opcion->exec();
                        this->Actualizar();
                    }
                }
                else if ( TipoRed == "WIF")
                {
                    if (Essid != "Sin definir")
                    {
                        if (ConectWifi != "Sin definir")
                        {
                            Desbloquear *pass=new Desbloquear(this);
                            if (Stilo == "A")
                                pass->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                            pass->exec();
                            DatoRev=pass->Resultado;
                            if (DatoRev == "1")
                            {
                                if (Bloquear == 1)
                                {
                                       Bloquear = 0;
                                       trayIconMenu->addAction(quitAction);
                                       system("ifconfig "+ConectWifi+" up");
                                       system("iwconfig "+ConectWifi+" essid "+Essid+"");
                                       ui->checkBox->setEnabled(false);
                                       ui->checkBox->setChecked(false);
                                       ui->timeEdit_2->setEnabled(false);
                                       ui->tabWidget_2->setCurrentPage(0);
                                }
                                else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
                            }
                            else if(DatoRev == "0")
                            {
                                ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;
                            }
                        }
                        else
                        {
                            QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                            m.setText(tr(QString::fromUtf8("No tienes definido el Essid o Conexion de tu red en las preferencias.<p>Son necesarias para que puedas realizar esta opcion.<p>Se accedera a las preferencias para que puedas definirlas.")));
                            m.exec();
                            opciones *opcion=new opciones(this);
                            if (Stilo == "A")
                                opcion->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                            opcion->exec();
                            this->Actualizar();
                        }
                    }
                    else
                    {
                        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                        m.setText(tr(QString::fromUtf8("No tienes definido el Essid o Conexion de tu red en las preferencias.<p>Son necesarias para que puedas realizar esta opcion.<p>Se accedera a las preferencias para que puedas definirlas.")));
                        m.exec();
                        opciones *opcion=new opciones(this);
                        if (Stilo == "A")
                            opcion->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                        opcion->exec();
                        this->Actualizar();
                    }
                }
            }
        }
    }
    else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::CtrlWifi()
{
    if (Bloquear == 0)
    {
        drakeSistema drake;
        ip = drake.getIP();
        if (ip == "")
        {
            if ( TipoRed == "ETH")
            {
                system("ifup "+ConectEthernet+"");
                trayIcon->showMessage("Control Ethernet","Levantando red...",QSystemTrayIcon::Information, 3000);
                QString hora = QTime::currentTime().toString("hh:mm:ss");
                ui->textEdit_4->append(""+hora+"-- Red levantada en Ethernet.");
            }
            else if ( TipoRed == "WIF")
            {
                system("ifconfig "+ConectWifi+" up");
                system("iwconfig "+ConectWifi+" essid "+Essid+"");
                trayIcon->showMessage("Control Wifi","Levantando red...",QSystemTrayIcon::Information, 3000);
                QString hora = QTime::currentTime().toString("hh:mm:ss");
                ui->textEdit_4->append(""+hora+"-- Red levantada en Wifi.");
            }
        }
        QString hora = QTime::currentTime().toString("hh:mm:ss");
        ui->textEdit_4->append(""+hora+"-- Linea de Internet correcta.");
    }
}

void recoverdrake::CtrlDolphin()
{
    drakeSistema drake;
    PosKill = drake.getKill();
    if (PosKill != "0")
    {
        Kill = drake.getKillAll();
        system("kill -9 "+Kill+"");
        QString hora = QTime::currentTime().toString("hh:mm:ss");
        ui->textEdit_4->append(""+hora+"-- Procesos Dolphin matados.");
    }
    else if (PosKill == "0")
    {
        QString hora = QTime::currentTime().toString("hh:mm:ss");
        ui->textEdit_4->append(""+hora+"-- Sin procesos Dolphin que matar. Todo correcto en la carga de memoria.");
    }
}

void recoverdrake::CtrlScreen()
{
    system("su - "+user+" -c \"qdbus org.freedesktop.ScreenSaver /ScreenSaver SimulateUserActivity\"");
}

void recoverdrake::CtrlCache()
{
    system("sync && sysctl vm.drop_caches=3");
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Proceso de liberado de memoria de Cache realizado.");
}

void recoverdrake::on_actionUtilizar_WebCam_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Activar webcam en Skype.");
    Refrescar();
    QStringList comandos;
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
       respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Activar webcam en Skype")),
                   QString::fromUtf8(tr("<center><b>Activar webcam en Skype</b></center><p>"

                   "Con esta utilidad podemos activar la webcam para poderla utilizar con "
                   "el fabuloso skype.<P>"

                   "<B>NOTA Debes esperar a que termine completamente el "
                   "proceso seleccionado, el cual te sera notificado "
                   "cuando finalice en la consola de procesos.</B><p>"

                   "&iquest;Activar webcam en Skype?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok)
    {
        QString cm =QString::fromUtf8(tr("echo Modificando fichero skype.desktop..."));
        QString cm1= "RecoverSkype";
        QString cm2 = "echo Datos introducidos en el fichero original.";
        comandos<< cm << cm1 << cm2;

        if (mib != 0)
            delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
        connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
    }
    else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionListar_logs_de_sucesos_triggered()
{    
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Lista logs de sucesos internos");
    Refrescar();
    if (kwrite == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"kwrite\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        QStringList comandos;
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
           respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Visualizar logs de sucesos")),
                       QString::fromUtf8(tr("<center><b>Visualizar logs de sucesos</b></center><p>"
                       "Con esta utilidad podemos ver los sucesos que se han ido realizando desde "
                       "la activacion de logs de procesos internos.<P>"
                       "<B>NOTA Debes esperar a que termine completamente el "
                       "proceso seleccionado, el cual te sera notificado "
                       "cuando finalice en la consola de procesos.</B><p>"
                       "&iquest;Visualizar logs de sucesos?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok)
        {
            drakeSistema drake;
            ls = drake.getLs();
            if (ls == "/usr/share/RecoverDrake/RecoverDrake.log")
            {
                QString cm =QString::fromUtf8(tr("echo Direccionando a fichero a visualizar..."));
                QString cm1= "su - %1 -c \"kwrite /home/%1/RecoverDrake.log\"";
                cm1 = cm1.arg(user);
                comandos<< cm << cm1;
                if (mib != 0)
                    delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
            }
            else
            {
                QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                m.setText(tr(QString::fromUtf8("No se puede acceder al fichero RecoverDrake.log.<p>Compruebe que tiene activa la opcion de Logs de sucesos.")));
                m.exec();
            }
        }
        else
        {
            ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
            return;
        }
    }
}

void recoverdrake::on_actionFallo_al_abrir_unidad_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Fallo de apertura de lectora CD/DVD");
    Refrescar();
    QStringList comandos;
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
       respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Fallo de apertura de lectora CD/DVD")),
                   QString::fromUtf8(tr("<center><b>Fallo de apertura de lectora CD/DVD</b></center><p>"

                   "Con esta utilidad podemos solucionar el problema que se ha verificado en "
                   "varias lectoras de CD/DVD, en el cual intentamos abrirla y antes de abrir "
                   "completamente, se vuelve a cerrar.<P>"

                   "<B>NOTA Debes esperar a que termine completamente el "
                   "proceso seleccionado, el cual te sera notificado "
                   "cuando finalice en la consola de procesos.</B><p>"

                   "&iquest;Corregir fallo de apertura de lectora?")), QMessageBox::Ok, QMessageBox::No);
     }
     else
     {
        respuesta=QMessageBox::Ok;
     }
     if (respuesta == QMessageBox::Ok)
     {
        QString cm =QString::fromUtf8(tr("echo Corrigiendo fallo de apertura..."));
        QString cm1= "RecoverDVD";
        QString cm2 =QString::fromUtf8(tr("echo Fallo de apertura corregido"));
        comandos<< cm << cm1 << cm2;

        if (mib != 0)
            delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
        connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
      }
      else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionQT_Linguist_no_encuentra_los_programas_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Corregir ruta de QT-Linguist");
    Refrescar();
    QStringList comandos;
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
       respuesta = QMessageBox::question(this, QString::fromUtf8(tr("QT-Linguist no se ejecuta fuera de su directorio")),
                   QString::fromUtf8(tr("<center><b>QT-Linguist no se ejecuta fuera de su directorio</b></center><p>"

                   "Al instalar QT-Linguist para traducir textos de codigo hecho en QT y C++ "
                   "nos puede pasar que al intentar crear los ficheros necesarios, previamente "
                   "activados en QT-Creator, por ejemplo, nos puede arrojar errores de que no "
                   "encuentra lconvert, lrelease, lupdate, necesarios para poder desarrollar el "
                   "fichero multi-lenguaje. Con esta utilidad corregimos dicho error.<P>"

                   "<B>NOTA Debes esperar a que termine completamente el "
                   "proceso seleccionado, el cual te sera notificado "
                   "cuando finalice en la consola de procesos.</B><p>"

                   "&iquest;Corregir fallo de QT-Linguist?")), QMessageBox::Ok, QMessageBox::No);
     }
     else
     {
        respuesta=QMessageBox::Ok;
     }
     if (respuesta == QMessageBox::Ok)
     {
        QString cm =QString::fromUtf8(tr("echo Corrigiendo fallos de enlaces a QT-Linguist..."));
        QString cm1,cm2,cm3;
        if (arqt == "x86_64")
        {
            cm1= "ln -s /usr/lib64/qt4/bin/lconvert /usr/bin/";
            cm2= "ln -s /usr/lib64/qt4/bin/lrelease /usr/bin/";
            cm3= "ln -s /usr/lib64/qt4/bin/lupdate /usr/bin/";
        }
        else
        {
            cm1= "ln -s /usr/lib/qt4/bin/lconvert /usr/bin/";
            cm2= "ln -s /usr/lib/qt4/bin/lrelease /usr/bin/";
            cm3= "ln -s /usr/lib/qt4/bin/lupdate /usr/bin/";
        }
        QString cm4 =QString::fromUtf8(tr("echo Fallos de enlaces corregidos"));
        comandos<< cm << cm1 << cm2 << cm3 << cm4;

        if (mib != 0)
            delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
        connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
      }
      else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionMantenimiento_de_rpm_s_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Mantentimiento de rpms capturados.");
    int respuesta = 0;
    if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Mantenimiento de rpms capturados")),
                           QString::fromUtf8(tr("<center><b>Mantenimiento de rpms capturados</b></center><p>"
                           "Con esta opcion podemos modificar, crear o eliminar del listado de rpms, paquetes conflictivos de "
                           "versiones anteriores o que no nos interese instalar, a la vez que puedes visualizar los que ya "
                           "tienes instalados.<p>"
                           "&iquest;Acceder al mantenimiento de rpms capturados?")), QMessageBox::Ok, QMessageBox::No);
        }
    else
        {
            respuesta=QMessageBox::Ok;
        }
    if (respuesta == QMessageBox::Ok)
    {
        if (Window == 0)
        {
            Mrpm *rpmSet=new Mrpm(this);
            if (Stilo == "A")
                rpmSet->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            rpmSet->Valor("",Logs);
            rpmSet->showMaximized();
            rpmSet->exec();
        }
        else if (Window == 1)
        {
            QMdiSubWindow *existing = buscarRpm();
            if(!existing)
            {
                Conectar();
                rpmSet = new Mrpm;
                ui->tabWidget->insertTab(Pestanas,ui->tab_62,tr("Generar/Recuperar rpms"));
                ui->tabWidget->setTabIcon(Pestanas,QIcon(":/Imagenes/System.png"));
                ui->tabWidget->setCurrentPage(Pestanas);
                Pagina16 = Pestanas;
                ui->mdiArea_16->addSubWindow(rpmSet);
                connect(rpmSet, SIGNAL(Cerrar()), this, SLOT(CerrarRpm()));
                if (Stilo == "A")
                    rpmSet->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                rpmSet->showMaximized();
                rpmSet->Valor("Quitar",Logs);
                rpmSet->exec();
            }
            else
            {
                ui->tabWidget->setCurrentPage(Pagina16);
                ui->mdiArea_16->setActiveSubWindow(existing);
            }
            rpmSet->setWindowState(Qt::WindowMaximized);
        }
    }
}

void recoverdrake::on_actionReiniciar_triggered()
{
    ControlClose=1;
    close();
    system("RecoverDrake");
}

void recoverdrake::on_actionActualizar_sistema_interactivo_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Actualizar sistema (interactivo).");
    int respuesta = 0;
    if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Actualizar sistema (interactivo)")),
                           QString::fromUtf8(tr("<center><b>Actualizar sistema (interactivo)</b></center><p>"

                           "Con esta opcion podemos insertar, quitar o eliminar del listado de actualizaciones, cualquier paquete "
                           "que queramos de los que nos muestra la actualizacion.<p>"

                           "&iquest;Acceder a la actualizacion interactiva?")), QMessageBox::Ok, QMessageBox::No);
        }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok)
    {
        if (Window == 0)
        {
            Update *Actualiza=new Update(this);
            if (Stilo == "A")
                Actualiza->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            Actualiza->showMaximized();
            Actualiza->exec();
        }
        else if (Window == 1)
        {
            QMdiSubWindow *existing = buscarActualiza();
            if(!existing)
            {
                Conectar();
                Actualiza = new Update;
                ui->tabWidget->insertTab(Pestanas,ui->tab_52,tr("Actualizar Sistema"));
                ui->tabWidget->setTabIcon(Pestanas,QIcon(":/Imagenes/luparpm.png"));
                ui->tabWidget->setCurrentPage(Pestanas);
                Pagina11 = Pestanas;
                ui->mdiArea_11->addSubWindow(Actualiza);
                connect(Actualiza, SIGNAL(Cerrar()), this, SLOT(CerrarActualiza()));
                if (Stilo == "A")
                    Actualiza->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                Actualiza->showMaximized();
                Actualiza->Valor("Quitar");
                Actualiza->exec();
            }
            else
            {
                ui->tabWidget->setCurrentPage(Pagina11);
                ui->mdiArea_11->setActiveSubWindow(existing);
            }
            Actualiza->setWindowState(Qt::WindowMaximized);
        }
    }
}

void recoverdrake::on_actionEliminiar_Recuperar_paquetes_huerfanos_interactivo_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Eliminar/Recuperar paquetes huerfanos (interactivo).");
    int respuesta = 0;
    if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Eliminar/Recuperar paquetes huerfanos (interactivo)")),
                           QString::fromUtf8(tr("<center><b>Eliminar/Recuperar paquetes huerfanos (interactivo)</b></center><p>"

                           "Con esta opcion podemos procesar los paquetes huerfanos que dice el sistema que no son necesarios "
                           "de manera interactiva, pudiendo elegir que quitar.<p>"

                           "NO se recomienda utilizarlo...BAJO TU RESPONSABILIDAD.<p>"

                           "&iquest;Acceder a mantenimiento de paquetes huerfanos interactivos?")), QMessageBox::Ok, QMessageBox::No);
        }
    else
        {
            respuesta=QMessageBox::Ok;
        }
    if (respuesta == QMessageBox::Ok)
    {
        if (Window == 0)
        {
            orphans *huerfanos=new orphans(this);
            if (Stilo == "A")
                huerfanos->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            huerfanos->showMaximized();
            huerfanos->exec();
        }
        else if (Window == 1)
        {
            QMdiSubWindow *existing = buscarHuerfanos();
            if(!existing)
            {
                Conectar();
                huerfanos = new orphans;
                ui->tabWidget->insertTab(Pestanas,ui->tab_61,tr("Huerfanos"));
                ui->tabWidget->setTabIcon(Pestanas,QIcon(":/Imagenes/huerfano.png"));
                ui->tabWidget->setCurrentPage(Pestanas);
                Pagina15 = Pestanas;
                ui->mdiArea_15->addSubWindow(huerfanos);
                connect(huerfanos, SIGNAL(Cerrar()), this, SLOT(CerrarHuerfanos()));
                if (Stilo == "A")
                    huerfanos->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                huerfanos->showMaximized();
                huerfanos->Valor("Quitar");
                huerfanos->exec();
            }
            else
            {
                ui->tabWidget->setCurrentPage(Pagina15);
                ui->mdiArea_15->setActiveSubWindow(existing);
            }
            huerfanos->setWindowState(Qt::WindowMaximized);
        }
    }
}

void recoverdrake::on_actionMantenimiento_de_rpm_s_instalados_Interactivo_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Mantenimiento de rpms instalados (interactivo).");
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Mantenimiento de paquetes instalados (interactivo)")),
                           QString::fromUtf8(tr("<center><b>Mantenimiento de paquetes instalados (interactivo)</b></center><p>"
                           "Con esta opcion podemos procesar los paquetes instalados en el sistema "
                           "de manera interactiva, pudiendo elegir cual desinstalar por orden cronologico.<p>"
                           "Util para que en el caso de inestabilidad, saber que instalaste ultimo.<p>"
                           "&iquest;Acceder a mantenimiento de paquetes instalados interactivos?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
       respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok)
    {
        if (Window == 0)
        {
            rpminst *Irpm=new rpminst(this);
            if (Stilo == "A")
                Irpm->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            Irpm->showMaximized();
            Irpm->Valor(0,"");
            Irpm->exec();
        }
        else if (Window == 1)
        {
            QMdiSubWindow *existing = buscarRpminst();
            if(!existing)
            {
                Conectar();
                Irpm = new rpminst;
                ui->tabWidget->insertTab(Pestanas,ui->tab_59,tr("Mantenimiento"));
                ui->tabWidget->setTabIcon(Pestanas,QIcon(":/Imagenes/rpm.png"));
                ui->tabWidget->setCurrentPage(Pestanas);
                Pagina13 = Pestanas;
                ui->mdiArea_13->addSubWindow(Irpm);
                connect(Irpm, SIGNAL(Cerrar()), this, SLOT(CerrarRpminst()));
                if (Stilo == "A")
                    Irpm->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                Irpm->showMaximized();
                Irpm->Valor(0,"Quitar");
                Irpm->exec();
            }
            else
            {
                ui->tabWidget->setCurrentPage(Pagina13);
                ui->mdiArea_13->setActiveSubWindow(existing);
            }
            Irpm->setWindowState(Qt::WindowMaximized);
        }
    }
}

void recoverdrake::on_actionTratamiento_de_Nucleos_Kernel_Interactivo_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Mantenimiento de nucleos/kernel instalados (interactivo).");
    int respuesta = 0;
    if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Mantenimiento de nucleos instalados (interactivo)")),
                           QString::fromUtf8(tr("<center><b>Mantenimiento de nucleos instalados (interactivo)</b></center><p>"
                           "Con esta opcion podemos procesar los nucleos/kernels instalados en el sistema "
                           "de manera interactiva, pudiendo elegir cual desinstalar por orden cronologico.<p>"
                           "Por motivos de seguridad siempre deben haber 2 nucleos como minimo... es por tu seguridad.<p>"
                           "&iquest;Acceder a mantenimiento de nucleos instalados interactivos?")), QMessageBox::Ok, QMessageBox::No);
        }
    else
        {
            respuesta=QMessageBox::Ok;
        }
    if (respuesta == QMessageBox::Ok)
    {
        if (Window == 0)
        {
            rpminst *Irpm=new rpminst(this);
            if (Stilo == "A")
                Irpm->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            Irpm->Valor(1,"");
            Irpm->showMaximized();
            Irpm->setWindowTitle("Mantenimiento de Nucleos");
            Irpm->exec();
        }
        else if (Window == 1)
        {
            QMdiSubWindow *existing = buscarKernel();
            if(!existing)
            {
                Conectar();
                Irpm = new rpminst;
                ui->tabWidget->insertTab(Pestanas,ui->tab_60,tr("Kernels"));
                ui->tabWidget->setTabIcon(Pestanas,QIcon(":/Imagenes/drakhard-mdk.png"));
                ui->tabWidget->setCurrentPage(Pestanas);
                Pagina14 = Pestanas;
                ui->mdiArea_14->addSubWindow(Irpm);
                connect(Irpm, SIGNAL(Cerrar()), this, SLOT(CerrarKernel()));
                if (Stilo == "A")
                    Irpm->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                Irpm->showMaximized();
                Irpm->Valor(1,"Quitar");
                Irpm->exec();
            }
            else
            {
                ui->tabWidget->setCurrentPage(Pagina14);
                ui->mdiArea_14->setActiveSubWindow(existing);
            }
            Irpm->setWindowState(Qt::WindowMaximized);
        }
    }
}

void recoverdrake::on_actionMantenimiento_de_repositorios_Interactivo_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Mantenimiento de repositorios (interactivo).");
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Mantenimiento de repositorios (interactivo)")),
                           QString::fromUtf8(tr("<center><b>Mantenimiento de repositorios (interactivo)</b></center><p>"
                           "Con esta opcion podemos procesar los repositorios "
                           "de manera interactiva, pudiendo elegir instalacion, activacion, desactivacion o eliminacion "
                           "de todos o cualquiera que queramos, por separado.<p>"
                           "&iquest;Acceder a mantenimiento de repositorios (interactivos)?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
            respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok)
    {
        if (Window == 0)
        {
            urpmi *urpminst=new urpmi(this);
            if (Stilo == "A")
                urpminst->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            urpminst->showMaximized();
            urpminst->exec();
        }
        else if (Window == 1)
        {
            QMdiSubWindow *existing = buscarUrpmi();
            if(!existing)
            {
                Conectar();
                urpminst = new urpmi;
                ui->tabWidget->insertTab(Pestanas,ui->tab_58,tr("Repositorios"));
                ui->tabWidget->setTabIcon(Pestanas,QIcon(":/Imagenes/repo.png"));
                ui->tabWidget->setCurrentPage(Pestanas);
                Pagina12 = Pestanas;
                ui->mdiArea_12->addSubWindow(urpminst);
                connect(urpminst, SIGNAL(Cerrar()), this, SLOT(CerrarUrpmi()));
                if (Stilo == "A")
                    urpminst->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                urpminst->showMaximized();
                urpminst->Valor("Quitar");
                urpminst->exec();
            }
            else
            {
                ui->tabWidget->setCurrentPage(Pagina12);
                ui->mdiArea_12->setActiveSubWindow(existing);
            }
            urpminst->setWindowState(Qt::WindowMaximized);
        }
    }
}

void recoverdrake::on_actionCrear_iconos_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Crear icono .ico");
    Refrescar();
    if (imagemagick == "0")
    {
       QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
       m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"imagemagick\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
       m.exec();
    }
    else
    {
       int respuesta = 0;
       QStringList fileNameOrigen;
       int i;
       QStringList comandos;
       QString ruta;
       if (Mensaka!="Activo")
       {
           respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Crear icono")),
                              QString::fromUtf8(tr("<center><b>Crear icono</b></center><p>"

                              "Creacion de icono de cualquier imagen con compatibilidad del "
                              "100%.<p>"

                              "Este proceso, puede tardar un tiempo, se paciente, "
                              "la espera lo merece.<p>"

                              "<B>NOTA: Debes esperar a que termine completamente el "
                              "proceso seleccionado, el cual te sera notificado "
                              "cuando finalice en la consola de procesos.</B><p>"

                              "&iquest;Crear icono?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok)
        {
                    QString path="/home/%1/";
                    path=path.arg(user);
                    fileNameOrigen = QFileDialog::getOpenFileNames(this,QString::fromUtf8(tr("Abrir archivo(s)")),
                                        path,trUtf8(tr("Todos los archivos (*.*)")));
                    if (fileNameOrigen.isEmpty())
                    {
                        ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
                        return;
                    }
                    for (i=0;i<fileNameOrigen.count();i++)
                    {
                        ruta=fileNameOrigen.value(i);
                        QString fileName=ruta.replace(" ", "\\ ").replace("&","\\&").replace("'","\\'").replace("(","\\(").replace(")","\\)").replace(".cbz","");
                        QString cm1=QString::fromUtf8(tr("echo Conversion de "+ruta+" en proceso, por favor espera a que termine..."));
                        QString cmd3= "su - %1 -c \"convert -colors 256 -sample 16x16 %2 %2.ico\"";
                        cmd3=cmd3.arg(user).arg(fileName);
                        QString cm2=QString::fromUtf8(tr("echo Conversion de "+ruta+" realizada."));
                        comandos << cm1 << cmd3 << cm2;
                    }
                    if (mib != 0)
                    delete mib;
                    mib = new DrakeProcesos(comandos, this);
                    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                    int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
        }
        else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
}

void recoverdrake::on_actionConversor_de_formatos_de_video_Interactivo_triggered()
{
        QString hora = QTime::currentTime().toString("hh:mm:ss");
        ui->textEdit_4->append(""+hora+"-- Accion: Conversor de Video (Interactivo)");
        ui->progressBar->hide();
        ui->pushButton_2->hide();
        ui->label_13->hide();ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
        int respuesta = 0;
        if (Mensaka!="Activo")
            {
                respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Conversor de video (interactivo)")),
                               QString::fromUtf8(tr("<center><b>Conversor de video (interactivo)</b></center><p>"
                               "Con esta opcion podemos convertir videos de cualquier tipo a cualquier tipo de salida "
                               "de manera interactiva, pudiendo elegir cuantos y haciendolo totalmente automatico "
                               "de todos o cualquiera que queramos, por separado.<p>"
                               "&iquest;Acceder a conversor de video (interactivo)?")), QMessageBox::Ok, QMessageBox::No);
            }
        else
            {
                respuesta=QMessageBox::Ok;
            }
        if (respuesta == QMessageBox::Ok)
            {
                if (Window == 0)
                {
                    Conversor *convert=new Conversor(this);
                    if (Stilo == "A")
                        convert->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                    convert->showMaximized();
                    CancionAnt = ActualRow;
                    disconnect(mediaObject, SIGNAL(currentSourceChanged(Phonon::MediaSource)), this, SLOT(sourceChanged(Phonon::MediaSource)));
                    disconnect(mediaObject, SIGNAL(aboutToFinish()), this, SLOT(siguiente()));
                    disconnect(mediaObject, SIGNAL(finished()), this, SLOT(final()));
                    convert->Valor("",mediaObject,audioOutput,path,effect);
                    convert->exec();
                }
                else if (Window == 1)
                {
                    QMdiSubWindow *existing = buscarConvVideo();
                    if(!existing)
                    {
                        Conectar();
                        convert = new Conversor;
                        ui->tabWidget->insertTab(Pestanas,ui->tab_34,tr("Conversor de Video"));
                        ui->tabWidget->setTabIcon(Pestanas,QIcon(":/Imagenes/multimedia.png"));
                        ui->tabWidget->setCurrentPage(Pestanas);
                        Pagina5 = Pestanas;
                        ui->mdiArea_5->addSubWindow(convert);
                        connect(convert, SIGNAL(Cerrar()), this, SLOT(CerrarConvert()));
                        if (Stilo == "A")
                            convert->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                        convert->showMaximized();
                        CancionAnt = ActualRow;
                        disconnect(mediaObject, SIGNAL(currentSourceChanged(Phonon::MediaSource)), this, SLOT(sourceChanged(Phonon::MediaSource)));
                        disconnect(mediaObject, SIGNAL(aboutToFinish()), this, SLOT(siguiente()));
                        disconnect(mediaObject, SIGNAL(finished()), this, SLOT(final()));
                        convert->Valor("Quitar",mediaObject,audioOutput,path,effect);
                        convert->exec();
                    }
                    else
                    {
                        ui->tabWidget->setCurrentPage(Pagina5);
                        ui->mdiArea_5->setActiveSubWindow(existing);;
                    }
                    convert->setWindowState(Qt::WindowMaximized);
                }
            }                
}

void recoverdrake::on_actionReproductor_de_Video_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Reproductor de Video");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Reproductor de Video")),
                           QString::fromUtf8(tr("<center><b>Reproductor de Video</b></center><p>"
                           "Como su nombre indica, es un reproductor de cualquier sistema de Video, "
                           "reproduciendo cualquier formato estandar.<p>"
                           "&iquest;Acceder a Reproductor de video?")), QMessageBox::Ok, QMessageBox::No);
        }
    else
        {
            respuesta=QMessageBox::Ok;
        }
    if (respuesta == QMessageBox::Ok)
        {
            Reproductor *Repro =new Reproductor(this);
            if (Stilo == "A")
                Repro->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            Repro->Valor(mediaObject,audioOutput,path,effect);
            Repro->show();
        }
    else
    {
        ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;
    }
    ui->progressBar->hide();
    ui->pushButton_2->hide();
    ui->label_13->hide();ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
}

void recoverdrake::on_actionEliminar_corrupcion_en_DB_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Eliminar corrupcion en DB rpm");
    Refrescar();
    int respuesta = 0;
    QStringList comandos;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Eliminar corrupcion en DB rpm")),
                       QString::fromUtf8(tr("<center><b>Eliminar corrupcion en DB rpm</b></center><p>"
                       "Puede que al intentar actualizar el equipo no te deje por un problema de corrupcion "
                       "de la base de datos de los rpms instalados y que no deja ni siquiera reconstruirla, por lo que "
                       "es necesario aplicar esta funcion para poder repararla.<p>"
                       "&iquest;Eliminar corrupcion en DB rpm?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
            respuesta=QMessageBox::Ok;
    if (respuesta == QMessageBox::Ok)
    {
       system("rm -vrf /var/lib/rpm/__db.0*");
       QString cm1=QString::fromUtf8(tr("echo Eliminando problema de corrupcion..."));
       QString cm3=QString::fromUtf8(tr("echo Problema eliminado."));
       QString cm4=QString::fromUtf8(tr("echo Reconstruyendo DB, puede demorarse un tiempo..."));
       QString cm5= "rpm --rebuilddb -vvv";
       QString cm6=QString::fromUtf8(tr("echo Reconstruccion de DB realizada."));
       comandos << cm1 << cm3 << cm4 << cm5 << cm6;
       if (mib != 0)
       delete mib;
       mib = new DrakeProcesos(comandos, this);
       connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
       connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
       connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
       int valor= comandos.count();
       mib->Valor(valor,0);
       mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro);
       mib->iniciarProceso();
    }
    else
    {
        ui->tabWidget->setCurrentPage(pagina);
        ui->tabWidget_8->setCurrentPage(0);
        return;
    }
}

void recoverdrake::on_actionInsertar_subtitulos_a_video_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Insertar subtitulos a Video");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Insertar subtitulos a Video")),
                           QString::fromUtf8(tr("<center><b>Insertar subtitulos a Video</b></center><p>"
                           "Con esta opción ponemos subtitulos a un video de forma permanente, como vulgarmente "
                           "se denomina incrustados y asi no tenemos que depender de ningun fichero externo tipo srt, por ejemplo.<p>"
                           "&iquest;Insertar subtitulos a Video?")), QMessageBox::Ok, QMessageBox::No);
        }
    else
        {
            respuesta=QMessageBox::Ok;
        }
    if (respuesta == QMessageBox::Ok)
        {
            Subtitulos *Sub =new Subtitulos(this);
            if (Stilo == "A")
                Sub->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            Sub->exec();
        }
    ui->progressBar->hide();
    ui->pushButton_2->hide();
    ui->label_13->hide();
    ui->tabWidget->setCurrentPage(pagina);
    ui->tabWidget_8->setCurrentPage(0);
    return;
}

void recoverdrake::cambiaFila(QModelIndex actual)
{
    if (actual.row() >= 0)
    {
        QString Tags;
        ActualRow=actual.row();
        QModelIndex index;
        index=ui->tableView->model()->index(ActualRow,0);
        this->id= index.data().toInt();
        index=ui->tableView->model()->index(ActualRow,1);
        Titulo=index.data().toString();
        index=ui->tableView->model()->index(ActualRow,2);
        Tags=index.data().toString();
        filaAudio=ActualRow+1;
        ui->tableView->scrollTo(index);
        ui->tableView->resizeRowsToContents();
        ui->tableView->resizeColumnsToContents();
        drakeSistema drake;
        QString mp3Title = drake.getMp3Title(Tags);
        QString mp3Artist = drake.getMp3Artist(Tags);
        QString mp3Album = drake.getMp3Album(Tags);
        QString mp3Year =  drake.getMp3Year(Tags);
        QString mp3Comment = drake.getMp3Comment(Tags);
        QString mp3Track = drake.getMp3Track(Tags);
        QString mp3Genre = drake.getMp3Genre(Tags);
        QStringList Title = mp3Title.split(":");
        mp3Title = Title.value(1);
        if (mp3Title.left(1) == " ")
            mp3Title = mp3Title.remove(0,1);
        QStringList Artist = mp3Artist.split(":");
        mp3Artist = Artist.value(1);
        if (mp3Artist.left(1) == " ")
            mp3Artist = mp3Artist.remove(0,1);
        QStringList Album = mp3Album.split(":");
        mp3Album = Album.value(1);
        if (mp3Album.left(1) == " ")
            mp3Album = mp3Album.remove(0,1);
        QStringList Year = mp3Year.split(":");
        mp3Year = Year.value(1);
        if (mp3Year.left(1) == " ")
            mp3Year = mp3Year.remove(0,1);
        QStringList Comment0 = mp3Comment.split("\n");
        QString Comentario = Comment0.value(0);
        QStringList Comment1 = Comentario.split(":");
        mp3Comment = Comment1.value(2);
        if (mp3Comment.left(1) == " ")
            mp3Comment = mp3Comment.remove(0,1);
        QStringList Tracks = mp3Track.split(":");
        mp3Track = Tracks.value(1);
        if (mp3Track.left(1) == " ")
            mp3Track = mp3Track.remove(0,1);
        QStringList Genero = mp3Genre.split(":");
        mp3Genre = Genero.value(1);
        if (mp3Genre.left(1) == " ")
            mp3Genre = mp3Genre.remove(0,1);
        mp3Genre.remove("(");
        mp3Genre.remove(")");
        ui->lineEdit_33->setText(Tags);
        ui->lineEdit_32->setText(QString::fromUtf8(mp3Title));
        ui->lineEdit_30->setText(QString::fromUtf8(mp3Artist));
        ui->lineEdit_31->setText(QString::fromUtf8(mp3Album));
        ui->lineEdit_34->setText(QString::fromUtf8(mp3Comment));
        ui->lineEdit_28->setText(QString::fromUtf8(mp3Year));
        int Totale = mp3Genre.size();
        if (Totale == 1)
            mp3Genre = "00"+mp3Genre+"";
        else if (Totale == 2)
            mp3Genre = "0"+mp3Genre+"";
        QSqlQuery Variable(dbs);
        Variable.exec("SELECT Genero FROM id3Genre");
        while(Variable.next())
        {
            QString valor;
            valor = Variable.value(0).toString();
            if (valor.contains(mp3Genre))
            {
                mp3Genre = valor;
                break;
            }
        }
        ui->comboBox_2->setCurrentIndex(ui->comboBox_2->findText(mp3Genre));
        QStringList Track;
        Track = mp3Track.split("/");
        QString PTrack = Track.value(0);
        QString TTrack = Track.value(1);
        ui->lineEdit_29->setText(QString::fromUtf8(PTrack));
        ui->lineEdit_27->setText(QString::fromUtf8(TTrack));        
    }
}

void recoverdrake::on_pushButton_3_clicked()
{
    QString path=tr("/home/%1/Documentos/");
    path=path.arg(user);
    listaArchivos=QFileDialog::getOpenFileNames
    (this,tr("Abrir Archivo"),path,
        "Todos los archivos (*.*)");
    if(listaArchivos.isEmpty() )
    {
        ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
        return;
    }   
    setUpdatesEnabled(false);
    QProgressDialog progress(tr("Insertando archivos... Espera por favor"), tr("Cancelar"), 0, listaArchivos.count(), this);    
    progress.show();
    int cantidad=1;
    for(i=0;i<listaArchivos.count();i++ )
    {
        qApp->processEvents();
        if (cantidad == 1)
        {
            dbs.transaction();
        }
        progress.setValue(i);
        if (progress.wasCanceled())
            break;
        QString rutaAbs;
        rutaAbs=listaArchivos.value(i);
        QFile file(rutaAbs);
        QString Value0 = (tr(QFileInfo(file).fileName()));
        QString Value1 = rutaAbs;
        QSqlQuery queryVal(dbs);
        queryVal.exec("SELECT Ruta FROM Musica WHERE Ruta='"+Value1+"'");
        queryVal.first();
        QString Valor=queryVal.value(0).toString();
        if (Value1 != Valor)
        {
            QSqlQuery queryValor(dbs);
            queryValor.prepare("INSERT INTO Musica (Nombre,Ruta)"
                               "VALUES (:Nombre, :Ruta)");
            queryValor.bindValue(":Nombre", Value0);
            queryValor.bindValue(":Ruta", Value1);
            queryValor.exec();
            Model1->select();
            ui->tableView->setModel(Model1);
        }
        Phonon::MediaSource source(Value1);
        sources.append(source);
        cantidad++;
        if (cantidad == 100)
        {
            cantidad=1;
            dbs.commit();
        }
    }
    progress.setValue(listaArchivos.count());
    dbs.commit();
    setUpdatesEnabled(true);
    ui->tableView->resizeRowsToContents();
    ui->tableView->resizeColumnsToContents();
}

void recoverdrake::on_pushButton_4_clicked()
{    
    if (ui->tableView->model()->rowCount() != 0)
    {
        int Posicion = ui->tableView->model()->rowCount();
        QSqlQuery Cancion(dbs);
        Cancion.exec("SELECT Posicion FROM Cancion WHERE id=1");
        Cancion.first();
        int cantidad=Cancion.value(0).toInt();
        if (cantidad < 0 || cantidad > Posicion)
        {
            mediaObject->setCurrentSource(sources[0]);
            ui->tableView->selectRow(0);
        }
        else
        {
            mediaObject->setCurrentSource(sources[cantidad-1]);
        }
        play();
    }
    else
    {
        QMessageBox m;
        if (Stilo == "A")
            m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr("No hay nada en la lista. Inserta algun fichero de musica."));
        m.exec();
        QSqlQuery Cancion(dbs);
        Cancion.exec("SELECT Posicion FROM Cancion WHERE id=1");
        Cancion.first();
        QSqlRecord record= Model2->record(0);
        record.setValue(0,1);
        record.setValue(1,0);
        Model2->setRecord(0,record);
        Model2->submitAll();
    }
}

void recoverdrake::play()
{    
    mediaObject->play();
    ui->pushButton_4->setEnabled(false);
    ui->pushButton_5->setEnabled(true);
    ui->pushButton_6->setEnabled(true);
    ui->pushButton_7->setEnabled(true);
    ui->pushButton_8->setEnabled(true);   
    ui->seekSlider->setMediaObject(mediaObject);
    ui->volumeSlider->setAudioOutput(audioOutput);
    timeSound->start(1000);
    this->oyendo();
}

int recoverdrake::randInt(int low, int high)
    {
        return qrand() % ((high + 1) - low) + low;
    }

void recoverdrake::siguiente()
{    
    int index;
    if (Ramdom == 1)
    {
        index = randInt(0,ui->tableView->model()->rowCount());
    }
    else if (Ramdom == 0)
    {
        index = sources.indexOf(mediaObject->currentSource()) + 1;
    }
    if (sources.size() > index)
    {
        mediaObject->stop();
        QTest::qWait(500);
        mediaObject->clearQueue();
        mediaObject->setCurrentSource(sources[index]);
        ui->tableView->selectRow(index);
        ui->lcdNumber_2->display("00:00:00");
        play();
    }    
}

void recoverdrake::oyendo()
{
    if (ActualRow >= 0)
    {
        QSqlRecord record= Model2->record(0);
        record.setValue(0,1);
        record.setValue(1,filaAudio);
        Model2->setRecord(0,record);
        Model2->submitAll();
        trayIcon->showMessage(tr("Escuchando..."),QString::fromUtf8(""+Titulo+""),QSystemTrayIcon::Information, 4000);
    }
}

void recoverdrake::final()
{
    mediaObject->clear();
    sources.clear();
    QString activo1;
    int index = sources.size();
    QSqlQuery Variable(dbs);
    Variable.exec("SELECT Ruta FROM Musica");
    while(Variable.next())
    {
        activo1 = Variable.value(0).toString();
        Phonon::MediaSource source(activo1);
        sources.append(source);
        mediaObject->setCurrentSource(sources.at(index));
    }
    play();
}

void recoverdrake::updateSound()
{
    quint64 time = mediaObject->currentTime();
    QTime displayTime((time / 3600000) % 60, (time / 60000) % 60, (time / 1000) % 60);
    ui->lcdNumber_2->display(displayTime.toString("hh:mm:ss"));
}

void recoverdrake::on_pushButton_6_clicked()
{
    bool wasPlaying = mediaObject->state() == Phonon::PausedState;
    if (wasPlaying)
    {
        mediaObject->play();
        ui->pushButton_6->setText(tr("Pausa"));
        ui->pushButton_4->setEnabled(false);
        ui->pushButton_5->setEnabled(true);
        ui->pushButton_6->setEnabled(true);
        ui->pushButton_7->setEnabled(true);
        ui->pushButton_8->setEnabled(true);
        trayIcon->showMessage(tr("Continuando... "),QString::fromUtf8(""+Titulo+""),QSystemTrayIcon::Information, 4000);
    }
    else
    {
        mediaObject->pause();
        ui->pushButton_6->setText(tr("Continuar"));
        ui->pushButton_4->setEnabled(false);
        ui->pushButton_5->setEnabled(false);
        ui->pushButton_6->setEnabled(true);
        ui->pushButton_7->setEnabled(false);
        ui->pushButton_8->setEnabled(false);
        trayIcon->showMessage(tr("Pausando... "),QString::fromUtf8(""+Titulo+""),QSystemTrayIcon::Information, 4000);
    }
}

void recoverdrake::on_pushButton_5_clicked()
{
    mediaObject->stop();
    ui->pushButton_4->setEnabled(true);
    ui->pushButton_5->setEnabled(false);
    ui->pushButton_6->setEnabled(false);
    timeSound->stop();
    ui->lcdNumber_2->display("00:00:00");
    if (ui->tableView->model()->rowCount() > 0)
    {
        QSqlRecord record= Model2->record(0);
        record.setValue(0,1);
        record.setValue(1,filaAudio);
        Model2->setRecord(0,record);
        Model2->submitAll();
        ui->label_31->setText(tr("Ultima cancion escuchada... ")+QString::number(filaAudio)+"");
        if (Parando == 1)
            trayIcon->showMessage(tr("Parado: "),QString::fromUtf8(""+Titulo+""),QSystemTrayIcon::Information, 4000);
    }
    else
        ui->label_31->setText(tr("La lista esta vacia."));
}

void recoverdrake::tableClicked()
{
    bool wasPlaying = mediaObject->state() == Phonon::PlayingState;
    mediaObject->stop();
    QTest::qWait(500);
    mediaObject->clearQueue();
    if (ActualRow >= sources.size())
    {
        ui->tabWidget->setCurrentPage(pagina);
        ui->tabWidget_8->setCurrentPage(0);
        return;
    }
    mediaObject->setCurrentSource(sources[ActualRow]);
    if (wasPlaying)
    {
        ui->tableView->selectRow(ActualRow);
        play();
    }
    else
    {
        Parando = 0;
        on_pushButton_5_clicked();
        Parando = 1;
    }
}

void recoverdrake::sourceChanged(const Phonon::MediaSource &source)
{
    ui->tableView->selectRow(sources.indexOf(source));
    ui->lcdNumber_2->display("00:00:00");
    QString Actual;
    Actual = QString::number(ActualRow+1);
    ui->label_31->setText(tr("Escuchando la cancion... ")+Actual+"");
}

void recoverdrake::on_pushButton_7_clicked()
{
    bool wasPlaying = mediaObject->state() == Phonon::PlayingState;
    int row;
    if (Ramdom == 1)
        row = randInt(ActualRow,ui->tableView->model()->rowCount());
    else if (Ramdom == 0)
        row = ActualRow+1;
    if (sources.size() > row)
    {
        mediaObject->stop();
        QTest::qWait(500);
        mediaObject->clearQueue();
        mediaObject->setCurrentSource(sources[row]);
        ui->tableView->selectRow(row);
        ui->lcdNumber_2->display("00:00:00");        
    }
    if (wasPlaying)
        play();
}

void recoverdrake::on_pushButton_8_clicked()
{
    bool wasPlaying = mediaObject->state() == Phonon::PlayingState;
    int row;
    if (Ramdom == 1)
        row = randInt(0,ActualRow);
    else if (Ramdom == 0)
        row = ActualRow-1;
    if (sources.size() > row)
    {
        if (row >= 0)
        {
            mediaObject->stop();
            QTest::qWait(500);
            mediaObject->clearQueue();
            mediaObject->setCurrentSource(sources[row]);
            ui->tableView->selectRow(row);
            ui->lcdNumber_2->display("00:00:00");            
        }
    }
    if (wasPlaying)
        play();
}

void recoverdrake::keyPressEvent( QKeyEvent* e )
{
  switch ( e->key() )
  {
  case Qt::Key_Delete:
        this->borrado();
        break;
     default:
        QMainWindow::keyPressEvent( e );
        break;
  }
}

void recoverdrake::borrado()
{
    int respuesta = 0;
    respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Borrado de lista de reproduccion")),
                QString::fromUtf8(tr("<center><b>Borrar cancion de la lista</b></center><p>"
                "&iquest;Quieres confirmar el borrado del registro seleccionado?")), QMessageBox::Ok, QMessageBox::No);
    if (respuesta == QMessageBox::Ok)
    {
        ui->tableView->model()->removeRow(ActualRow);
        mediaObject->stop();
        ui->pushButton_4->setEnabled(true);
        ui->pushButton_5->setEnabled(false);
        ui->pushButton_6->setEnabled(false);
        timeSound->stop();
        ui->lcdNumber_2->display("00:00:00");
    }
    return;
}

void recoverdrake::on_pushButton_16_clicked()
{
    if (Ramdom == 1)
    {
        Ramdom = 0;
        ui->pushButton_16->setText(tr("Random On"));
    }
    else
    {
        Ramdom = 1;
        ui->pushButton_16->setText(tr("Random Off"));
    }
}

void recoverdrake::on_pushButton_17_clicked()
{
    int respuesta = 0;
    respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Borrado de lista de reproduccion")),
                           QString::fromUtf8(tr("<center><b>Borrado de lista de reproduccion</b></center><p>"
                           "Se borrara toda la lista de favoritos.</B><p>"
                           "&iquest;Estas seguro de borrar la lista?")), QMessageBox::Ok, QMessageBox::No);
    if (respuesta == QMessageBox::Ok)
    {
        QSqlQuery query(dbs);
        query.exec("Delete from Musica");
        Model1->select();
        ui->tableView->setModel(Model1);
        QSqlQuery Cancion(dbs);
        Cancion.exec("SELECT Posicion FROM Cancion WHERE id=1");
        Cancion.first();
        QSqlRecord record= Model2->record(0);
        record.setValue(0,1);
        record.setValue(1,0);
        Model2->setRecord(0,record);
        Model2->submitAll();
    }
}

void recoverdrake::cambiaFilaRadio(QModelIndex actual)
{
    ActualRowRadio=actual.row();
    QModelIndex index;
    index=ui->tableView_3->model()->index(ActualRowRadio,0);
    this->id= index.data().toInt();
    index=ui->tableView_3->model()->index(ActualRowRadio,1);
    index=ui->tableView_3->model()->index(ActualRowRadio,2);
    index=ui->tableView_3->model()->index(ActualRowRadio,3);
    Emisora = index.data().toString();
    filaAudioRadio=ActualRowRadio+1;
    ui->tableView_3->resizeRowsToContents();
    ui->tableView_3->resizeColumnsToContents();
}

void recoverdrake::tableClickedRadio()
{
    mediaObject->stop();
    QTest::qWait(500);
    mediaObject->clear();
    ui->tableView->selectRow(ActualRowRadio);
    mediaObject->setCurrentSource(Emisora);
    this->Threading();
}

void recoverdrake::Threading()
{
    *future = QtConcurrent::run(this, &recoverdrake::playRadio);
    watcher->setFuture(*future);
    if ( future->isFinished())
    {}
    else
      future->cancel();
}

void recoverdrake::on_pushButton_27_clicked()
{
    bool ok, ok1, ok2;
    QString Nombre, Direccion, Categoria;
    Nombre = QInputDialog::getText(this, QString::fromUtf8(tr("Nombre de Emisora")),
    QString::fromUtf8(tr("Introduce el nombre de la emisora para identificala.<P> ")),
    QLineEdit::Normal,
    "",&ok);
    if (ok && !Nombre.isEmpty())
    {
        Categoria = QInputDialog::getText(this, QString::fromUtf8(tr("Clasificacion de Emisora")),
        QString::fromUtf8(tr("Introduce la categoria de la emisora para identificala.<P> "
                "Ejemplo:<p> "
                "Generalista, Hip Hop, Rock, Clasica, etc." )),
        QLineEdit::Normal,
        "Generalista",&ok2);
        if (ok2 && !Categoria.isEmpty())
        {
            Direccion = QInputDialog::getText(this, QString::fromUtf8(tr("Direccion Url de la emision")),
            QString::fromUtf8(tr("Introduce la direccion completa de la emisora.<P> ")),
            QLineEdit::Normal,
            "",&ok1);
            if (ok1 && !Direccion.isEmpty())
            {
                QSqlQuery queryVal(dbs);
                queryVal.exec("SELECT Url FROM Radio WHERE Url='"+Direccion+"'");
                queryVal.first();
                QString Valor=queryVal.value(0).toString();
                if (Direccion != Valor)
                {
                    QSqlQuery queryValor(dbs);
                    queryValor.prepare("INSERT INTO Radio (Estilo,Nombre,Url)"
                                       "VALUES (:Estilo, :Nombre, :Url)");
                    queryValor.bindValue(":Estilo", Categoria);
                    queryValor.bindValue(":Nombre", Nombre);
                    queryValor.bindValue(":Url", Direccion);
                    queryValor.exec();
                    Model3->select();
                    ui->tableView_3->setModel(Model3);
                }
            }
            else
            {
                QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                m.setText(tr("No has introducido la direccion del Internet de una emisora."));
                m.exec();
            }
        }
        else
        {
            QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr("Hay que poner la categoria para poder clasificar la emisora."));
            m.exec();
        }
    }
    else
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr("Tienes que poner algun nombre para poder grabar una emisora."));
        m.exec();
    }
    ui->tableView_3->resizeRowsToContents();
    ui->tableView_3->resizeColumnsToContents();
}

void recoverdrake::on_pushButton_20_clicked()
{
    int respuesta = 0;
    respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Borrado de lista de emisoras")),
                QString::fromUtf8(tr("<center><b>Borrar lista de emisoras</b></center><p>"
                "Vas a proceder al borrado completo de la lista de emisoras de radio, tanto "
                "las predefinidas, como las posteriores.<p>"
                "&iquest;Borrar lista?")), QMessageBox::Ok, QMessageBox::No);
    if (respuesta == QMessageBox::Ok)
    {
        int Borrado, x, Total, Parcial;
        Parcial=0;
        Borrado = ui->tableView_3->model()->rowCount();
        Total=Borrado;
        setUpdatesEnabled(false);
        QProgressDialog progress("Borrando lista... Espera por favor", "Cancelar", 0, Total, this);
        progress.show();
        for(x=0;x<Borrado;x++)
        {
            Parcial = Parcial+1;
            progress.setValue(Parcial);
            if (progress.wasCanceled())
                break;
            ui->tableView_3->model()->removeRow(x);
            x=x-1;
            Borrado=Borrado-1;
        }
        progress.setValue(Total);
        setUpdatesEnabled(true);
        QSqlQuery Cancion(dbs);
        Cancion.exec("SELECT Posicion FROM PosRadio WHERE id=1");
        Cancion.first();
        QSqlRecord record= Model4->record(0);
        record.setValue(0,1);
        record.setValue(1,0);
        Model4->setRecord(0,record);
        Model4->submitAll();
    }
}

void recoverdrake::on_pushButton_24_clicked()
{
    if (ui->tableView_3->model()->rowCount() != 0)
    {
        mediaObject->clear();
        QSqlQuery Cancion(dbs);
        Cancion.exec("SELECT Posicion FROM PosRadio WHERE id=1");
        Cancion.first();
        int cantidad=Cancion.value(0).toInt();
        ui->tableView_3->selectRow(cantidad-1);
        mediaObject->setCurrentSource(Emisora);
        this->Threading();
    }
    else
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr("No hay nada en la lista de emisoras. Inserta alguna direccion de radio por Internet."));
        m.exec();
        QSqlQuery Cancion(dbs);
        Cancion.exec("SELECT Posicion FROM PosRadio WHERE id=1");
        Cancion.first();
        QSqlRecord record= Model4->record(0);
        record.setValue(0,1);
        record.setValue(1,0);
        Model4->setRecord(0,record);
        Model4->submitAll();
    }
}

void recoverdrake::playRadio()
{    
    QSqlRecord record= Model4->record(0);
    record.setValue(0,1);
    record.setValue(1,filaAudioRadio);
    Model4->setRecord(0,record);
    Model4->submitAll();
    mediaObject->play();
    ui->pushButton_24->setEnabled(false);
    ui->pushButton_22->setEnabled(true);
    ui->pushButton_23->setEnabled(true);
    ui->pushButton_21->setEnabled(true);
    ui->pushButton_25->setEnabled(true);
    ui->volumeSlider_3->setAudioOutput(audioOutput);
    ui->volumeSlider_3->setSizePolicy(QSizePolicy::Maximum, QSizePolicy::Maximum);
}

void recoverdrake::on_pushButton_23_clicked()
{
    mediaObject->stop();
    ui->pushButton_24->setEnabled(true);
    ui->pushButton_22->setEnabled(false);
    ui->pushButton_23->setEnabled(false);
    ui->pushButton_21->setEnabled(false);
    ui->pushButton_25->setEnabled(false);
}

void recoverdrake::on_pushButton_21_clicked()
{
    bool wasPlaying = mediaObject->state() == Phonon::PausedState;
    if (wasPlaying)
    {
        mediaObject->play();
        ui->pushButton_24->setEnabled(false);
        ui->pushButton_22->setEnabled(true);
        ui->pushButton_23->setEnabled(true);
        ui->pushButton_21->setEnabled(true);
        ui->pushButton_25->setEnabled(true);
    }
    else
    {
        mediaObject->pause();
        ui->pushButton_24->setEnabled(true);
        ui->pushButton_22->setEnabled(true);
        ui->pushButton_23->setEnabled(true);
        ui->pushButton_21->setEnabled(true);
        ui->pushButton_25->setEnabled(true);
    }
}

void recoverdrake::on_pushButton_25_clicked()
{
    int row;
    row = ActualRowRadio-1;
    if (row >= 0)
    {
       mediaObject->stop();
       QTest::qWait(500);
       mediaObject->clear();
       ui->tableView_3->selectRow(row);
       mediaObject->setCurrentSource(Emisora);
       QSqlQuery Cancion(dbs);
       Cancion.exec("SELECT Posicion FROM PosRadio WHERE id=1");
       Cancion.first();
       QSqlRecord record= Model4->record(0);
       record.setValue(0,1);
       record.setValue(1,row);
       Model4->setRecord(0,record);
       Model4->submitAll();
       this->Threading();
    }
}

void recoverdrake::on_pushButton_22_clicked()
{
    int row;
    row = ActualRowRadio+1;
    if (row >= 0)
    {
       mediaObject->stop();
       QTest::qWait(500);
       mediaObject->clear();
       ui->tableView_3->selectRow(row);
       mediaObject->setCurrentSource(Emisora);
       QSqlQuery Cancion(dbs);
       Cancion.exec("SELECT Posicion FROM PosRadio WHERE id=1");
       Cancion.first();
       QSqlRecord record= Model4->record(0);
       record.setValue(0,1);
       record.setValue(1,row);
       Model4->setRecord(0,record);
       Model4->submitAll();
       this->Threading();
    }
}

void recoverdrake::on_pushButton_28_clicked()
{
    int iFilas;
    iFilas=ActualRowRadio;
    if (iFilas == -1)
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr("No has seleccionado ningun registro, por lo que no puedes procesar la solicitud."));
        m.exec();
        ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
        return;
    }
    else
    {
        int respuesta = 0;
        {
            respuesta = QMessageBox::question(0,QString::fromUtf8("Confirmar borrado"),
                               QString::fromUtf8("<center><b>Confirma el borrado de emision</b></center><p>"
                               "Debes estar seguro de querer borrar una emisora predefinida, ya que no podras escucharla mas "
                               "salvo que recupereres una copia de seguridad o la introduzcas de nuevo.<p>"
                               "&iquest;Borrar emisora seleccionada?"), QMessageBox::Ok, QMessageBox::No);
        }
        if (respuesta == QMessageBox::Ok)
        {
            ui->tableView_3->model()->removeRow(ActualRowRadio);
        }
        else
            return;
    }
}

void recoverdrake::on_actionTelevision_por_Internet_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Television por Internet");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Television por Internet")),
                           QString::fromUtf8(tr("<center><b>Television por Internet</b></center><p>"
                           "Con esta opción podemos visualizar canales que emiten por Internet.<p>"
                           "&iquest;Visualizar Television por Internet?")), QMessageBox::Ok, QMessageBox::No);
        }
    else
        {
            respuesta=QMessageBox::Ok;
        }
    if (respuesta == QMessageBox::Ok)
        {
            Televideo *Tele =new Televideo(this);
            if (Stilo == "A")
                Tele->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            Tele->Valor(mediaObject,audioOutput,path,effect);
            Tele->show();
        }
    else
    {
        ui->progressBar->hide();
        ui->pushButton_2->hide();
        ui->label_13->hide();
        ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;
    }
    ui->progressBar->hide();
    ui->pushButton_2->hide();
    ui->label_13->hide();ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
}

void recoverdrake::on_actionPantalla_negra_al_utilizar_motor_Phonon_en_reproductores_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Pantalla negra con motor Phonon en Reproductores");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Pantalla negra con mortor Phonon en Reproductores")),
                           QString::fromUtf8(tr("<center><b>Pantalla negra con mortor Phonon en Reproductores</b></center><p>"
                           "Se ha observado que teniendo instalado el dock de cairo por un problema no resuelto "
                           "de gl todos los reproductores que utilizan Phonon se ve la pantalla de video en color negro "
                           "no pudiendo visionarse la imagen, por lo que hay que desinstalar cairo y reiniciar las X para "
                           "corregir dicho error.<p>"
                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"
                           "&iquest;Corregir problema de Phonon?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cm= QString::fromUtf8(tr("echo Corregiendo el problema de Phonon..."));
            QString cmd1 = "urpme --auto cairo-dock";
            QStringList comandos;
            comandos<< cm << cmd1;
            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
            connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionConversor_de_formatos_de_Audio_Interactivo_triggered()
{
        QString hora = QTime::currentTime().toString("hh:mm:ss");
        ui->textEdit_4->append(""+hora+"-- Accion: Conversor de Audio (Interactivo)");
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Conversor de audio (Interactivo)")),
                        QString::fromUtf8(tr("<center><b>Conversor de audio (Interactivo)</b></center><p>"
                        "Con esta opcion podemos convertir audios de cualquier tipo a cualquier tipo de salida "
                        "de manera interactiva, pudiendo elegir cuantos y haciendolo totalmente automatico "
                        "de todos o cualquiera que queramos, por separado.<p>"
                        "&iquest;Acceder a conversor de audio (interactivo)?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok)
        {
            if (Window == 0)
            {
                ConvAudio *convAudio =new ConvAudio(this);
                if (Stilo == "A")
                    convAudio->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                convAudio->showMaximized();
                CancionAnt = ActualRow;
                disconnect(mediaObject, SIGNAL(currentSourceChanged(Phonon::MediaSource)), this, SLOT(sourceChanged(Phonon::MediaSource)));
                disconnect(mediaObject, SIGNAL(aboutToFinish()), this, SLOT(siguiente()));
                disconnect(mediaObject, SIGNAL(finished()), this, SLOT(final()));
                convAudio->Valor("",mediaObject,audioOutput,path,effect);
                convAudio->exec();
            }
            else if (Window == 1)
            {
                QMdiSubWindow *existing = buscarConvAudio();
                if(!existing)
                {
                    Conectar();
                    convAudio = new ConvAudio;
                    ui->tabWidget->insertTab(Pestanas,ui->tab_33,tr("Conversor de Audio"));
                    ui->tabWidget->setTabIcon(Pestanas,QIcon(":/Imagenes/audio.png"));
                    ui->tabWidget->setCurrentPage(Pestanas);
                    Pagina4 = Pestanas;
                    ui->mdiArea_4->addSubWindow(convAudio);
                    connect(convAudio, SIGNAL(Cerrar()), this, SLOT(CerrarConvAudio()));
                    if (Stilo == "A")
                        convAudio->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                    convAudio->showMaximized();
                    CancionAnt = ActualRow;
                    disconnect(mediaObject, SIGNAL(currentSourceChanged(Phonon::MediaSource)), this, SLOT(sourceChanged(Phonon::MediaSource)));
                    disconnect(mediaObject, SIGNAL(aboutToFinish()), this, SLOT(siguiente()));
                    disconnect(mediaObject, SIGNAL(finished()), this, SLOT(final()));
                    convAudio->Valor("Quitar",mediaObject,audioOutput,path,effect);
                    convAudio->exec();
                }
                else
                {
                    ui->tabWidget->setCurrentPage(Pagina4);
                    ui->mdiArea_4->setActiveSubWindow(existing);
                }
                convAudio->setWindowState(Qt::WindowMaximized);
            }
        }
}

void recoverdrake::on_actionBase_de_datos_por_defecto_RecoverDrake_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Base de datos interna de RecoverDrake por defecto");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Base de datos interna por defecto")),
                           QString::fromUtf8(tr("<center><b>Base de datos interna por defecto</b></center><p>"

                           "Mediante esta opcion se reconstruira la base de datos interna de RecoverDrake, por lo "
                           "que se perderan todos los datos de listas que se hayan creado, usuarios y configuraciones personales.<p>"

                           "Se creara una copia de seguridad de su fichero de configuraciones y listas en la ruta...<p>"
                           "/usr/share/RecoverDrake/Miscelanea.RecoverDrake.db.sqlite.backup<p>"
                           "Si quieres volver a su estado original solo tienes que renombrarla, quitando el .backup final.<p>"

                           "<B>Procede con precaucion.</B><p>"

                           "&iquest;Reconstruir base de datos interna?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok){

            QString cm= QString::fromUtf8(tr("echo Reconstruccion en progreso..."));
            QString cm1 = QString::fromUtf8(tr("echo Creando copia de seguridad..."));
            QString cmd1 = "cp -v /usr/share/RecoverDrake/Miscelanea.RecoverDrake.db.sqlite /usr/share/RecoverDrake/Miscelanea.RecoverDrake.db.sqlite.backup";
            QString cmd2 = "cp -v /root/Miscelanea.RecoverDrake.db.sqlite /usr/share/RecoverDrake/Miscelanea.RecoverDrake.db.sqlite";
            QString cmd3 = QString::fromUtf8(tr("echo Base de datos reconstruida."));
            QStringList comandos;
            comandos<< cm << cm1 << cmd1 << cmd2 << cmd3;
            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
            connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();}
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionGenerar_Ficheros_Multi_Idioma_triggered()
{
    QString libqt, Valor;
    if (arqt == "x86_64")
    {
        libqt = getRpm("lib64qt4-devel");
        Valor = "lib64qt4-devel";
    }
    else
    {
        libqt = getRpm("libqt4-devel");
        Valor = "libqt4-devel";
    }
    if (libqt.contains(tr("instalado")) || libqt.contains("installed") || libqt.contains("instalado"))
    {
        QMessageBox m;
        if (Stilo == "A")
            m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \""+Valor+"\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        pagina = ui->tabWidget->currentPageIndex();
        ui->tabWidget->setCurrentPage(0);
        ui->tabWidget_8->setCurrentPage(1);
        ui->progressBar->show();
        ui->pushButton_2->show();
        ui->label_13->show();
        ui->pushButton->setEnabled(true);
        QString hora = QTime::currentTime().toString("hh:mm:ss");
        ui->textEdit_4->append(""+hora+"-- Accion: Generar ficheros Multi-idioma QT.");
        QString path="/home/%1/";
        path=path.arg(user);
        QString Archivo=QFileDialog::getOpenFileName
         (this,tr("Buscar archivo de proyecto"),path,
         tr("Archivo de proyecto (*.pro)"));
        if (Archivo.isEmpty())
        {
            ui->tabWidget->setCurrentPage(pagina);
            ui->tabWidget_8->setCurrentPage(0);
            return;
        }
        QString cmd1 = "lupdate /%1";
        cmd1 = cmd1.arg(Archivo);
        QStringList comandos;
        comandos<< cmd1;
        if (mib != 0)
            delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
        connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFinal()));
        int valor= comandos.count();
        mib->Valor(valor,3);
        mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro);
        mib->iniciarProceso();
    }
}

void recoverdrake::on_actionAcceder_a_la_traduccion_QT_Linguist_triggered()
{
    QString qt4linguist = getRpm("qt4-linguist");
    if (qt4linguist.contains(tr("instalado")) || qt4linguist.contains("installed") || qt4linguist.contains("instalado"))
    {
        QMessageBox m;
        if (Stilo == "A")
            m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"qt4-linguist\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        QString hora = QTime::currentTime().toString("hh:mm:ss");
        ui->textEdit_4->append(""+hora+"-- Accion: Acceso a QT-Linguist.");
        QString path="/home/%1/";
        path=path.arg(user);
        QString Archivo=QFileDialog::getOpenFileName
         (this,tr("Buscar archivo de traduccion"),path,
            tr("Archivo de traduccion (*.ts)"));
        if(Archivo.isEmpty() )
        {
            ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
            return;
        }
        QString cmd1 = "linguist %1";
        cmd1 = cmd1.arg(Archivo);
        QStringList comandos;
        comandos<< cmd1;
        if (mib != 0)
            delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
        connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFinal()));
        int valor= comandos.count();
        mib->Valor(valor,3);
        mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro);
        mib->iniciarProceso();
    }
}

void recoverdrake::on_pushButton_9_clicked()
{
    if (ui->groupBox_4->isHidden())
    {
        ui->groupBox_4->show();
        ui->pushButton_9->setText(tr("Ocultar \"Caracteristicas especificas de tu sistema GNU/Linux\""));
        RX = 1;
    }
    else
    {
        ui->groupBox_4->hide();
        ui->pushButton_9->setText(tr("Mostrar \"Caracteristicas especificas de tu sistema GNU/Linux\""));
        RX = 0;
    }
}

void recoverdrake::on_pushButton_10_clicked()
{
    if (ui->webView->isHidden())
    {
        if (ip == "")
        {
            QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr("No se puede acceder al traductor de Google sin conexión a Internet."));
            m.exec();
            ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;
        }
        else
        {
            ui->webView->show();
            ui->webView->load(QUrl("http://translate.google.es/"));
            ui->textEdit->hide();
            ui->pushButton_49->hide();            
            ui->pushButton_10->setText(tr("Desactivar Traductor Google"));
            ui->groupBox_20->hide();
        }
    }
    else
    {
        ui->webView->hide();
        ui->textEdit->show();
        ui->pushButton_49->show();        
        ui->pushButton_10->setText(tr("Activar Traductor Google"));
        ui->groupBox_20->show();
    }
}

void recoverdrake::on_pushButton_11_clicked()
{
    if (ui->tableView->isColumnHidden(2))
    {
        ui->tableView->setColumnHidden(2, false);
        ui->pushButton_11->setText(tr("Ocultar ruta"));
    }
    else
    {
        ui->tableView->setColumnHidden(2, true);
        ui->pushButton_11->setText(tr("Mostrar ruta"));
    }
    ui->tableView->resizeColumnsToContents();
    ui->tableView->resizeRowsToContents();    
}

void recoverdrake::on_pushButton_12_clicked()
{
    QString cmd1 = "rpmdrake";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_13_clicked()
{
    QString cmd1;
    if (Distro == "Mageia")
    {
        cmd1 = "MageiaUpdate";
    }
    else
    {
        cmd1 = "MandrivaUpdate";
    }
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_14_clicked()
{
    QString cmd1;
    if (Distro == "Mageia")
    {
        cmd1 = "mgaapplet-config";
    }
    else
    {
        cmd1 = "mdkapplet-config";
    }
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_15_clicked()
{
    QString cmd1 = "edit-urpm-sources.pl";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_18_clicked()
{
    QString cmd1 = "drakwizard proftpd";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_19_clicked()
{
    QString cmd1 = "drakwizard apache2";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_26_clicked()
{
    QString cmd1 = "drakwizard dhcp";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_30_clicked()
{
    QString cmd1 = "drakwizard bind";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_31_clicked()
{
    QString cmd1 = "drakwizard squid";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_29_clicked()
{
    QString cmd1 = "drakwizard ntp";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_32_clicked()
{
    QString cmd1 = "drakwizard sshd";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_33_clicked()
{
    QString cmd1 = "harddrake2";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_34_clicked()
{
    QString cmd1 = "draksound";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_37_clicked()
{
    QString cmd1 = "drak3d";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_35_clicked()
{
    QString cmd1 = "XFdrake";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_40_clicked()
{
    QString cmd1 = "keyboarddrake";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_36_clicked()
{
    QString cmd1 = "mousedrake";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_38_clicked()
{
    QString cmd1 = "system-config-printer";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_39_clicked()
{
    QString cmd1 = "scannerdrake";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_41_clicked()
{
    QString cmd1 = "drakups";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_44_clicked()
{
    QString cmd1 = "draknetcenter";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_42_clicked()
{
    QString cmd1 = "drakconnect";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_43_clicked()
{
    QString cmd1 = "drakconnect --del";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_45_clicked()
{
    QString cmd1 = "drakproxy";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_46_clicked()
{
    QString cmd1 = "drakgw";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_47_clicked()
{
    QString cmd1 = "draknetprofile";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_48_clicked()
{
    QString cmd1 = "drakvpn";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_76_clicked()
{
    QString cmd1 = "drakhosts";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_77_clicked()
{
    QString cmd1 = "drakauth";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_78_clicked()
{
    QString cmd1 = "drakxservices";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_79_clicked()
{
    QString cmd1 = "drakfont";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_80_clicked()
{
    QString cmd1 = "clock.pl";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_81_clicked()
{
    QString cmd1 = "localedrake";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_84_clicked()
{
    QString cmd1 = "logdrake";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_86_clicked()
{
    QString cmd1 = "drakconsole";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_83_clicked()
{
    QString cmd1 = "userdrake";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_85_clicked()
{
    QString cmd1 = "transfugdrake";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_82_clicked()
{
    QString cmd1 = "draksnapshot-config";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_89_clicked()
{
    QString cmd1 = "diskdrake --smb";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_87_clicked()
{
    QString cmd1 = "draksambashare";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_88_clicked()
{
    QString cmd1 = "diskdrake --nfs";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_90_clicked()
{
    QString cmd1 = "draknfs";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_91_clicked()
{
    QString cmd1 = "diskdrake --dav";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_92_clicked()
{
    QString cmd1 = "diskdrake";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_95_clicked()
{
    QString cmd1 = "diskdrake --removable";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_94_clicked()
{
    QString cmd1 = "diskdrake --fileshare";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_93_clicked()
{
    QString cmd1 = "msecgui";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_97_clicked()
{
    QString cmd1 = "drakfirewall";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_96_clicked()
{
    QString cmd1 = "draksec";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_99_clicked()
{
    QString cmd1 = "drakinvictus";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_98_clicked()
{
    QString cmd1 = "drakguard";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_100_clicked()
{
    QString cmd1 = "drakboot";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_102_clicked()
{
    QString cmd1 = "drakboot --boot";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_101_clicked()
{
    QString cmd1 = "drakedm";
    QStringList comandos;
    comandos<< cmd1;
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
    connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::on_pushButton_49_clicked()
{
    if (Chat == 0)
    {
        irc=irc+1;
        if (ui->webView->isHidden())
        {
            if (ip == "")
            {
                QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                m.setText(tr("No se puede acceder al irc de Blogdrake sin conexión a Internet."));
                m.exec();
                ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;
            }
            else
            {
                if (irc == 1)
                {
                    ui->webView->load(QUrl("http://blogdrake.net/cgi-bin/ircbd/irc.cgi"));
                    ui->webView->show();
                    ui->pushButton_50->show();
                }
                ui->textEdit->hide();
                ui->pushButton_10->hide();
                ui->groupBox_20->hide();
                ui->pushButton_49->setText(tr("Ocultar Canal IRC::#blogdrake"));
            }
        }
        else
        {
            ui->webView->hide();
            ui->textEdit->show();
            ui->pushButton_10->show();
            ui->groupBox_20->show();
            ui->pushButton_49->setText(tr("Mostrar Canal IRC::#blogdrake"));
        }
    }
    else if (Chat == 1)
    {
        if (firefox == "0")
        {
            QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"firefox\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
            m.exec();
            ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;
        }
        else
        {
            QString cmd1 = "su - %1 -c \"firefox http://blogdrake.net/cgi-bin/ircbd/irc.cgi\"";
            cmd1=cmd1.arg(user);
            QStringList comandos;
            comandos<< cmd1;
            if (mib != 0)
                delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
            connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= 999; mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
        }
    }
}

void recoverdrake::on_pushButton_50_clicked()
{
    if (Chat == 0)
    {
        irc=0;
        ui->webView->stop();
        ui->webView->hide();
        ui->textEdit->show();
        ui->pushButton_10->show();
        ui->groupBox_20->show();
        ui->pushButton_49->setText(tr("Mostrar Canal IRC::#blogdrake"));
        ui->pushButton_50->hide();
    }
}

void recoverdrake::on_actionCrear_USB_Live_Multiboot_Interactivo_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Crear USB-Live Multiboot (Interactivo)");
    if (fileroller == "0")
    {
        QMessageBox m;
        if (Stilo == "A")
            m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"file-roller\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        if (mtools == "0")
        {
            QMessageBox m;
            if (Stilo == "A")
                m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"mtools\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
            m.exec();
        }
        else
        {
            if (qemu == "0")
            {
                QMessageBox m;
                if (Stilo == "A")
                    m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"qemu\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
                m.exec();
            }
            else
            {
                if (tree == "0")
                {
                    QMessageBox m;
                    if (Stilo == "A")
                        m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                    m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"tree\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
                    m.exec();
                }
                else
                {
                    drakeSistema drake;
                    Label = drake.getLabel();
                    if (Label == "")
                    {
                        QFile file("/etc/mtools.conf");
                        file.open(QIODevice::ReadWrite | QIODevice::Text | QIODevice::Append);
                        QTextStream in(&file);
                        in << "mtools_skip_check=1" << "\n";
                        file.close();
                    }
                    int respuesta = 0;
                    if (Mensaka!="Activo")
                    {
                        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Crear USB-Live Multiboot (Interactivo)")),
                                       QString::fromUtf8(tr("<center><b>Crear USB-Live Multiboot (Interactivo)</b></center><p>"
                                       "Interesante herramienta que he creado para poder tener en un USB todas las distros "
                                       "mas importantes que hay en el mundo Linux, arrancando directamente con un boot independiente.<p>"
                                       "Los tipos de instalacion de menu son GRUB y GRUB2 para USB.<p>"
                                       "Es importante seguir todos los pasos para instalar correctamente en el USB que te interese, "
                                       "por lo que recomiendo que quites todos los demás USB que no vayas a utilizar para este proposito.<p>"
                                       "&iquest;Crear USB-Live Multiboot (interactivo)?")), QMessageBox::Ok, QMessageBox::No);
                    }
                    else
                    {
                        respuesta=QMessageBox::Ok;
                    }
                    if (respuesta == QMessageBox::Ok)
                    {
                        if (Window == 0)
                        {
                            UsbLive *PenLive =new UsbLive(this);
                            if (Stilo == "A")
                                PenLive->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                            PenLive->Value("");
                            PenLive->show();
                        }
                        else if (Window == 1)
                        {
                            QMdiSubWindow *existing = buscarUsblive();
                            if(!existing)
                            {
                                Conectar();
                                PenLive = new UsbLive;
                                ui->tabWidget->insertTab(Pestanas,ui->tab_74,tr("Crear MultiBoot"));
                                ui->tabWidget->setTabIcon(Pestanas,QIcon(":/Imagenes/usb.png"));
                                ui->tabWidget->setCurrentPage(Pestanas);
                                Pagina28 = Pestanas;
                                ui->mdiArea_28->addSubWindow(PenLive);
                                connect(PenLive, SIGNAL(Cerrar()), this, SLOT(CerrarUsblive()));
                                if (Stilo == "A")
                                   PenLive->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                                PenLive->showMaximized();
                                PenLive->Value("Quitar");
                                PenLive->exec();
                            }
                            else
                            {
                               ui->tabWidget->setCurrentPage(Pagina28);
                               ui->mdiArea_28->setActiveSubWindow(existing);
                            }
                            PenLive->setWindowState(Qt::WindowMaximized);
                        }
                    }
                }
            }
        }
    }
}

QMdiSubWindow *recoverdrake::buscarUsblive()
{
    foreach (QMdiSubWindow *window, ui->mdiArea_28->subWindowList())
    {
        if(UsbLive *a= qobject_cast<UsbLive *>(window->widget()))
        {
            Q_UNUSED(a);
            return window;
        }
    }
    return 0;
}

void recoverdrake::CerrarUsblive()
{
    if (Pagina28 != 0)
    {
        ui->mdiArea_28->removeSubWindow(PenLive);
        ui->tabWidget->removeTab(ui->tabWidget->currentIndex());
        Pagina28=0;
        Desconectar();
    }
}

void recoverdrake::on_actionProgramar_apagado_triggered()
{        
    if (ui->label_62->text() != "")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("Ya tienes programado el apagado automatico.<p>No se puede reprogramar sin deshabilitar antes.")));
        m.exec();
        ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;
    }
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Activado apagado programado de equipo.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Apagado programado de equipo")),
                           QString::fromUtf8(tr("<center><b>Apagado programado de equipo</b></center><p>"
                           "Mediante esta opcion apagaremos el equipo a una hora y dia determinada "
                           "por lo que podremos tener un control de consumo aun sin estar en casa "
                           "o delante del equipo.<p>"
                           "&iquest;Programar apagado automatico?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok)
    {        
        Cierre *Apagado=new Cierre(this);
        if (Stilo == "A")
            Apagado->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        Apagado->exec();
        LocDia=Apagado->DownDia;
        LocMes=Apagado->DownMes;
        LocAno=Apagado->DownAnyo;
        LocHora=Apagado->DownHora;
        LocMinuto=Apagado->DownMinuto;
        LocSegundo=Apagado->DownSegundo;
        QString DiaD = QString::number(LocDia);
        QString MesD = QString::number(LocMes);
        QString AnyoD = QString::number(LocAno);
        QString HoraD = QString::number(LocHora);
        QString MinutoD = QString::number(LocMinuto);
        QString SegundoD = QString::number(LocSegundo);
        Loc = ""+DiaD+"/"+MesD+"/"+AnyoD+" "+HoraD+":"+MinutoD+":"+SegundoD+"";
        if (Loc == "0/0/0 0:0:0")
        {
            QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr(QString::fromUtf8("No has programado ningún cierre.")));
            m.exec();
            ui->tabWidget->setCurrentPage(pagina);
            ui->tabWidget_8->setCurrentPage(0);
            return;
        }
        else if (Loc != "0/0/0 0:0:0")
        {
            ui->checkBox_3->setEnabled(true);
            ui->checkBox_3->setChecked(true);
            ui->tabWidget_2->setCurrentPage(5);
            ui->textEdit_2->setText(tr("<center><span style='font-size:12pt'><b>Alarmas activas"));
            ControlCierre = new QTimer(this);
            connect(ControlCierre, SIGNAL(timeout()), this, SLOT(CtrlApagado()));
            CerrarP=1;
            ControlCierre->start(1000);
        }
    }
    ui->progressBar->hide();
    ui->pushButton_2->hide();
    ui->label_13->hide();
    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;
}

void recoverdrake::CtrlApagado()
{
    QDateTime FechaInicio = QDateTime::currentDateTime();
    QDateTime FechaFinal(QDate(LocAno,LocMes,LocDia),QTime(LocHora,LocMinuto,LocSegundo));
    if (FechaInicio >= FechaFinal)
    {
        ui->label_62->setText(tr("Apagando sistema..."));
        system("halt");
    }
    else
    {
        double TotalSegundos = FechaInicio.secsTo(FechaFinal);
        double RHora = TotalSegundos / 3600;
        int RestoHora = RHora;
        double RMinutos = (RHora-RestoHora) * 60;
        int RestoMinutos = RMinutos;
        double RSegundos = (RMinutos-RestoMinutos) *60;
        int RestoSegundos = RSegundos;
        QString Valor1, Valor2, Valor3;        
        if (RestoHora > 0)
        {
            if (RestoHora > 1)
                Valor1 = "Horas";
            else
                Valor1 = "Hora";
            if (RestoMinutos > 1)
                Valor2 = "Minutos";
            else
                Valor2 = "Minuto";
            if (RestoSegundos > 1)
                Valor3 = "Segundos";
            else
                Valor3 = "Segundo";
            ui->label_62->setText(tr("El sistema se apagara en... ")+QString::number(RestoHora)+" "+Valor1+" : "+QString::number(RestoMinutos)+" "+Valor2+" : "+QString::number(RestoSegundos)+" "+Valor3+".");
        }
        else if (RestoMinutos > 0)
        {            
            if (RestoMinutos > 1)
                Valor2 = "Minutos";
            else
                Valor2 = "Minuto";
            if (RestoSegundos > 1)
                Valor3 = "Segundos";
            else
                Valor3 = "Segundo";
            ui->label_62->setText(tr("El sistema se apagara en... ")+QString::number(RestoMinutos)+" "+Valor2+" : "+QString::number(RestoSegundos)+" "+Valor3+".");
        }
        else
        {
            if (RestoSegundos > 1)
                Valor3 = "Segundos";
            else
                Valor3 = "Segundo";
            ui->label_62->setText(tr("El sistema se apagara en... ")+QString::number(RestoSegundos)+" "+Valor3+".");
        }
        ui->dateTimeEdit_3->setDateTime(FechaFinal);
    }
}

void recoverdrake::on_actionQuitar_triggered()
{
    if (CerrarP == 1)
    {
        ControlCierre->stop();
        ui->textEdit_2->setText(tr("<center><span style='font-size:12pt'><b>Sin alarmas activas"));
        ui->checkBox_3->setEnabled(false);
        ui->checkBox_3->setChecked(false);
        ui->dateTimeEdit_3->setEnabled(false);
        ui->label_62->setText("");
        ui->tabWidget_2->setCurrentPage(0);
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("El apagado automatico se ha deshabilitado.")));
        m.exec();
        CerrarP=0;
    }
    else if (CerrarP == 0)
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede deshabilitar ya que no esta programado el cierre.")));
        m.exec();
    }
}

void recoverdrake::on_actionProbar_USB_Live_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Probar USB-Live por emulacion.");
    Refrescar();
    if (qemu == "0")
    {
        QMessageBox m;
        if (Stilo == "A")
            m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"qemu\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Probar USB-Live")),
                        QString::fromUtf8(tr("<center><b>Probar USB-Live</b></center><p>"
                        "Puedes probar la distros instaladas en el USB mediante emulacion para ver si "
                        "todo ha ido correcto.<p>"
                        "&iquest;Probar la instalacion realizada en el USB-Live?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok)
        {
            LocUsb *Usb=new LocUsb();
            if (Stilo == "A")
                Usb->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            Usb->exec();
            QString NomUsb=Usb->MediaUsb;
            if (NomUsb == "")
            {
                QMessageBox m;
                if (Stilo == "A")
                    m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                m.setText(tr("NO hay ningun USB activo para poder realizar la solicitud."));
                m.exec();
                ui->tabWidget->setCurrentPage(pagina);
                ui->tabWidget_8->setCurrentPage(0);
                return;
            }
            QString cm1= QString::fromUtf8(tr("echo Probando Usb-Live..."));
            QString cm2= "qemu-system-x86_64 %2";
            cm2=cm2.arg(NomUsb);
            QStringList comandos;
            comandos << cm1 << cm2;
            if (mib != 0)
                delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count();
            mib->Valor(valor,3);
            mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro);
            mib->iniciarProceso();
        }
        else
        {
            ui->tabWidget->setCurrentPage(pagina);
            ui->tabWidget_8->setCurrentPage(0);
            return;
        }
    }
}

void recoverdrake::on_actionEjercicios_practicos_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Juego tipo Test.");
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Ejercicio tipo Test")),
                    QString::fromUtf8(tr("<center><b>Ejercicio tipo Test</b></center><p>"
                    "Puedes hacer este test para saber tu nivel de usuario de Linux.<p>"
                    "&iquest;Realizar Test?")), QMessageBox::Ok, QMessageBox::No);
     }
     else
        respuesta=QMessageBox::Ok;
     if (respuesta == QMessageBox::Ok)
     {
         if (Window == 0)
         {
             examen *test=new examen();
             if (Stilo == "A")
                test->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
             test->showMaximized();
             test->exec();
         }
         else if (Window == 1)
         {
             QMdiSubWindow *existing = buscarExec();
             if(!existing)
             {
                 Conectar();
                 test = new examen;
                 ui->tabWidget->insertTab(Pestanas,ui->tab_40,tr("Ejercicios practicos"));
                 ui->tabWidget->setTabIcon(Pestanas,QIcon(":/Imagenes/libro.png"));
                 ui->tabWidget->setCurrentPage(Pestanas);
                 Pagina7 = Pestanas;
                 ui->mdiArea_7->addSubWindow(test);
                 connect(test, SIGNAL(Cerrar()), this, SLOT(CerrarTest()));
                 if (Stilo == "A")
                    test->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                 test->showMaximized();
                 test->Valor("Quitar");
                 test->exec();
             }
             else
             {
                ui->tabWidget->setCurrentPage(Pagina7);
                ui->mdiArea_7->setActiveSubWindow(existing);
             }
             test->setWindowState(Qt::WindowMaximized);
         }
     }
}

void recoverdrake::on_actionBuscador_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Buscador de ficheros.");
    if (gcstar == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"gcstar\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Buscador de ficheros")),
                        QString::fromUtf8(tr("<center><b>Buscador de ficheros</b></center><p>"
                        "Buscar en tu ordenador cualquier fichero con solo introducir su nombre, "
                        "y sabras su ruta, tambien puedes utilizar comodines para buscar todos los "
                        "que tengan el mismo nombre o parecido.<p>"
                        "Ejemplos:<p>"
                        "*mos*.avi - Buscara todos los ficheros avi que contengan la palabra \"mos\".<p>"
                        "*.avi - Buscara todos los ficheros con extension \"avi\".<p>"
                        "*mos - Buscara todos los ficheros que terminen en \"mos\".<p>"
                        "mos* - Buscara todos los ficheros que comiencen por \"mos\".<p>"
                        "&iquest;Buscar ficheros?")), QMessageBox::Ok, QMessageBox::No);
         }
         else
         {
            respuesta=QMessageBox::Ok;
         }
         if (respuesta == QMessageBox::Ok)
         {
             if (Window == 0)
             {
                 Busca *buscar=new Busca(this);
                 if (Stilo == "A")
                    buscar->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                 buscar->showMaximized();
                 buscar->Value(0);
                 buscar->exec();
             }
             else if (Window == 1)
             {
                 QMdiSubWindow *existing = buscarBusca();
                 if(!existing)
                 {
                     Conectar();
                     buscar = new Busca;
                     ui->tabWidget->insertTab(Pestanas,ui->tab_32,tr("Buscador"));
                     ui->tabWidget->setTabIcon(Pestanas,QIcon(":/Imagenes/Buscar.png"));
                     ui->tabWidget->setCurrentPage(Pestanas);
                     Pagina3 = Pestanas;
                     ui->mdiArea_3->addSubWindow(buscar);
                     connect(buscar, SIGNAL(Cerrar()), this, SLOT(CerrarBuscar()));
                     if (Stilo == "A")
                        buscar->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                     buscar->showMaximized();
                     buscar->Value(1);
                     buscar->exec();
                 }
                 else
                 {
                     ui->tabWidget->setCurrentPage(Pagina3);
                     ui->mdiArea_3->setActiveSubWindow(existing);;
                 }
                 buscar->setWindowState(Qt::WindowMaximized);
             }
         }
    }
}

void recoverdrake::on_actionCambiar_el_hostname_del_equipo_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Cambiar hostname del equipo.");
    Refrescar();
    int respuesta = 0;
    bool ok;
    if (Mensaka!="Activo")
    {
       respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Cambiar hostname del equipo")),
                   QString::fromUtf8(tr("<center><b>Cambiar hostname del equipo</b></center><p>"

                   "Con esta utilidad se puede cambiar el hostname de la maquina para que se identifique "
                   "con otro nombre como en el caso del acceso a la consola en el que normalmente aparece algo como esto.<p>"

                   "<b>[usuario@localhost]$</b><p>"

                   "pudiendo cambiar la parte despues de la arroba \"localhost\", por defecto, "
                   "por cualquier nombre que queramos.<p>"

                   "<center><b>IMPORTANTE</b></center><p>"

                   "<center><b>Para realizar este cambio de forma permanente se reinciara la sesion activa, tenlo en cuenta para </b>"
                   "<center><b>cerrar todos los programas que tengas abiertos, aunque el sistema se encargará de cerralos de forma segura, "
                   "pero puede que algunos programas no se cierren correctamente.</b><p>"

                   "&iquest;Cambiar nombre hostname al equipo?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
       respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok)
    {
        NameHost = QInputDialog::getText(this, QString::fromUtf8(tr("Nombre de hostname")),
        QString::fromUtf8(tr("Introduzca el nuevo nombre para identificar el equipo.<P> "

            "El nombre antiguo de hostname es... "+infoHost+".<p>"

            "<FONT COLOR=\"RED\">Ejemplo:<p>"

            "<FONT COLOR=\"RED\">Linux")),
            QLineEdit::Normal,
            "Linux",
            &ok);
            if (ok && !NameHost.isEmpty())
            {
                QString cm1= "echo Creando copia de seguridad de hostname...";
                QString cm2= "cp /etc/hostname /etc/hostname.bak";
                QString cm3= "echo Introduciendo nuevo nombre de hostname...";
                QString cm0= "hostname %1";
                cm0=cm0.arg(NameHost);
                QString cm4= "hostname %1 start";
                cm4=cm4.arg(NameHost);
                QString cm5= "echo Nuevo nombre de hostname verificado...";
                QString cm6= "echo Cerrando sesion para cambios...";
                QStringList comandos;
                comandos << cm1 << cm2 << cm3 << cm0 << cm4 << cm5 << cm6;
                if (mib != 0)
                    delete mib;
                mib = new DrakeProcesos(comandos, this);
                connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                connect(mib, SIGNAL(DatoComand(QString)), this, SLOT(mibReferencia(QString)));
                connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                int valor= comandos.count(); mib->Valor(valor,2); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
            }
            else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
    }
    else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionOptimizar_sistema_a_su_maxima_potencia_triggered()
{
    drakeSistema drake;
    infoHost = drake.getHostname();
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Optimizar sistema a su maxima potencia.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
       respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Optimizar sistema a su maxima potencia")),
                   QString::fromUtf8(tr("<center><b>Optimizar sistema a su maxima potencia</b></center><p>"

                   "Con esta función puedes acelerar los procesos de tu sistema para que "
                   "se acelere la velocidad a su maximo posible realizando varias modificaciones de procesos internos.<p>"

                   "&iquest;Optimizar sistema a su maxima potencia?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
       respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok)
    {
       QString cm1= QString::fromUtf8(tr("echo Realizando optimacion..."));
       QString cm2= "urpmi preload";
       QString cm3= "echo Creando copia de seguridad de hosts...";
       QString cm4= "cp /etc/hosts /etc/hosts.bak";
       QString cm5= "echo Creando modificaciones de aceleracion en fichero hosts...";
       QString cm7 = "echo Modificando sysctl...";
       QString cm8= "sysctl vm.swappiness=10";
       QString cm9= "echo Creando copia de seguridad de sysctl.conf...";
       QString cm10= "cp /etc/sysctl.conf /etc/sysctl.conf.bak";
       QString cm11= "echo Automatizando la configuracion de sysctl...";
       QString cm13= QString::fromUtf8(tr("echo Realizando eliminacion del servicio Nepomuk..."));
       QString cm14= "su - %1 -c \"qdbus org.kde.NepomukServer /nepomukserver quit\"";
       cm14=cm14.arg(user);
       QString cm15 = "mv /usr/share/autostart/nepomukserver.desktop /usr/share/autostart/nepomukserver.desktop.backup";
       QString cm16 = "rm -vrf /home/%1/.kde/share/apps/nepomuk";
       cm16=cm16.arg(user);
       QString cm17 = "echo Reiniciando equipo para cambios...";
       QStringList comandos;
       comandos << cm1 << cm2 << cm3 << cm4 << cm5 << cm7 << cm8 << cm9 << cm10 << cm11 << cm13 << cm14 << cm15 << cm16 << cm17;
       if (mib != 0)
           delete mib;
       mib = new DrakeProcesos(comandos, this);
       connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
       connect(mib, SIGNAL(DatoComand(QString)), this, SLOT(mibReferencia(QString)));
       connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
       int valor= comandos.count(); mib->Valor(valor,2); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
    }
    else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::mibReferencia(QString comando)
{
    if (comando == "echo Introduciendo nuevo nombre de hostname...")
    {
        QFile file("/etc/hostname");
        file.open(QIODevice::WriteOnly | QIODevice::Text);
        QTextStream in(&file);
        in << ""+NameHost+"" << "\n";
        file.close();
    }
    if (comando == "echo Nuevo nombre de hostname verificado...")
    {
        drakeSistema drake;
        infoHost = drake.getHostname();
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr("El nombre actual de hostname es... "+infoHost+""));
        m.exec();
    }
    if (comando == "echo Cerrando sesion para cambios...")
    {
        int respuesta = 0;
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Cerrar sesion actual para cambios")),
                       QString::fromUtf8(tr("<center><b>Cerrar sesion actual para cambios</b></center><p>"

                       "Para que los cambios realizados sean efectivos debes reiniciar la sesion activa "
                       "o comprobar los cambios cuando vuelvas a entrar en otra sesion.<p>"

                       "&iquest;Cerrar sesion actual para obtener cambios?")), QMessageBox::Ok, QMessageBox::No);
        if (respuesta == QMessageBox::Ok)
        {
            system("killall X");
        }
        else if (respuesta == QMessageBox::No)
        {
            QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr("Los cambios no seran efectivos hasta que se reinicie la sesion actual."));
            m.exec();
            ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;
        }
    }
    if (comando == "echo Creando modificaciones de aceleracion en fichero hosts...")
    {
        QFile file("/etc/hosts");
        file.open(QIODevice::WriteOnly | QIODevice::Text);
        QTextStream in(&file);
        in << "127.0.0.1 localhost "+infoHost+"" << "\n";
        in << " 127.0.1.1 "+infoHost+"" << "\n";
        file.close();
    }
    if (comando == "echo Automatizando la configuracion de sysctl...")
    {
        QFile file("/etc/sysctl.conf");
        file.open(QIODevice::WriteOnly | QIODevice::Text | QIODevice::Append);
        QTextStream in(&file);
        in << "vm.swappiness=10" << "\n";
        file.close();
    }
    if (comando == "echo Reiniciando equipo para cambios...")
    {
        int respuesta = 0;
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Reinciar equipo para cambios")),
                       QString::fromUtf8(tr("<center><b>Reiniciar equipo para cambios</b></center><p>"

                       "Para que los cambios realizados sean efectivos debes reiniciar el sistema "
                       "o comprobar los cambios cuando vuelvas a entrar en otra ocasion.<p>"

                       "&iquest;Reiniciar equipo para obtener cambios?")), QMessageBox::Ok, QMessageBox::No);
        if (respuesta == QMessageBox::Ok)
        {
            system("reboot");
        }
        else if (respuesta == QMessageBox::No)
        {
            QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr("Los cambios no seran efectivos hasta que se reinicie el sistema."));
            m.exec();
            ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;
        }
    }
}


void recoverdrake::on_actionEliminar_servicio_de_indexado_Nepomuk_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Eliminar el servicio de indexado Nepomuk.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
       respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Eliminar el servicio de indexado Nepomuk")),
                   QString::fromUtf8(tr("<center><b>Eliminar el servicio de indexado Nepomuk</b></center><p>"

                   "Con esta función podemos eliminar el servicio Nepomuk del sistema, por lo que ahorraras "
                   "aproximadamente unas 200 megas de memoria.<p>"

                   "<b>Ten en cuenta que si realizas esta opcion no hay marcha atras, ya que no podras "
                   "<b>volver a utilizar el servicio de indexado.</b><p>"

                   "&iquest;Eliminar el servicio Nepomuk del sistema?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
       respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok)
    {
       QString cm1= QString::fromUtf8(tr("echo Realizando eliminacion del servicio Nepomuk..."));
       QString cm2= "su - %1 -c \"qdbus org.kde.NepomukServer /nepomukserver quit\"";
       cm2=cm2.arg(user);
       QString cm3 = "mv /usr/share/autostart/nepomukserver.desktop /usr/share/autostart/nepomukserver.desktop.backup";
       QString cm4 = "rm -vrf /home/%1/.kde/share/apps/nepomuk";
       cm4=cm4.arg(user);
       QStringList comandos;
       comandos << cm1 << cm2 << cm3 << cm4;
       if (mib != 0)
           delete mib;
       mib = new DrakeProcesos(comandos, this);
       connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
       connect(mib, SIGNAL(DatoComand(QString)), this, SLOT(mibReferencia(QString)));
       connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
       int valor= comandos.count(); mib->Valor(valor,2); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
    }
    else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionConfigura_tu_KDE_systemsettings_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Configurar KDE (systemsettings).");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Configurar KDE (SytemSettings)")),
                       QString::fromUtf8(tr("<center><b>Configurar KDE (SytemSettings)</b></center><p>"

                       "Con esta opcion podraas configurar el escritorio KDE, tanto como quieras.<p>"

                       "&iquest;Configurar KDE (systemsettings)?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok)
        {
            system("su - "+user+" -c \"systemsettings\"");
        }
    ui->progressBar->hide();
    ui->pushButton_2->hide();
    ui->label_13->hide();
    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;
}

void recoverdrake::on_actionPhonon_no_es_reconocido_por_programas_basados_en_QT_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Solucionar problema de la libreria phonon.");
    Refrescar();
    QStringList comandos;
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Solucionar problema de la libreria phonon)")),
                       QString::fromUtf8(tr("<center><b>Solucionar problema de la libreria phonon</b></center><p>"
                       "Con esta opcion corregimos fallos de localizacion de las librerias de phonon.<p>"
                       "&iquest;Solucionar problema de la libreria phonon?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
        respuesta=QMessageBox::Ok;
    if (respuesta == QMessageBox::Ok)
    {
        QString cm =QString::fromUtf8(tr("echo Corrigiendo fallos de enlaces a phonon..."));
        QString cm1, Version;
        if (QT_VERSION >= 0x050000)
            Version = "qt5";
        else
            Version = "qt4";
        if (arqt == "x86_64")
        {
            cm1= "ln -sf /usr/lib64/kde4/plugins/phonon_backend /usr/lib64/%1/plugins/phonon_backend";
            cm1=cm1.arg(Version);
        }
        else
        {
            cm1= "ln -sf /usr/lib/kde4/plugins/phonon_backend /usr/lib/%1/plugins/phonon_backend";
            cm1=cm1.arg(Version);
        }
        comandos<< cm << cm1;
        if (mib != 0)
            delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
        connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count();
        mib->Valor(valor,0);
        mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro);
        mib->iniciarProceso();
    }
    else
    {
        ui->tabWidget->setCurrentPage(pagina);
        ui->tabWidget_8->setCurrentPage(0);
        return;
    }
}

void recoverdrake::on_actionPeliculas_triggered()
{
        QString hora = QTime::currentTime().toString("hh:mm:ss");
        ui->textEdit_4->append(""+hora+"-- Accion: Acceso a Catalogo de peliculas.");
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
           respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Base de datos de peliculas")),
                            QString::fromUtf8(tr("<center><b>Base de datos de peliculas</b></center><p>"
                            "Administra tus peliculas, con todos los datos relevantes de cada una, "
                            "pudiendo introducir actores, calificacion, genero, localizacion, sinopsis y "
                            "un largo etc.<p>"
                            "&iquest;Entrar en la base de datos de peliculas?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok)
        {
            if (Window == 0)
            {
                dbpelis *pelis=new dbpelis(this);
                if (Stilo == "A")
                    pelis->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: 7pt; font-style: "+DatoTalla+"; font-family: Sans Serif; font-weight: bold");
                pelis->showMaximized();
                pelis->Valor("",Usu);
                pelis->exec();
            }
            else if (Window == 1)
            {
                QMdiSubWindow *existing = buscarPelis();
                if(!existing)
                {
                    Conectar();
                    pelis = new dbpelis;
                    ui->tabWidget->insertTab(Pestanas,ui->tab_38,tr("DB Pelis"));
                    ui->tabWidget->setTabIcon(Pestanas,QIcon(":/Imagenes/pelis.png"));
                    ui->tabWidget->setCurrentPage(Pestanas);
                    Pagina6 = Pestanas;
                    ui->mdiArea_6->addSubWindow(pelis);
                    connect(pelis, SIGNAL(Cerrar()), this, SLOT(CerrarPelis()));
                    if (Stilo == "A")
                        pelis->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                    pelis->showMaximized();
                    pelis->Valor("Quitar",Usu);
                    pelis->exec();
                }
                else
                {
                    ui->tabWidget->setCurrentPage(Pagina6);
                    ui->mdiArea_6->setActiveSubWindow(existing);;
                }
                pelis->setWindowState(Qt::WindowMaximized);
            }
        }        
}

void recoverdrake::on_actionCompilar_desde_las_fuentes_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Compilar/desinstalar desde las fuentes de un programa.");
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
       respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Compilar/desinstalar desde las fuentes")),
                        QString::fromUtf8(tr("<center><b>Compilar/desinstalar desde las fuentes</b></center><p>"
                        "Compila los programas con unos simples pasos e incluso descarga directamente "
                        "introduciendo la ruta y se realizara todo automaticamente desde la comprobacion hasta la "
                        "instalacion, creando el archivo makefile si fuese necesario.<p>"
                        "Tambien puedes desinstalar un programa compilado anteriormente, en el caso de que no hayas "
                        "ejecutado \"make clean\" ya que sin el make original no se puede desinstalar.<p>"
                        "<b>NOTA: Todos los makefile no soportan la desinstalacion.<p></b>"
                        "&iquest;Compilar/desinstalar programas desde las fuentes?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok)
    {
        if (Window == 0)
        {
            makefile *make=new makefile(this);
            if (Stilo == "A")
                make->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: 7pt; font-style: "+DatoTalla+"; font-family: Sans Serif; font-weight: bold");
            make->showMaximized();
            make->exec();
        }
        else if (Window == 1)
        {
            QMdiSubWindow *existing = buscarMakefile();
            if(!existing)
            {
                Conectar();
                make = new makefile;
                ui->tabWidget->insertTab(Pestanas,ui->tab_64,tr("Compilar desde las fuentes"));
                ui->tabWidget->setTabIcon(Pestanas,QIcon(":/Imagenes/compilar.png"));
                ui->tabWidget->setCurrentPage(Pestanas);
                Pagina18 = Pestanas;
                ui->mdiArea_18->addSubWindow(make);
                connect(make, SIGNAL(Cerrar()), this, SLOT(CerrarMakefile()));
                if (Stilo == "A")
                    make->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                make->showMaximized();
                make->Valor("Quitar");
                make->exec();
            }
            else
            {
                ui->tabWidget->setCurrentPage(Pagina18);
                ui->mdiArea_18->setActiveSubWindow(existing);
            }
            make->setWindowState(Qt::WindowMaximized);
        }
    }
}

void recoverdrake::on_actionConfigurar_VNC_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Configurar VNC.");
    Refrescar();
    if (x11vnc == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"x11vnc\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        if (mutt == "0")
        {
            QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"muttc\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
            m.exec();
        }
        else
        {
            if (sendmail == "0")
            {
                QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"sendmail\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
                m.exec();
            }
            else
            {
                if (ssmtp == "0")
                {
                    QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                    m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ssmtp\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
                    m.exec();
                }
                else
                {
                    int respuesta = 0;
                    if (Mensaka!="Activo")
                    {
                       respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Configurar VNC")),
                                        QString::fromUtf8(tr("<center><b>Configurar VNC</b></center><p>"
                                        "Controla de forma remota tu ordenador, mediante el servicio de VNC.<p>"
                                        "Aqui se introducen los datos necesarios para que todo funcione.<p>"
                                        "&iquest;Configurar VNC?")), QMessageBox::Ok, QMessageBox::No);
                    }
                    else
                    {
                        respuesta=QMessageBox::Ok;
                    }
                    if (respuesta == QMessageBox::Ok)
                    {
                        vnc *VNC=new vnc(this);
                        if (Stilo == "A")
                            VNC->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: 7pt; font-style: "+DatoTalla+"; font-family: Sans Serif; font-weight: bold");
                        VNC->exec();
                    }
                    ui->progressBar->hide();
                    ui->pushButton_2->hide();
                    ui->label_13->hide();
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;
                }
            }
        }
    }
}

void recoverdrake::on_actionActualizar_solo_los_soportes_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Actualizar solo los soportes de repositorios.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Actualizar solo los soportes de repositorios")),
                       QString::fromUtf8(tr("<center><b>Actualizar solo los soportes de repositorios</b></center><p>"

                       "Hay veces que necesitamos actualizar los soportes antes de realizar una instalacion de "
                       "paquetes por diversos motivos.<p>"

                       "Utiliza esta utilidad para refrescar todos los soportes.<p>"

                       "<B>NOTA: Debes esperar a que termine completamente el "
                       "proceso seleccionado, el cual te sera notificado "
                       "cuando finalice en la consola de procesos.</B><p>"

                       "&iquest;Actualizar los soportes de repositorios?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok)
    {
        QString cm = QString::fromUtf8(tr("echo Actualizando soportes..."));
        QString cmd = "urpmi.update -a";
        QStringList comandos;
        comandos<< cm << cmd;
        if (mib != 0)
        delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
    }
    else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionDesactivar_Barra_de_menu_superios_triggered(bool k)
{
    Refrescar();
    QMessageBox m;
    if (Stilo == "A")
        m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
    bool opcion11;
    opcion11=ui->actionDesactivar_Barra_de_menu_superios->isChecked();
    QSettings seting("myorg","Aplica");
    seting.setValue("opcion11",opcion11);
    if (k==true)
     {
         m.setText(tr("Se ha desactivado el menu de herramientas superior."));
         ui->actionDesactivar_Barra_de_menu_superios->setIcon(QIcon(":/Imagenes/good.png"));
         QString hora = QTime::currentTime().toString("hh:mm:ss");
         ui->textEdit_4->append(""+hora+"-- <b><FONT COLOR=\"RED\">Barra de menu superior desactivada.");
         ui->toolBar->hide();
         Puntero1 = 1;
     }
    else
    {
        m.setText(tr("Se ha activado el menu de herramientas superior."));
        ui->actionDesactivar_Barra_de_menu_superios->setIcon(QIcon(""));
        QString hora = QTime::currentTime().toString("hh:mm:ss");
        ui->textEdit_4->append(""+hora+"-- <b><FONT COLOR=\"RED\">Barra de menu superior activada.");
        ui->toolBar->show();
        Puntero1 = 0;
    }
    m.exec();
    ui->progressBar->hide();
    ui->pushButton_2->hide();
    ui->label_13->hide();
    ui->tabWidget->setCurrentPage(pagina);
    ui->tabWidget_8->setCurrentPage(0);
}

void recoverdrake::on_actionDesactivar_Barra_de_menu_inferior_triggered(bool l)
{
    Refrescar();
    QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
    bool opcion12;
    opcion12=ui->actionDesactivar_Barra_de_menu_inferior->isChecked();
    QSettings seting("myorg","Aplica");
    seting.setValue("opcion12",opcion12);
    if (l==true)
    {
        m.setText(tr("Se ha desactivado el menu de herramientas interactivas."));
        ui->actionDesactivar_Barra_de_menu_inferior->setIcon(QIcon(":/Imagenes/good.png"));
        QString hora = QTime::currentTime().toString("hh:mm:ss");
        ui->textEdit_4->append(""+hora+"-- <b><FONT COLOR=\"RED\">Barra de menu inferior desactivada.");
        ui->toolBar_2->hide();
        Puntero = 1;
    }
    else
    {
        m.setText(tr("Se ha activado el menu de herramientas interactivas."));
        ui->actionDesactivar_Barra_de_menu_inferior->setIcon(QIcon(""));
        QString hora = QTime::currentTime().toString("hh:mm:ss");
        ui->textEdit_4->append(""+hora+"-- <b><FONT COLOR=\"RED\">Barra de menu inferior activada.");
        ui->toolBar_2->show();
        Puntero = 0;
    }
    m.exec();
    ui->progressBar->hide();
    ui->pushButton_2->hide();
    ui->label_13->hide();
    ui->tabWidget->setCurrentPage(pagina);
    ui->tabWidget_8->setCurrentPage(0);
}

void recoverdrake::on_actionServidor_VNC_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Activar servidor VNC.");
    Refrescar();
    if (x11vnc == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"x11vnc\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        if (mutt == "0")
        {
            QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"muttc\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
            m.exec();
        }
        else
        {
            if (sendmail == "0")
            {
                QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"sendmail\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
                m.exec();
            }
            else
            {
                if (ssmtp == "0")
                {
                    QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                    m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ssmtp\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
                    m.exec();
                }
                else
                {
                    int respuesta = 0;
                    if (Mensaka!="Activo")
                    {
                       respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Activar servidor VNC")),
                                        QString::fromUtf8(tr("<center><b>Activar servidor VNC</b></center><p>"

                                        "Aqui puedes activar el servidor de control remoto VNC de tu ordenador, para "
                                        "poder acceder a el desde otro ordenador. Se utilizara solo para esta sesion.<p>"

                                        "No olvides abrir los puertos de tu router desde 5900 a 5910 (vienen cerrados por defecto) para poder utilizar "
                                        "esta funcion, ya que sin ellos abiertos, no funcionara, al no tener permisos remotos.<p>"

                                        "&iquest;Activar servidor VNC?")), QMessageBox::Ok, QMessageBox::No);
                    }
                    else
                    {
                        respuesta=QMessageBox::Ok;
                    }
                    if (respuesta == QMessageBox::Ok)
                    {
                        QString Cantidad,Cantidad1,Cantidad2,Cantidad3,Cantidad4,Cantidad5,Cantidad6,Cantidad7,Cantidad8,Cantidad9,Cantidad10,Cantidad11;
                        QSqlQuery query(dbs);
                        query.exec("SELECT tipoIp,clave,contraclave,segundoplano,menuGrafico,escuchar,soloVisual,LimitarIp FROM DatosVnc WHERE id=2");
                        query.first();
                        if (query.isValid())
                        {
                            Cantidad=query.value(0).toString();
                            Cantidad1=query.value(1).toString();
                            Cantidad2=query.value(2).toString();
                            Cantidad3=query.value(3).toString();
                            Cantidad4=query.value(4).toString();
                            Cantidad5=query.value(5).toString();
                            Cantidad6=query.value(6).toString();
                            Cantidad7=query.value(7).toString();
                            if (Cantidad1 != "")
                            {
                                Cantidad1 = "-passwd "+Cantidad1+"";
                            }
                            else if (Cantidad1 == "")
                            {
                                Cantidad1 = "";
                            }
                            if (Cantidad3 == "1")
                            {
                                Cantidad3 = "-bg";
                            }
                            else if (Cantidad3 == "0")
                            {
                                Cantidad3 = "";
                            }
                            if (Cantidad4 == "1")
                            {
                                Cantidad4 = "-gui";
                            }
                            else if (Cantidad4 == "0")
                            {
                                Cantidad4 = "";
                            }
                            if (Cantidad5 == "1")
                            {
                                Cantidad5 = "-forever";
                            }
                            else if (Cantidad5 == "0")
                            {
                                Cantidad5 = "";
                            }
                            if (Cantidad6 == "1")
                            {
                                Cantidad6 = "-viewonly";
                            }
                            else if (Cantidad6 == "0")
                            {
                                Cantidad6 = "";
                            }
                            if (Cantidad7 == "1")
                            {
                                Cantidad7="-allow ";
                                int posicion=1;
                                QSqlQuery query(dbs);
                                query.exec("SELECT ip FROM ipVnc");
                                while (query.next())
                                {
                                    if (posicion == 1)
                                        Cantidad7 = Cantidad7.append(query.value(0).toString());
                                    else if (posicion > 1)
                                        Cantidad7 = Cantidad7.append(","+query.value(0).toString()+"");
                                    posicion++;
                                }
                            }
                            else if (Cantidad7 == "0")
                            {
                                Cantidad7 = "";
                            }
                        }                        
                        if (Cantidad == "1")
                        {
                            QSqlQuery query1(dbs);
                            query1.exec("SELECT correo,smtp,pass,destino FROM Correo WHERE id=1");
                            query1.first();
                            if (query1.isValid())
                            {
                                Cantidad8=query1.value(0).toString();
                                Cantidad9=query1.value(1).toString();
                                Cantidad10=query1.value(2).toString();
                                Cantidad11=query1.value(3).toString();
                                system("su - "+user+" -c \"mutt -s \""+ip+"\" "+Cantidad11+" <<< \"IP_Publica\"\"");
                            }
                        }
                        QString c= QString::fromUtf8(tr("echo Enviando ip dinamica a correo electronico..."));
                        QString c1 = QString::fromUtf8(tr("echo Desactivando cualquier Server VNC anterior..."));
                        QString c2 = "killall x11vnc";
                        QString c3 = QString::fromUtf8(tr("echo Realizando conexion de Server VNC..."));
                        QString c4= "su - %1 -c \"x11vnc %2 %3 %4 %5 %6 %7\"";
                        c4=c4.arg(user).arg(Cantidad3).arg(Cantidad4).arg(Cantidad5).arg(Cantidad6).arg(Cantidad7).arg(Cantidad1);
                        QStringList comandos;
                        comandos<< c << c1 << c2 << c3 << c4;
                        if (mib != 0)
                            delete mib;
                        mib = new DrakeProcesos(comandos, this);
                        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
                        connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
                        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
                        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
                    }
                    ui->progressBar->hide();
                    ui->pushButton_2->hide();
                    ui->label_13->hide();
                    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;
                }
            }
        }
    }
}

void recoverdrake::on_actionDesactivar_Servidor_VNC_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Desactivar Servidor VNC.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Desactivar Servidor VNC")),
                       QString::fromUtf8(tr("<center><b>Desactivar Servidor VNC</b></center><p>"

                       "Una vez iniciado el servidor VNC se puede matar el proceso si lo has puesto "
                       "en segundo plano por ejemplo con el simple hecho de realizar esta funcion, de "
                       "manera que ya no se puede acceder remotamente al Server a partir de ese momento.<p>"

                       "&iquest;Desactivar Servidor VNC?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok)
    {
        QString cm = QString::fromUtf8(tr("echo Desactivando Server VNC..."));
        QString cmd = "killall x11vnc";
        QStringList comandos;
        comandos<< cm << cmd;
        if (mib != 0)
        delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
    }
    else{ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;}
}

void recoverdrake::on_actionCalculaR_md5_de_imagen_ISO_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Calcular md5 de imagen ISO.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
       respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Calcular md5 de imagen ISO")),
                        QString::fromUtf8(tr("<center><b>Calcular md5 de imagen ISO</b></center><p>"
                        "Comprobar la suma de md5 de una imagen ISO, para verificar con el correspondiente "
                        "archivo .md5 si ha sido correcta la descagar y no hay corrupcion de datos.<p>"
                        "<b>IMPORTANTE: Este proceso puede demorarse unos segundos segun datos a validar.<p></b>"
                        "&iquest;Calcular md5 de imagen ISO?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok)
    {
        md5sum *md5=new md5sum(this);
        if (Stilo == "A")
            md5->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: 7pt; font-style: "+DatoTalla+"; font-family: Sans Serif; font-weight: bold");
        md5->exec();
    }
    ui->progressBar->hide();
    ui->pushButton_2->hide();
    ui->label_13->hide();
    ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;
}

void recoverdrake::on_actionIniciar_sesion_remota_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Iniciar sesion remota VNC");
    Refrescar();
    if (tigervnc == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"tigervnc\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Iniciar sesion remota VNC")),
                        QString::fromUtf8(tr("<center><b>Iniciar sesion remota VNC</b></center><p>"
                        "Iniciar servicio remoto VNC como usuario remoto, conectandose a un servidor VNC.<p>"
                        "&iquest;Iniciar sesion remota VNC?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok)
        {
            remoto *Remote=new remoto(this);
            if (Stilo == "A")
                Remote->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: 7pt; font-style: "+DatoTalla+"; font-family: Sans Serif; font-weight: bold");
            Remote->exec();
        }
        ui->progressBar->hide();
        ui->pushButton_2->hide();
        ui->label_13->hide();
        ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;
    }
}

void recoverdrake::on_actionDescargar_torrent_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Descargar torrent");
    Refrescar();
    if (transmission == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"transmission-cli\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Descarga de torrent")),
                        QString::fromUtf8(tr("<center><b>Descarga de torrent</b></center><p>"

                        "Cuando una nueva distribucion sale, normalmente se puede descargar la iso desde "
                        "la pagina de descarga o por torrent, siendo esta segunda la opcion prefererida "
                        "porque se garantiza la comparticion durante un mayor tiempo.<p>"

                        "Con esta opcion se puede realizar dicha descarga, aunque se puede descargar todos "
                        "los ficheros con extension .torrent, aunque deberias ver si en tu pais de origen "
                        "estan permitidas dichas descargas. ES TU RESPONSABILIDAD.<p>"

                        "&iquest;Descargar torrent?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok)
        {
            ui->tabWidget->setCurrentIndex(1);
            ui->tabWidget_2->setCurrentPage(1);
        }
        ui->progressBar->hide();
        ui->pushButton_2->hide();
        ui->label_13->hide();
        ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;
    }
}

void recoverdrake::on_pushButton_56_clicked()
{
    QString path=tr("/home/%1/Documentos/");
    path=path.arg(user);
    fileNameTorrent = QFileDialog::getOpenFileName(this,QString::fromUtf8(tr("Abrir archivo torrent")),
                        path,trUtf8(tr("Archivo torrent (*.torrent)")));
    if (fileNameTorrent.isEmpty())
    {
        ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
        return;
    }
    ui->lineEdit_10->setText(fileNameTorrent);
}

void recoverdrake::on_pushButton_57_clicked()
{
    QString path=tr("/home/%1/Documentos/");
    path=path.arg(user);
    fileNameDirTorrent = QFileDialog::getExistingDirectory(this,QString::fromUtf8(tr("Que directorio utilizar?")),path,QFileDialog::ShowDirsOnly);
    if (fileNameDirTorrent.isEmpty())
    {
        ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
        return;
    }
    ui->lineEdit_13->setText(fileNameDirTorrent);
}

void recoverdrake::Comprobar()
{
    if (ui->radioButton->isChecked() == true)
    {
        ui->lineEdit_10->setEnabled(true);
        ui->lineEdit_11->setEnabled(false);
        ui->lineEdit_12->setEnabled(false);
    }
    if (ui->radioButton_2->isChecked() == true)
    {
        ui->lineEdit_10->setEnabled(false);
        ui->lineEdit_11->setEnabled(true);
        ui->lineEdit_12->setEnabled(false);
    }
    if (ui->radioButton_3->isChecked() == true)
    {
        ui->lineEdit_10->setEnabled(false);
        ui->lineEdit_11->setEnabled(false);
        ui->lineEdit_12->setEnabled(true);
    }
}

void recoverdrake::on_pushButton_53_clicked()
{
    if (ui->label_70->text() == "")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("Descarga de torrent ya iniciada. No puedes introducir mas torrent hasta que se acabe toda la lista o canceles.<p><b>Nota: No se perderan las descargas y continuara por donde se quedo")));
        m.exec();
        ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;
    }
    QString LimiteB, LimiteS, LimitarB, BLimite, LimitarS, SLimite, Verifica, Adicional, activo, Valor, TorrentP, TorrentN;
    int Contador = ui->tableWidget->rowCount();
    for(int i=0;i<Contador;i++)
    {
        QTableWidgetItem *item;
        item=new QTableWidgetItem;
        item = ui->tableWidget->item(i,0);
        activo = item->text();
        if (ui->radioButton->isChecked() == true)
            Valor=ui->lineEdit_10->text();
        else if (ui->radioButton_2->isChecked() == true)
            Valor=ui->lineEdit_11->text();
        else if (ui->radioButton_3->isChecked() == true)
            Valor=ui->lineEdit_12->text();
        if (activo == Valor)
        {
            QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr(QString::fromUtf8("Torrent ya introducido anteriormente. Cambia el torrent para poder continuar.")));
            m.exec();
            ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;
        }
    }
    if (ui->radioButton->isChecked() == true)
        Valor=ui->lineEdit_10->text();
    else if (ui->radioButton_2->isChecked() == true)
        Valor=ui->lineEdit_11->text();
    else if (ui->radioButton_3->isChecked() == true)
        Valor=ui->lineEdit_12->text();
    drakeSistema drake;
    TorrentP = drake.getTorrentP(Valor);
    TorrentN = drake.getTorrentN(Valor);
    TorrentP = TorrentP.remove("  Total Size: ");
    TorrentN = TorrentN.remove("  Name: ");
    if (ui->radioButton_4->isChecked() == true)
        LimiteB = "Sin limite de descarga: Si";
    else if (ui->radioButton_4->isChecked() == false)
        LimiteB = "Sin limite de descarga: No";
    if (ui->radioButton_5->isChecked() == true)
        LimiteS = "Sin limite de subida: Si";
    else if (ui->radioButton_5->isChecked() == false)
        LimiteS = "Sin limite de subida: No";
    if (ui->radioButton_7->isChecked() == true)
    {
        LimitarB = "Limitar descarga: Si";
        BLimite = ui->lineEdit_9->text();
    }
    else if (ui->radioButton_7->isChecked() == false)
    {
        LimitarB = "Limitar descarga: No";
        BLimite = "0";
    }
    if (ui->radioButton_6->isChecked() == true)
    {
        LimitarS = "Limitar subida: Si";
        SLimite = ui->lineEdit_8->text();
    }
    else if (ui->radioButton_6->isChecked() == false)
    {
        LimitarS = "Limitar subida: No";
        SLimite = "0";
    }
    if (ui->checkBox_6->isChecked() == true)
        Verifica = "Verificar: Si";
    else if (ui->checkBox_6->isChecked() == false)
        Verifica = "Verificar: No";
    if (ui->checkBox_7->isChecked() == true)
        Adicional = "Adicional: Si";
    else if (ui->checkBox_7->isChecked() == false)
        Adicional = "Adicional: No";
    ui->tabWidget_4->setCurrentPage(1);
    QTableWidgetItem *item1, *item2, *item3, *item4, *item5, *item6;
    item1=new QTableWidgetItem;
    item2=new QTableWidgetItem;
    item3=new QTableWidgetItem;
    item4=new QTableWidgetItem;
    item5=new QTableWidgetItem;
    item6=new QTableWidgetItem;
    if (ui->radioButton->isChecked() == true)
        item1->setText(ui->lineEdit_10->text());
    else if (ui->radioButton_2->isChecked() == true)
        item1->setText(ui->lineEdit_11->text());
    else if (ui->radioButton_3->isChecked() == true)
        item1->setText(ui->lineEdit_12->text());
    item2->setText(ui->lineEdit_13->text());
    item3->setText(""+LimiteB+"/"+LimiteS+"/"+LimitarB+"/"+BLimite+"/"+LimitarS+"/"+SLimite+"/"+Verifica+"/"+Adicional+"");
    item4->setText(tr("En cola"));
    item5->setText(TorrentP);
    item6->setText(TorrentN);
    iFilas=ui->tableWidget->rowCount();
    ui->tableWidget->insertRow(iFilas);
    ui->tableWidget->setItem(iFilas,0,item1);
    ui->tableWidget->setItem(iFilas,1,item2);
    ui->tableWidget->setItem(iFilas,2,item3);
    ui->tableWidget->setItem(iFilas,3,item4);
    ui->tableWidget->setItem(iFilas,4,item5);
    ui->tableWidget->setItem(iFilas,5,item6);
}

void recoverdrake::on_pushButton_51_clicked()
{
    int j;
    j=ui->tableWidget->currentRow();
    if (j == -1)
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr("No has seleccionado ningun torrent de la lista, por lo que no puedes borrar."));
        m.exec();
        ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);return;
    }
    else
    {
        ui->tableWidget->removeRow(j);
    }
}

void recoverdrake::on_pushButton_54_clicked()
{    
    QTableWidgetItem *item, *item1, *item2, *item3, *item5;
    QStringList Valores;
    QString activo, activo1, activo2, activo4, Value, LimiteD, LimiteS, LimitarD, ValorD, LimitarS, ValorS, Verificar, Adicional;
    QStringList comandos;
    int itemCount = ui->tableWidget->rowCount();
    for(int i=0;i<itemCount;i++)
    {
        item = ui->tableWidget->item(i,0);
        item1 = ui->tableWidget->item(i,1);
        item2 = ui->tableWidget->item(i,2);
        item3 = ui->tableWidget->item(i,3);
        item5 = ui->tableWidget->item(i,5);
        activo = item->text();
        activo1 = item1->text();
        activo2 = item2->text();
        activo4 = item5->text();
        item3->setText(tr("Descargando"));
        ui->tableWidget->setItem(itemCount,4,item3);
        ui->label_70->setText(activo4);
        Valores = activo2.split("/");
        for(int a=0;a<Valores.count();a++)
        {
            Value = Valores.value(a);
            if (a == 0)
            {
                if (Value == "Sin limite de descarga: Si")
                {
                    LimiteD="-D";
                }
                else if (Value == "Sin limite de descarga: No")
                {
                    LimiteD="";
                }
            }
            if (a == 1)
            {
                if (Value == "Sin limite de subida: Si")
                {
                    LimiteS="-U";
                }
                else if (Value == "Sin limite de subida: No")
                {
                    LimiteS="";
                }
            }
            if (a == 2)
            {
                if (Value == "Limitar descarga: Si")
                {
                    LimitarD="-d";
                }
                else if (Value == "Limitar descarga: No")
                {
                    LimitarD="";
                }
            }
            if (a == 3)
            {
                if (Value == "0")
                {
                    ValorD = "";
                }
                else if (Value != "0")
                {
                    ValorD = Value;
                }
            }
            if (a == 4)
            {
                if (Value == "Limitar subida: Si")
                {
                    LimitarS="-u";
                }
                else if (Value == "Limitar subida: No")
                {
                    LimitarS="";
                }
            }
            if (a == 5)
            {
                if (Value == "0")
                {
                    ValorS = "";
                }
                else if (Value != "0")
                {
                    ValorS = Value;
                }
            }
            if (a == 6)
            {
                if (Value == "Verificar: Si")
                {
                    Verificar="-v";
                }
                else if (Value == "Verificar: No")
                {
                    Verificar="";
                }
            }
            if (a == 7)
            {
                if (Value == "Adicional: Si")
                {
                    Adicional="-m";
                }
                else if (Value == "Adicional: No")
                {
                    Adicional="";
                }
            }
        }
        QString cmd1 = "su - %1 -c \"transmission-cli %2 %3 %4 %5 %6 %7 %8 %9 -w %10 %11\"";
        cmd1=cmd1.arg(user).arg(LimiteD).arg(LimiteS).arg(LimitarD).arg(ValorD).arg(LimitarS).arg(ValorS).arg(Verificar).arg(Adicional).arg(activo1).arg(activo);
        comandos<< cmd1;
    }
    if (mib != 0)
        delete mib;
    mib = new DrakeProcesos(comandos, this);
    connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibRecibir(QString)));
    connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
    int valor= comandos.count(); mib->Valor(valor,1); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
}

void recoverdrake::mibRecibir(QString valor)
{
    QStringList ValorInicial;
    QString ValorProgreso, ValorComp, ValorD, ValorT, TotalD, ValorS, ValorC;
    ValorInicial = valor.split(" ");    
    for(int a=0;a<ValorInicial.count();a++)
    {        
        if (a == 1)
        {
            ValorProgreso = ValorInicial.value(a);
            ValorProgreso = ValorProgreso.remove("%,");
            ValorProgreso = ValorProgreso.replace(",",".");
        }
        if (a == 2)
        {
            ValorComp = ValorInicial.value(a);
        }
        if (a == 4)
        {
            ValorD = ValorInicial.value(a);
        }
        if (a == 6)
        {
            ValorT = ValorInicial.value(a);
        }
        if (a == 8)
        {
            TotalD = ValorInicial.value(a);
            TotalD = TotalD.remove("(");
        }
        if (a == 13)
        {
            ValorS = ValorInicial.value(a);
            ValorS = ValorS.remove("(");
        }
        if (a == 15)
        {
            ValorC = ValorInicial.value(a);
        }
    }
    if (ValorComp == "dl")
    {
        ui->label_66->setText(ValorD);
        ui->label_68->setText(ValorT);
        ui->label_72->setText(TotalD);
        ui->label_77->setText(ValorS);
        ui->label_75->setText(ValorC);
        ui->progressBar_5->setValue(ValorProgreso.toFloat());
    }
}

void recoverdrake::on_pushButton_52_clicked()
{
    system("killall transmission-cli");
    ui->label_66->setText("");
    ui->label_68->setText("");
    ui->label_72->setText("");
    ui->label_77->setText("");
    ui->label_75->setText("");
    ui->progressBar_5->setValue(0);
}

void recoverdrake::on_actionInstalar_sqlitebrowser_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar sqlitebrowser.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Instalar sqlitebrowser")),
                           QString::fromUtf8(tr("<center><b>Instalar sqlitebrowser</b></center><p>"
                           "Para poder tramitar bases de datos sqlite es necesario instalar "
                           "este paquete.<p>"
                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"
                           "&iquest;Instalar sqlitebrowser?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok)
    {
        QString cm = QString::fromUtf8(tr("echo Instalando paquete solicitado..."));
        QString cmd = "urpmi --fuzzy -a --wget --auto sqlitebrowser";
        QStringList comandos;
        comandos<< cm << cmd;
        if (mib != 0)
            delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0);
        mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro);
        mib->iniciarProceso();
    }
    else
    {
        ui->tabWidget->setCurrentPage(pagina);
        ui->tabWidget_8->setCurrentPage(0);
        return;
    }
}

void recoverdrake::on_actionCrear_copia_de_seguridad_triggered()
{
        QString hora = QTime::currentTime().toString("hh:mm:ss");
        ui->textEdit_4->append(""+hora+"-- Accion: Crear copia de seguridad de la DB");
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Crear copia de seguridad de la DB")),
                        QString::fromUtf8(tr("<center><b>Crear copia de seguridad de la DB</b></center><p>"
                        "Desde aqui creamos una copia de seguridad de los datos y configuraciones de "
                        "de RecoverDrake.<p>"
                        "&iquest;Crear copia ahora?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok)
        {
            if (Window == 0)
            {
                Backup *backup=new Backup(this);
                if (Stilo == "A")
                    backup->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: 7pt; font-style: "+DatoTalla+"; font-family: Sans Serif; font-weight: bold");
                backup->exec();
            }
            else if (Window == 1)
            {                
                QMdiSubWindow *existing = buscarBackup();
                if(!existing)
                {
                    Conectar();
                    backup = new Backup;
                    ui->tabWidget->insertTab(Pestanas,ui->tab_2,tr("Backup"));
                    ui->tabWidget->setTabIcon(Pestanas,QIcon(":/Imagenes/guardar.png"));
                    ui->tabWidget->setCurrentPage(Pestanas);
                    Pagina1 = Pestanas;
                    ui->mdiArea->addSubWindow(backup);
                    connect(backup, SIGNAL(Cerrar()), this, SLOT(CerrarBackup()));
                    if (Stilo == "A")
                        backup->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                    backup->showMaximized();
                    backup->Valor("Quitar");
                    backup->exec();
                }
                else
                {
                    ui->tabWidget->setCurrentPage(Pagina1);
                    ui->mdiArea->setActiveSubWindow(existing);
                }
                backup->setWindowState(Qt::WindowMaximized);
            }
        }
}

QMdiSubWindow *recoverdrake::buscarBackup()
{
    foreach (QMdiSubWindow *window, ui->mdiArea->subWindowList())
    {
        if(Backup *a= qobject_cast<Backup *>(window->widget()))
        {
            Q_UNUSED(a);
            return window;
        }
    }
    return 0;
}

QMdiSubWindow *recoverdrake::buscarBurn()
{
    foreach (QMdiSubWindow *window, ui->mdiArea_2->subWindowList())
    {
        if(burn *b= qobject_cast<burn *>(window->widget()))
        {
            Q_UNUSED(b);
            return window;            
        }
    }
    return 0;
}

QMdiSubWindow *recoverdrake::buscarBusca()
{
    foreach (QMdiSubWindow *window, ui->mdiArea_3->subWindowList())
    {
        if(Busca *c= qobject_cast<Busca *>(window->widget()))
        {
            Q_UNUSED(c);
            return window;
        }
    }
    return 0;
}

QMdiSubWindow *recoverdrake::buscarConvAudio()
{
    foreach (QMdiSubWindow *window, ui->mdiArea_4->subWindowList())
    {
        if(ConvAudio *d= qobject_cast<ConvAudio *>(window->widget()))
        {
            Q_UNUSED(d);
            return window;
        }
    }
    return 0;
}

QMdiSubWindow *recoverdrake::buscarConvVideo()
{
    foreach (QMdiSubWindow *window, ui->mdiArea_5->subWindowList())
    {
        if(Conversor *e= qobject_cast<Conversor *>(window->widget()))
        {
            Q_UNUSED(e);
            return window;
        }
    }
    return 0;
}

QMdiSubWindow *recoverdrake::buscarPelis()
{
    foreach (QMdiSubWindow *window, ui->mdiArea_6->subWindowList())
    {
        if(dbpelis *e= qobject_cast<dbpelis *>(window->widget()))
        {
            Q_UNUSED(e);
            return window;
        }
    }
    return 0;
}

QMdiSubWindow *recoverdrake::buscarExec()
{
    foreach (QMdiSubWindow *window, ui->mdiArea_7->subWindowList())
    {
        if(examen *f= qobject_cast<examen *>(window->widget()))
        {
            Q_UNUSED(f);
            return window;
        }
    }
    return 0;
}

QMdiSubWindow *recoverdrake::buscarHelp()
{
    foreach (QMdiSubWindow *window, ui->mdiArea_8->subWindowList())
    {
        if(help *g= qobject_cast<help *>(window->widget()))
        {
            Q_UNUSED(g);
            return window;
        }
    }
    return 0;
}

QMdiSubWindow *recoverdrake::buscarLogs()
{
    foreach (QMdiSubWindow *window, ui->mdiArea_9->subWindowList())
    {
        if(Visualizar *h= qobject_cast<Visualizar *>(window->widget()))
        {
            Q_UNUSED(h);
            return window;
        }
    }
    return 0;
}

void recoverdrake::Conectar()
{    
    ui->toolBar->hide();
    ui->toolBar_2->hide();
    Pestanas=Pestanas+1;
}

void recoverdrake::Desconectar()
{    
    Pestanas=Pestanas-1;
    if (Pestanas > 1)
        ui->tabWidget->setCurrentPage(Pestanas);
    else
        ui->tabWidget->setCurrentPage(0);
}

void recoverdrake::on_tabWidget_currentChanged(int index)
{
    Q_UNUSED(index)
    ui->textEdit_9->setText(QString::fromUtf8(rpm));
    ui->textEdit_10->setText(QString::fromUtf8(Pci));
    ui->textEdit_6->setText(QString::fromUtf8(du));
    ui->textEdit_7->setText(QString::fromUtf8(repo));
    ui->textEdit_5->setText(QString::fromUtf8(Mod));
    ui->textEdit_8->setText(QString::fromUtf8(red));
    ui->textEdit_11->setText(QString::fromUtf8(infoPro));
    ui->textEdit_12->setText(QString::fromUtf8(Bios));
    ui->textEdit_13->setText(QString::fromUtf8(rpm));
    ui->textEdit_14->setText(QString::fromUtf8(Pci));
    ui->textEdit_15->setText(QString::fromUtf8(du));
    ui->textEdit_16->setText(QString::fromUtf8(repo));
    ui->textEdit_17->setText(QString::fromUtf8(Mod));
    ui->textEdit_18->setText(QString::fromUtf8(red));
    ui->textEdit_19->setText(QString::fromUtf8(infoPro));
    ui->textEdit_20->setText(QString::fromUtf8(Bios));
    if (Dato1 >= 1280 && Dato2 >= 1024)
    {
        if (ui->tabWidget->currentIndex() == 0)
        {
            if (Puntero == 1)
            {
                ui->toolBar_2->hide();
            }
            else if (Puntero == 0)
            {
                ui->toolBar_2->show();
            }
            if (Puntero1 == 1)
            {
                ui->toolBar->hide();
            }
            else if (Puntero1 == 0)
            {
                ui->toolBar->show();
            }
        }
        else if (ui->tabWidget->currentIndex() == 1)
        {
            if (Puntero == 1)
            {
                ui->toolBar_2->hide();
            }
            else if (Puntero == 0)
            {
                ui->toolBar_2->show();
            }
            if (Puntero1 == 1)
            {
                ui->toolBar->hide();
            }
            else if (Puntero1 == 0)
            {
                ui->toolBar->show();
            }
        }
        else if (ui->tabWidget->currentIndex() >= 2)
        {
            ui->toolBar->hide();
            ui->toolBar_2->hide();
        }
    }
    else
    {
        ui->toolBar->hide();
        ui->toolBar_2->hide();
    }
}

void recoverdrake::on_actionGrabador_de_CD_DVD_Interactivo_triggered()
{
        QString hora = QTime::currentTime().toString("hh:mm:ss");
        ui->textEdit_4->append(""+hora+"-- Accion: Grabar CD/DVD (Interactivo).");
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Grabar CD/DVD (Interactivo)")),
                               QString::fromUtf8(tr("<center><b>Grabar CD/DVD (Interactivo)</center></b><p>"
                               "Con esta opcion podemos crear un CD/DVD a partir de cualquier tipo de archivos.<p>"
                               "PRECAUCION: Cualquier disco que se introduzca SOBREESCRIBIRA "
                               "el contenido que hubiera por lo que se perderia su contenido original "
                               "y si fuera un regrabable, este sera formateado automaticamente, sin "
                               "previo aviso.<p>"
                               "<B>NOTA: Debes esperar a que termine completamente el "
                               "proceso seleccionado, el cual te sera notificado "
                               "cuando finalice en la consola de procesos.</B><p>"
                               "&iquest;Hacer Grabar CD/DVD (Interactivo)?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok)
        {
            if (Window == 0)
            {
                burn *quemar=new burn(this);
                if (Stilo == "A")
                    quemar->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                quemar->showMaximized();
                quemar->exec();
            }
            else if (Window == 1)
            {
                QMdiSubWindow *existing = buscarBurn();
                if(!existing)
                {                    
                    Conectar();
                    quemar = new burn;
                    ui->tabWidget->insertTab(Pestanas,ui->tab_31,tr("Grabador"));
                    ui->tabWidget->setTabIcon(Pestanas,QIcon(":/Imagenes/cd_burning_section.png"));
                    ui->tabWidget->setCurrentPage(Pestanas);
                    Pagina2 = Pestanas;
                    ui->mdiArea_2->addSubWindow(quemar);
                    connect(quemar, SIGNAL(Cerrar()), this, SLOT(CerrarQuemar()));
                    if (Stilo == "A")
                        quemar->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                    quemar->showMaximized();
                    quemar->Valor("Quitar");
                    quemar->exec();
                }
                else
                {
                    ui->tabWidget->setCurrentPage(Pagina2);
                    ui->mdiArea_2->setActiveSubWindow(existing);
                }
                quemar->setWindowState(Qt::WindowMaximized);
            }
        }
}

void recoverdrake::CerrarBackup()
{
    if (Pagina1 != 0)
    {
        ui->mdiArea->removeSubWindow(backup);
        ui->tabWidget->removeTab(ui->tabWidget->currentIndex());
        Pagina1=0;
        Desconectar();
    }
}

void recoverdrake::CerrarQuemar()
{
    if (Pagina2 != 0)
    {
        ui->mdiArea_2->removeSubWindow(quemar);
        ui->tabWidget->removeTab(ui->tabWidget->currentIndex());
        Pagina2=0;
        Desconectar();
    }
}

void recoverdrake::CerrarBuscar()
{
    if (Pagina3 != 0)
    {
        ui->mdiArea_3->removeSubWindow(buscar);
        ui->tabWidget->removeTab(ui->tabWidget->currentIndex());
        Pagina3=0;
        Desconectar();
    }
}

void recoverdrake::CerrarConvAudio()
{
    if (Pagina4 != 0)
    {
        ui->mdiArea_4->removeSubWindow(convAudio);
        ui->tabWidget->removeTab(ui->tabWidget->currentIndex());
        Pagina4=0;
        Desconectar();
    }
}

void recoverdrake::CerrarConvert()
{
    if (Pagina5 != 0)
    {
        ui->mdiArea_5->removeSubWindow(convert);
        ui->tabWidget->removeTab(ui->tabWidget->currentIndex());
        Pagina5=0;
        QSqlQuery Cancion(dbs);
        Cancion.exec("SELECT Posicion FROM Cancion WHERE id=1");
        Cancion.first();
        QSqlRecord record= Model2->record(0);
        record.setValue(0,1);
        record.setValue(1,CancionAnt);
        Model2->setRecord(0,record);
        Model2->submitAll();
        trayIcon->showMessage("Escuchando...",QString::fromUtf8(""+Titulo+""),QSystemTrayIcon::Information, 4000);
        connect(mediaObject, SIGNAL(currentSourceChanged(Phonon::MediaSource)), this, SLOT(sourceChanged(Phonon::MediaSource)));
        connect(mediaObject, SIGNAL(aboutToFinish()), this, SLOT(siguiente()));
        connect(mediaObject, SIGNAL(finished()), this, SLOT(final()));
        Desconectar();
    }
}

void recoverdrake::CerrarPelis()
{
    if (Pagina6 != 0)
    {
        ui->mdiArea_6->removeSubWindow(pelis);
        ui->tabWidget->removeTab(ui->tabWidget->currentIndex());
        Pagina6=0;
        Desconectar();
    }
}

void recoverdrake::CerrarTest()
{
    if (Pagina7 != 0)
    {
        ui->mdiArea_7->removeSubWindow(test);
        ui->tabWidget->removeTab(ui->tabWidget->currentIndex());
        Pagina7=0;
        Desconectar();
    }
}

void recoverdrake::CerrarHp()
{
    if (Pagina8 != 0)
    {
        ui->mdiArea_8->removeSubWindow(hp);
        ui->tabWidget->removeTab(ui->tabWidget->currentIndex());
        Pagina8=0;
        Desconectar();
    }
}

void recoverdrake::CerrarVisual()
{
    if (Pagina9 != 0)
    {
        ui->mdiArea_9->removeSubWindow(Visual);
        ui->tabWidget->removeTab(ui->tabWidget->currentIndex());
        Pagina9=0;
        Desconectar();
    }
}

void recoverdrake::on_calendarWidget_activated(QDate date)
{
    QString Fecha = date.toString("dd-MM-yyyy");

    // falta esta parte //
}

void recoverdrake::on_calendarWidget_clicked(QDate date)
{
    // Falta esta parte //
}

void recoverdrake::on_pushButton_68_clicked()
{
    on_actionMantenimiento_de_repositorios_Interactivo_triggered();
}

void recoverdrake::on_pushButton_69_clicked()
{
    on_actionActualizar_sistema_interactivo_triggered();
}

void recoverdrake::on_pushButton_70_clicked()
{
    on_actionMantenimiento_de_rpm_s_instalados_Interactivo_triggered();
}

void recoverdrake::on_pushButton_71_clicked()
{
    on_actionEliminiar_Recuperar_paquetes_huerfanos_interactivo_triggered();
}

void recoverdrake::on_pushButton_72_clicked()
{
    on_actionMantenimiento_de_rpm_s_triggered();
}

void recoverdrake::on_pushButton_73_clicked()
{
    on_actionTratamiento_de_Nucleos_Kernel_Interactivo_triggered();
}

void recoverdrake::on_pushButton_74_clicked()
{
    on_actionCrear_USB_Live_Multiboot_Interactivo_triggered();
}

void recoverdrake::on_pushButton_75_clicked()
{
    on_actionBuscador_triggered();
}

void recoverdrake::on_pushButton_103_clicked()
{
    on_actionCompilar_desde_las_fuentes_triggered();
}

void recoverdrake::on_pushButton_104_clicked()
{
    on_actionGrabador_de_CD_DVD_Interactivo_triggered();
}

void recoverdrake::on_pushButton_105_clicked()
{
    on_actionModificar_DB_del_Men_triggered();
}

void recoverdrake::on_pushButton_107_clicked()
{
    on_actionConversor_de_formatos_de_video_Interactivo_triggered();
}

void recoverdrake::on_pushButton_108_clicked()
{
    on_actionConversor_de_formatos_de_Audio_Interactivo_triggered();
}

void recoverdrake::on_pushButton_109_clicked()
{
    on_actionReproductor_de_Video_triggered();
}

void recoverdrake::on_pushButton_110_clicked()
{
    on_actionTelevision_por_Internet_triggered();
}

void recoverdrake::on_pushButton_106_clicked()
{
   on_actionSupervisar_red_privada_triggered();
}

void recoverdrake::on_pushButton_111_clicked()
{
    on_actionCrear_copia_de_seguridad_triggered();
}

void recoverdrake::on_pushButton_112_clicked()
{
    on_actionPeliculas_triggered();
}

void recoverdrake::on_pushButton_113_clicked()
{
    //on_actionMusica_triggered();
}

void recoverdrake::on_pushButton_114_clicked()
{
    //on_actionLibros_triggered();
}

void recoverdrake::on_pushButton_115_clicked()
{
    on_actionIniciar_sesion_remota_triggered();
}

void recoverdrake::on_actionSincronizador_de_datos_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Sincronizar datos.");
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Sincronizar datos")),
                           QString::fromUtf8(tr("<center><b>Sincronizar datos</center></b><p>"
                           "Con esta opcion podemos sincronizar datos y que solo se modifiquen en el destino "
                           "los datos que hayan sido modificados.<p>"
                           "&iquest;Sincronizar datos?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok)
    {
        if (Window == 0)
        {

            TotalSincrono *Sync = new TotalSincrono(this);
            if (Stilo == "A")
                Sync->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            Sync->Valor("",Logs);
            Sync->showMaximized();
            Sync->exec();
        }
        else if (Window == 1)
        {
            QMdiSubWindow *existing = buscarSincrono();
            if(!existing)
            {
                Conectar();
                Sync = new TotalSincrono;
                ui->tabWidget->insertTab(Pestanas,ui->tab_53,tr("Sincronizador"));
                ui->tabWidget->setTabIcon(Pestanas,QIcon(":/Imagenes/sustituir.png"));
                ui->tabWidget->setCurrentPage(Pestanas);
                Pagina10 = Pestanas;
                ui->mdiArea_10->addSubWindow(Sync);
                connect(Sync, SIGNAL(Cerrar()), this, SLOT(CerrarSync()));
                if (Stilo == "A")
                    Sync->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                Sync->showMaximized();
                Sync->Valor("Quitar",Logs);
                Sync->exec();
            }
            else
            {
                ui->tabWidget->setCurrentPage(Pagina10);
                ui->mdiArea_10->setActiveSubWindow(existing);
            }
            Sync->setWindowState(Qt::WindowMaximized);
        }
    }
}

QMdiSubWindow *recoverdrake::buscarSincrono()
{
    foreach (QMdiSubWindow *window, ui->mdiArea_10->subWindowList())
    {
        if(TotalSincrono *a= qobject_cast<TotalSincrono *>(window->widget()))
        {
            Q_UNUSED(a);
            return window;
        }
    }
    return 0;
}

QMdiSubWindow *recoverdrake::buscarActualiza()
{
    foreach (QMdiSubWindow *window, ui->mdiArea_11->subWindowList())
    {
        if(Update *a= qobject_cast<Update *>(window->widget()))
        {
            Q_UNUSED(a);
            return window;
        }
    }
    return 0;
}

QMdiSubWindow *recoverdrake::buscarUrpmi()
{
    foreach (QMdiSubWindow *window, ui->mdiArea_12->subWindowList())
    {
        if(urpmi *a= qobject_cast<urpmi *>(window->widget()))
        {
            Q_UNUSED(a);
            return window;
        }
    }
    return 0;
}

QMdiSubWindow *recoverdrake::buscarRpminst()
{
    foreach (QMdiSubWindow *window, ui->mdiArea_13->subWindowList())
    {
        if(rpminst *a= qobject_cast<rpminst *>(window->widget()))
        {
            Q_UNUSED(a);
            return window;
        }
    }
    return 0;
}

QMdiSubWindow *recoverdrake::buscarKernel()
{
    foreach (QMdiSubWindow *window, ui->mdiArea_14->subWindowList())
    {
        if(rpminst *a= qobject_cast<rpminst *>(window->widget()))
        {
            Q_UNUSED(a);
            return window;
        }
    }
    return 0;
}

QMdiSubWindow *recoverdrake::buscarHuerfanos()
{
    foreach (QMdiSubWindow *window, ui->mdiArea_15->subWindowList())
    {
        if(orphans *a= qobject_cast<orphans *>(window->widget()))
        {
            Q_UNUSED(a);
            return window;
        }
    }
    return 0;
}

QMdiSubWindow *recoverdrake::buscarRpm()
{
    foreach (QMdiSubWindow *window, ui->mdiArea_16->subWindowList())
    {
        if(Mrpm *a= qobject_cast<Mrpm *>(window->widget()))
        {
            Q_UNUSED(a);
            return window;
        }
    }
    return 0;
}

void recoverdrake::CerrarSync()
{
    if (Pagina10 != 0)
    {
        ui->mdiArea_10->removeSubWindow(Sync);
        ui->tabWidget->removeTab(ui->tabWidget->currentIndex());
        Pagina10=0;
        Desconectar();
    }
}

void recoverdrake::CerrarActualiza()
{
    if (Pagina11 != 0)
    {
        ui->mdiArea_11->removeSubWindow(Actualiza);
        ui->tabWidget->removeTab(ui->tabWidget->currentIndex());
        Pagina11=0;
        Desconectar();
    }
}

void recoverdrake::CerrarUrpmi()
{
    if (Pagina12 != 0)
    {
        ui->mdiArea_12->removeSubWindow(urpminst);
        ui->tabWidget->removeTab(ui->tabWidget->currentIndex());
        Pagina12=0;
        Desconectar();
    }
}

void recoverdrake::CerrarRpminst()
{
    if (Pagina13 != 0)
    {
        ui->mdiArea_13->removeSubWindow(Irpm);
        ui->tabWidget->removeTab(ui->tabWidget->currentIndex());
        Pagina13=0;
        Desconectar();
    }
}

void recoverdrake::CerrarKernel()
{
    if (Pagina14 != 0)
    {
        ui->mdiArea_14->removeSubWindow(Irpm);
        ui->tabWidget->removeTab(ui->tabWidget->currentIndex());
        Pagina14=0;
        Desconectar();
    }
}

void recoverdrake::CerrarHuerfanos()
{
    if (Pagina15 != 0)
    {
        ui->mdiArea_15->removeSubWindow(huerfanos);
        ui->tabWidget->removeTab(ui->tabWidget->currentIndex());
        Pagina15=0;
        Desconectar();
    }
}

void recoverdrake::CerrarRpm()
{
    if (Pagina16 != 0)
    {
        ui->mdiArea_16->removeSubWindow(rpmSet);
        ui->tabWidget->removeTab(ui->tabWidget->currentIndex());
        Pagina16=0;
        Desconectar();
    }
}

void recoverdrake::on_pushButton_117_clicked()
{
    on_actionSincronizador_de_datos_triggered();
}

void recoverdrake::on_actionCambiar_usuario_a_un_archivo_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Cambiar usuario/permisos/fecha a archivos/directorio (Interactivo).");
    Refrescar();
    ui->progressBar->hide();
    ui->pushButton_2->hide();
    ui->label_13->hide();
    ui->tabWidget->setCurrentPage(pagina);
    ui->tabWidget_8->setCurrentPage(0);
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Cambiar usuario/permisos/fecha a archivos/directorio (Interactivo)")),
                           QString::fromUtf8(tr("<center><b>Cambiar usuario/permisos/fecha a archivos/directorio (Interactivo)</center></b><p>"
                           "Con esta opcion podemos cambiar los permisos a archivos o a carpetas y poner a root o "
                           "a un usuario normal y control de escritura, lectura y ejecucion, tambien se puede cambiar la fecha.<p>"
                           "MUCHA PRECAUCION CON LO QUE HACES!!!<P>"
                           "No cambies los permisos asignados por el sistema a los archivos y carpetas que le pertenecen. "
                           "Podrias generar consecuencias nefastas en tu equipo, como que una aplicacion dejase de funcionar, "
                           "algun programa funcionara incorrectamente o incluso que no tuvieras acceso a parte del mismo.<p>"
                           "Extrema las precauciones cuando modifiques los permisos y los niveles de acceso y, sobre todo, "
                           "no hagas nada si no sabes qué estas haciendo o bien si no es estrictamente imprescindible.<p>"
                           "El sistema es tuyo y solo tu eres el responsable de lo que haces.<p>"
                           "&iquest;Cambiar usuario/permisos/fecha a archivos (Interactivo)?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok)
    {
        if (Window == 0)
        {
            Permisos *Permite=new Permisos(this);
            if (Stilo == "A")
                Permite->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            Permite->showMaximized();
            Permite->exec();
        }
        else if (Window == 1)
        {
            QMdiSubWindow *existing = buscarPermisos();
            if(!existing)
            {
                Conectar();
                Permite = new Permisos(this);
                ui->tabWidget->insertTab(Pestanas,ui->tab_73,tr("Permisos"));
                ui->tabWidget->setTabIcon(Pestanas,QIcon(":/Imagenes/drakauth-mdk.png"));
                ui->tabWidget->setCurrentPage(Pestanas);
                Pagina27 = Pestanas;
                ui->mdiArea_27->addSubWindow(Permite);
                connect(Permite, SIGNAL(Cerrar()), this, SLOT(CerrarPermisos()));
                if (Stilo == "A")
                    Permite->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                Permite->showMaximized();
                Permite->Valor("Quitar");
                Permite->exec();
            }
            else
            {
                ui->tabWidget->setCurrentPage(Pagina27);
                ui->mdiArea_27->setActiveSubWindow(existing);
            }
            Permite->setWindowState(Qt::WindowMaximized);
        }
    }
}

QMdiSubWindow *recoverdrake::buscarPermisos()
{
    foreach (QMdiSubWindow *window, ui->mdiArea_27->subWindowList())
    {
        if(Permisos *a= qobject_cast<Permisos *>(window->widget()))
        {
            Q_UNUSED(a);
            return window;
        }
    }
    return 0;
}

void recoverdrake::CerrarPermisos()
{
    if (Pagina27 != 0)
    {
        ui->mdiArea_27->removeSubWindow(Permite);
        ui->tabWidget->removeTab(ui->tabWidget->currentIndex());
        Pagina27=0;
        Desconectar();
    }
}

void recoverdrake::on_pushButton_55_clicked()
{
    on_actionCambiar_usuario_a_un_archivo_triggered();
}

void recoverdrake::on_actionMontar_HD_USB_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Montar/Desmontar USB.");
    Refrescar();
    ui->progressBar->hide();
    ui->pushButton_2->hide();
    ui->label_13->hide();ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Montar/Desmontar USB")),
                           QString::fromUtf8(tr("<center><b>Montar/Desmontar USB</center></b><p>"
                           "A veces intentamos montar automaticamente un USB y no hay forma de que "
                           "lo agarre aunque si que aparece en el sistema.<p>"
                           "MUCHA PRECAUCION CON LO QUE HACES!!!<P>"
                           "Con esta opcion lo que hacemos en montar o desmontar manualmente en una carpeta creada por nosotros.<p>"
                           "&iquest;Montar USB?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok)
    {
        Montaje *Montar=new Montaje(this);
        if (Stilo == "A")
            Montar->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        Montar->exec();
    }
}

void recoverdrake::on_actionCrea_tu_propio_kernel_personalizado_triggered()
{
    if (gcc == "0")
    {
        QMessageBox m;
        if (Stilo == "A")
            m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"gcc\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        if (makec== "0")
        {
            QMessageBox m;
            if (Stilo == "A")
                m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"make\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
            m.exec();
        }
        else
        {
            if (libncurses == "0")
            {
                QMessageBox m;
                if (Stilo == "A")
                    m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                if (arqt == "x86_64")
                    m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"lib64ncurses-devel\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
                else
                    m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"libncurses-devel\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
                m.exec();
            }
            else
            {
                if (libncursesw == "0")
                {
                    QMessageBox m;
                    if (Stilo == "A")
                        m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                    if (arqt == "x86_64")
                        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"lib64ncursesw-devel\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
                    else
                        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"libncursesw-devel\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
                    m.exec();
                }
                else
                {
                    QString hora = QTime::currentTime().toString("hh:mm:ss");
                    ui->textEdit_4->append(""+hora+"-- Accion: Crear y compilar nucleo personalizado (interactivo).");
                    int respuesta = 0;
                    if (Mensaka!="Activo")
                    {
                        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Crear y compilar nucleo personalizado (Interactivo)")),
                                           QString::fromUtf8(tr("<center><b>Crear y compilar nucleo (Interactivo)</center></b><p>"
                                           "Con esta opcion podemos ir realizando por pasos todo lo necesario para "
                                           "poder crear y compilar nuestro propio nucleo.<p>"
                                           "&iquest;Crear y compilar nucleo personalizado (Interactivo)?")), QMessageBox::Ok, QMessageBox::No);
                    }
                    else
                    {
                        respuesta=QMessageBox::Ok;
                    }
                    if (respuesta == QMessageBox::Ok)
                    {
                        if (Window == 0)
                        {
                            Kernel *Nucleo=new Kernel(this);
                            if (Stilo == "A")
                                Nucleo->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                            Nucleo->showMaximized();
                            Nucleo->exec();
                        }
                        else if (Window == 1)
                        {
                            QMdiSubWindow *existing = buscarNucleo();
                            if(!existing)
                            {
                                Conectar();
                                Nucleo = new Kernel;
                                ui->tabWidget->insertTab(Pestanas,ui->tab_63,tr("Crear/compilar Kernel"));
                                ui->tabWidget->setTabIcon(Pestanas,QIcon(":/Imagenes/nucleo.png"));
                                ui->tabWidget->setCurrentPage(Pestanas);
                                Pagina17 = Pestanas;
                                ui->mdiArea_17->addSubWindow(Nucleo);
                                connect(Nucleo, SIGNAL(Cerrar()), this, SLOT(CerrarNucleo()));
                                if (Stilo == "A")
                                    Nucleo->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                                Nucleo->showMaximized();
                                Nucleo->Valor("Quitar");
                                Nucleo->exec();
                            }
                            else
                            {
                                ui->tabWidget->setCurrentPage(Pagina17);
                                ui->mdiArea_17->setActiveSubWindow(existing);
                            }
                            Nucleo->setWindowState(Qt::WindowMaximized);
                        }
                    }
                }
            }
        }
    }
}

QMdiSubWindow *recoverdrake::buscarNucleo()
{
    foreach (QMdiSubWindow *window, ui->mdiArea_17->subWindowList())
    {
        if(Kernel *a= qobject_cast<Kernel *>(window->widget()))
        {
            Q_UNUSED(a);
            return window;
        }
    }
    return 0;
}

QMdiSubWindow *recoverdrake::buscarMakefile()
{
    foreach (QMdiSubWindow *window, ui->mdiArea_18->subWindowList())
    {
        if(makefile *a= qobject_cast<makefile *>(window->widget()))
        {
            Q_UNUSED(a);
            return window;
        }
    }
    return 0;
}

void recoverdrake::CerrarNucleo()
{
    if (Pagina17 != 0)
    {
        ui->mdiArea_17->removeSubWindow(Nucleo);
        ui->tabWidget->removeTab(ui->tabWidget->currentIndex());
        Pagina17=0;
        Desconectar();
    }
}

void recoverdrake::CerrarMakefile()
{
    if (Pagina18 != 0)
    {
        ui->mdiArea_18->removeSubWindow(make);
        ui->tabWidget->removeTab(ui->tabWidget->currentIndex());
        Pagina18=0;
        Desconectar();
    }
}

void recoverdrake::on_pushButton_58_clicked()
{
    on_actionCrea_tu_propio_kernel_personalizado_triggered();
}

void recoverdrake::on_actionAjustes_de_ecualizacion_triggered()
{    
    Sonido *Ecualizador=new Sonido(this);
    if (Stilo == "A")
        Ecualizador->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
    connect(Ecualizador, SIGNAL(Sound(QString, int, int, int, int, int, int, int, int, int, int)),
            this, SLOT(Ecualizar(QString, int, int, int, int, int, int, int, int, int, int)));
    Ecualizador->exec();
    QString Recibido = Ecualizador->Resultado;
    if (Recibido == "Negativo")
    {
        QString activo;
        int banda1,banda2,banda3,banda4,banda5,banda6,banda7,banda8,banda9,banda10;
        QSqlQuery Efectos(dbs);
        Efectos.exec("SELECT activo,banda1,banda2,banda3,banda4,banda5,banda6,banda7,banda8,banda9,banda10 FROM Ecualizador WHERE id=2");
        Efectos.first();
        if (Efectos.isValid())
        {
            activo=Efectos.value(0).toString();
            banda1=Efectos.value(1).toInt();
            banda2=Efectos.value(2).toInt();
            banda3=Efectos.value(3).toInt();
            banda4=Efectos.value(4).toInt();
            banda5=Efectos.value(5).toInt();
            banda6=Efectos.value(6).toInt();
            banda7=Efectos.value(7).toInt();
            banda8=Efectos.value(8).toInt();
            banda9=Efectos.value(9).toInt();
            banda10=Efectos.value(10).toInt();
        }
        if (activo == "Si")
        {
            QList<Phonon::EffectParameter> parameters = effect->parameters();
            foreach(Phonon::EffectParameter parameter, parameters)
            {
                if (parameter.name() == "band0")
                    effect->setParameterValue(parameter,banda1);
                else if (parameter.name() == "band1")
                    effect->setParameterValue(parameter,banda2);
                else if (parameter.name() == "band2")
                    effect->setParameterValue(parameter,banda3);
                else if (parameter.name() == "band3")
                    effect->setParameterValue(parameter,banda4);
                else if (parameter.name() == "band4")
                    effect->setParameterValue(parameter,banda5);
                else if (parameter.name() == "band5")
                    effect->setParameterValue(parameter,banda6);
                else if (parameter.name() == "band6")
                    effect->setParameterValue(parameter,banda7);
                else if (parameter.name() == "band7")
                    effect->setParameterValue(parameter,banda8);
                else if (parameter.name() == "band8")
                    effect->setParameterValue(parameter,banda9);
                else if (parameter.name() == "band9")
                    effect->setParameterValue(parameter,banda10);
            }
        }
        else
        {
            QList<Phonon::EffectParameter> parameters = effect->parameters();
            foreach(Phonon::EffectParameter parameter, parameters)
            {
                if (parameter.name() == "band0")
                    effect->setParameterValue(parameter,0);
                else if (parameter.name() == "band1")
                    effect->setParameterValue(parameter,0);
                else if (parameter.name() == "band2")
                    effect->setParameterValue(parameter,0);
                else if (parameter.name() == "band3")
                    effect->setParameterValue(parameter,0);
                else if (parameter.name() == "band4")
                    effect->setParameterValue(parameter,0);
                else if (parameter.name() == "band5")
                    effect->setParameterValue(parameter,0);
                else if (parameter.name() == "band6")
                    effect->setParameterValue(parameter,0);
                else if (parameter.name() == "band7")
                    effect->setParameterValue(parameter,0);
                else if (parameter.name() == "band8")
                    effect->setParameterValue(parameter,0);
                else if (parameter.name() == "band9")
                    effect->setParameterValue(parameter,0);
            }
        }
    }
}

void recoverdrake::Ecualizar(QString Valor, int band1, int band2, int band3, int band4, int band5, int band6, int band7, int band8, int band9, int band10)
{
    if (Valor == "Si")
    {
        QList<Phonon::EffectParameter> parameters = effect->parameters();
        foreach(Phonon::EffectParameter parameter, parameters)
        {
            if (parameter.name() == "band0")
                effect->setParameterValue(parameter,band1);
            else if (parameter.name() == "band1")
                effect->setParameterValue(parameter,band2);
            else if (parameter.name() == "band2")
                effect->setParameterValue(parameter,band3);
            else if (parameter.name() == "band3")
                effect->setParameterValue(parameter,band4);
            else if (parameter.name() == "band4")
                effect->setParameterValue(parameter,band5);
            else if (parameter.name() == "band5")
                effect->setParameterValue(parameter,band6);
            else if (parameter.name() == "band6")
                effect->setParameterValue(parameter,band7);
            else if (parameter.name() == "band7")
                effect->setParameterValue(parameter,band8);
            else if (parameter.name() == "band8")
                effect->setParameterValue(parameter,band9);
            else if (parameter.name() == "band9")
                effect->setParameterValue(parameter,band10);
        }
    }
    else
    {
        QList<Phonon::EffectParameter> parameters = effect->parameters();
        foreach(Phonon::EffectParameter parameter, parameters)
        {
            if (parameter.name() == "band0")
                effect->setParameterValue(parameter,0);
            else if (parameter.name() == "band1")
                effect->setParameterValue(parameter,0);
            else if (parameter.name() == "band2")
                effect->setParameterValue(parameter,0);
            else if (parameter.name() == "band3")
                effect->setParameterValue(parameter,0);
            else if (parameter.name() == "band4")
                effect->setParameterValue(parameter,0);
            else if (parameter.name() == "band5")
                effect->setParameterValue(parameter,0);
            else if (parameter.name() == "band6")
                effect->setParameterValue(parameter,0);
            else if (parameter.name() == "band7")
                effect->setParameterValue(parameter,0);
            else if (parameter.name() == "band8")
                effect->setParameterValue(parameter,0);
            else if (parameter.name() == "band9")
                effect->setParameterValue(parameter,0);
        }
    }
}

void recoverdrake::on_actionWifi_no_conecta_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Wifi falla la reconexion");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("wifi falla conexion")),
                           QString::fromUtf8(tr("<center><b>wifi no reconecta</b></center><p>"
                           "En algunas distros como Mageia se ha observado un error al reconectar la wifi mediante el applet "
                           "de drakconnet.<p>"
                           "Se puede intentar solucionar el problema mediante esta opcion.<p>"
                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"
                           "&iquest;Corregir fallo conexion wifi?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok)
    {

            QString cm= QString::fromUtf8(tr("echo Corregiendo el problema de fallo de conexion en wifi..."));
            QString cmd1 = "urpme --auto networkmanager";
            QString cmd2 = "urpme --auto knetworkmanager";
            QStringList comandos;
            comandos<< cm << cmd1 << cmd2;
            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
            connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count(); mib->Valor(valor,0); mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro); mib->iniciarProceso();
    }
    else
    {
        ui->tabWidget->setCurrentPage(pagina);ui->tabWidget_8->setCurrentPage(0);
        return;
    }
}

void recoverdrake::on_actionComparador_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Comparador de archivos y carpetas.");
    int respuesta = 0;
    if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Comparador de archivos y carpetas")),
                           QString::fromUtf8(tr("<center><b>Compara archivos y carpetas</b></center><p>"
                           "Con esta opcion podemos hacer una comparacion de archivos y tambien de carpetas "
                           "para saber si esta todo correcto.<p>"
                           "&iquest;Acceder al Comparador?")), QMessageBox::Ok, QMessageBox::No);
        }
    else
        {
            respuesta=QMessageBox::Ok;
        }
    if (respuesta == QMessageBox::Ok)
    {
        if (Window == 0)
        {
            Comparador *Compara=new Comparador(this);
            if (Stilo == "A")
                Compara->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            Compara->Valor("",Logs);
            Compara->showMaximized();
            Compara->exec();
        }
        else if (Window == 1)
        {
            QMdiSubWindow *existing = buscarCompara();
            if(!existing)
            {
                Conectar();
                Compara = new Comparador;
                ui->tabWidget->insertTab(Pestanas,ui->tab_65,tr("Comparador"));
                ui->tabWidget->setTabIcon(Pestanas,QIcon(":/Imagenes/Comparador.png"));
                ui->tabWidget->setCurrentPage(Pestanas);
                Pagina19 = Pestanas;
                ui->mdiArea_19->addSubWindow(Compara);
                connect(Compara, SIGNAL(Cerrar()), this, SLOT(CerrarCompara()));
                if (Stilo == "A")
                    Compara->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                Compara->showMaximized();
                Compara->Valor("Quitar",Logs);
                Compara->exec();
            }
            else
            {
                ui->tabWidget->setCurrentPage(Pagina19);
                ui->mdiArea_19->setActiveSubWindow(existing);
            }
            Compara->setWindowState(Qt::WindowMaximized);
        }
    }
}

QMdiSubWindow *recoverdrake::buscarCompara()
{
    foreach (QMdiSubWindow *window, ui->mdiArea_19->subWindowList())
    {
        if(Comparador *a= qobject_cast<Comparador *>(window->widget()))
        {
            Q_UNUSED(a);
            return window;
        }
    }
    return 0;
}

void recoverdrake::CerrarCompara()
{
    if (Pagina19 != 0)
    {
        ui->mdiArea_19->removeSubWindow(Compara);
        ui->tabWidget->removeTab(ui->tabWidget->currentIndex());
        Pagina19=0;
        Desconectar();
    }
}

void recoverdrake::on_pushButton_60_clicked()
{
    on_actionComparador_triggered();
}

void recoverdrake::on_pushButton_61_clicked()
{
    on_actionEtiquetado_de_mp3_triggered();
}

QMdiSubWindow *recoverdrake::buscarid3mp3()
{
    foreach (QMdiSubWindow *window, ui->mdiArea_20->subWindowList())
    {
        if(id3mp3 *a= qobject_cast<id3mp3 *>(window->widget()))
        {
            Q_UNUSED(a);
            return window;
        }
    }
    return 0;
}

void recoverdrake::Cerrarid3mp3()
{
    if (Pagina20 != 0)
    {
        ui->mdiArea_20->removeSubWindow(mp3);
        ui->tabWidget->removeTab(ui->tabWidget->currentIndex());
        Pagina20=0;
        QSqlQuery Cancion(dbs);
        Cancion.exec("SELECT Posicion FROM Cancion WHERE id=1");
        Cancion.first();
        QSqlRecord record= Model2->record(0);
        record.setValue(0,1);
        record.setValue(1,CancionAnt);
        Model2->setRecord(0,record);
        Model2->submitAll();
        connect(mediaObject, SIGNAL(currentSourceChanged(Phonon::MediaSource)), this, SLOT(sourceChanged(Phonon::MediaSource)));
        connect(mediaObject, SIGNAL(aboutToFinish()), this, SLOT(siguiente()));
        connect(mediaObject, SIGNAL(finished()), this, SLOT(final()));
        Desconectar();
    }
}

void recoverdrake::on_pushButton_62_clicked()
{
    this->on_actionAjustes_de_ecualizacion_triggered();
}

void recoverdrake::on_actionGrabadora_de_sonidos_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+tr("-- Accion: Grabador de sonidos."));
    QString ffmpeg = getRpm("ffmpeg");
    if (ffmpeg.contains(tr("instalado")) || ffmpeg.contains("installed") || ffmpeg.contains("instalado"))
    {
        QMessageBox m;
        if (Stilo == "A")
            m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"ffmpeg\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        QString pulseaudio = getRpm("pulseaudio-utils");
        if (pulseaudio.contains(tr("instalado")) || pulseaudio.contains("installed") || pulseaudio.contains("instalado"))
        {
            QMessageBox m;
            if (Stilo == "A")
                m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"pulseaudio-utils\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
            m.exec();
        }
        else
        {
            int respuesta = 0;
            if (Mensaka!="Activo")
                {
                    respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Grabador de sonidos")),
                                   QString::fromUtf8(tr("<center><b>Grabador de sonidos</b></center><p>"
                                   "Con esta utilidad podemos grabar el sonido que salga de los altavoces o por el "
                                   "microfono.<p>"
                                   "&iquest;Acceder al grabador de sonidos?")), QMessageBox::Ok, QMessageBox::No);
                }
            else
                {
                    respuesta=QMessageBox::Ok;
                }
            if (respuesta == QMessageBox::Ok)
            {
                if (Window == 0)
                {
                    Grabador *graba=new Grabador(this);
                    if (Stilo == "A")
                        graba->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                    graba->showMaximized();
                    CancionAnt = ActualRow;
                    disconnect(mediaObject, SIGNAL(currentSourceChanged(Phonon::MediaSource)), this, SLOT(sourceChanged(Phonon::MediaSource)));
                    disconnect(mediaObject, SIGNAL(aboutToFinish()), this, SLOT(siguiente()));
                    disconnect(mediaObject, SIGNAL(finished()), this, SLOT(final()));
                    graba->Valor("",Logs,mediaObject,audioOutput,path,effect);
                    graba->exec();
                }
                else if (Window == 1)
                {
                    QMdiSubWindow *existing = buscarGrabador();
                    if(!existing)
                    {
                        Conectar();
                        graba = new Grabador;
                        ui->tabWidget->insertTab(Pestanas,ui->tab_67,tr("Grabador"));
                        ui->tabWidget->setTabIcon(Pestanas,QIcon(":/Imagenes/grabain.png"));
                        ui->tabWidget->setCurrentPage(Pestanas);
                        Pagina21 = Pestanas;
                        ui->mdiArea_21->addSubWindow(graba);
                        connect(graba, SIGNAL(Cerrar()), this, SLOT(CerrarGrabador()));
                        if (Stilo == "A")
                            graba->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                        graba->showMaximized();
                        CancionAnt = ActualRow;
                        disconnect(mediaObject, SIGNAL(currentSourceChanged(Phonon::MediaSource)), this, SLOT(sourceChanged(Phonon::MediaSource)));
                        disconnect(mediaObject, SIGNAL(aboutToFinish()), this, SLOT(siguiente()));
                        disconnect(mediaObject, SIGNAL(finished()), this, SLOT(final()));
                        graba->Valor("Quitar",Logs,mediaObject,audioOutput,path,effect);
                        graba->exec();
                    }
                    else
                    {
                        ui->tabWidget->setCurrentPage(Pagina21);
                        ui->mdiArea_21->setActiveSubWindow(existing);
                    }
                    graba->setWindowState(Qt::WindowMaximized);
                }
            }
        }
    }
}

void recoverdrake::on_pushButton_63_clicked()
{
    on_actionGrabadora_de_sonidos_triggered();
}

QMdiSubWindow *recoverdrake::buscarGrabador()
{
    foreach (QMdiSubWindow *window, ui->mdiArea_21->subWindowList())
    {
        if(Grabador *a= qobject_cast<Grabador *>(window->widget()))
        {
            Q_UNUSED(a);
            return window;
        }
    }
    return 0;
}

void recoverdrake::CerrarGrabador()
{
    if (Pagina21 != 0)
    {
        ui->mdiArea_21->removeSubWindow(graba);
        ui->tabWidget->removeTab(ui->tabWidget->currentIndex());
        Pagina21=0;
        QSqlQuery Cancion(dbs);
        Cancion.exec("SELECT Posicion FROM Cancion WHERE id=1");
        Cancion.first();
        QSqlRecord record= Model2->record(0);
        record.setValue(0,1);
        record.setValue(1,CancionAnt);
        Model2->setRecord(0,record);
        Model2->submitAll();
        connect(mediaObject, SIGNAL(currentSourceChanged(Phonon::MediaSource)), this, SLOT(sourceChanged(Phonon::MediaSource)));
        connect(mediaObject, SIGNAL(aboutToFinish()), this, SLOT(siguiente()));
        connect(mediaObject, SIGNAL(finished()), this, SLOT(final()));
        Desconectar();
    }
}

void recoverdrake::on_actionActivar_control_de_vigilancia_de_error_de_sesiones_triggered(bool n)
{
    Refrescar();
    QMessageBox x;
    if (Stilo == "A")
        x.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
    bool opcion14;
    opcion14=ui->actionActivar_control_de_vigilancia_de_error_de_sesiones->isChecked();
    QSettings seting("myorg","Aplica");
    seting.setValue("opcion14",opcion14);
    if (n==true)
    {
        ui->actionActivar_control_de_vigilancia_de_error_de_sesiones->setIcon(QIcon(":/Imagenes/good.png"));
        QString hora = QTime::currentTime().toString("hh:mm:ss");
        ui->textEdit_4->append(""+hora+tr("-- Control de error de sesiones activado."));
        this->CtrlSesion();
        ControlSesion = new QTimer(this);
        connect(ControlSesion, SIGNAL(timeout()), this, SLOT(CtrlSesion()));
        ControlSesion->start(3600000);
        x.setText(tr("Se ha activado el control de errores de sesion.<p>Visualiza las ultimas lineas del archivo de errores en el caso de haberse generado."));
        x.exec();
    }
    else
    {
        ui->actionActivar_control_de_vigilancia_de_error_de_sesiones->setIcon(QIcon(""));
        QString hora = QTime::currentTime().toString("hh:mm:ss");
        ui->textEdit_4->append(""+hora+tr("-- Control de error de sesiones desactivado."));
        ControlSesion->stop();
        x.setText(tr("Se ha desactivado el control de errores de sesion.<p>""Utiliza esta opcion para volver a activarla."));
        x.exec();
    }
    ui->progressBar->hide();
    ui->pushButton_2->hide();
    ui->label_13->hide();
    ui->tabWidget->setCurrentPage(pagina);
    ui->tabWidget_8->setCurrentPage(0);
}

void recoverdrake::CtrlSesion()
{
    QString path="find /home/%1/.xsession-errors";
    path=path.arg(user);
    drakeSistema drake;
    QString ValorSesion = drake.getStart(path);
    if (ValorSesion != "")
    {
        QString DatoRuta = "/home/%1/.xsession-errors";
        DatoRuta=DatoRuta.arg(user);
        QString hora = QTime::currentTime().toString("hh:mm:ss");
        ui->textEdit_4->append(""+hora+tr("-- Accion: Listar fichero de errores de sesion."));
        QFile file1(DatoRuta);
        file1.open(QIODevice::ReadOnly | QIODevice::Text);
        QTextStream in1(&file1);
        QString ValorReg = in1.readAll();
        file1.close();
        if (Window == 0)
        {
            Visualizar *Visual=new Visualizar(this);
            if (Stilo == "A")
                Visual->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            Visual->Valor("","Error",ValorReg);
            Visual->showMaximized();
        }
        else if (Window == 1)
        {
            Visual = new Visualizar;
            QMdiSubWindow *existing = buscarLogs();
            if(!existing)
            {
                Conectar();
                ui->tabWidget->insertTab(Pestanas,ui->tab_51,tr("Errores de sesion"));
                ui->tabWidget->setTabIcon(Pestanas,QIcon(":/Imagenes/ojo2.png"));
                ui->tabWidget->setCurrentPage(Pestanas);
                Pagina9 = Pestanas;
                ui->mdiArea_9->addSubWindow(Visual);
                connect(Visual, SIGNAL(Cerrando()), this, SLOT(CerrarVisual()));
                Visual->Valor("Quitar","Error",ValorReg);
                Visual->showMaximized();
            }
            else
            {
                ui->tabWidget->setCurrentPage(Pagina9);
                ui->mdiArea_9->setActiveSubWindow(existing);
            }
            Visual->setWindowState(Qt::WindowMaximized);
        }
        system("su - "+user+" -c \"rm -f /home/"+user+"/.xsession-errors\"");
        ControlSesion->stop();
    }
}

void recoverdrake::on_actionConvertidor_de_medidas_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+tr("-- Accion: Conversor de unidades."));
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Conversor de unidades")),
                       QString::fromUtf8(tr("<center><b>Conversores</b></center><p>"
                       "Varias utilidades para convertir tiempo, temperatura, medidas e incluso calculo "
                       "de letra de DNI y DC de cuenta corriente.<p>"
                       "&iquest;Acceder al conversor de unidades?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok)
    {
        if (Window == 0)
        {
            ConversorUD *ConvUD=new ConversorUD(this);
            if (Stilo == "A")
                ConvUD->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            ConvUD->showMaximized();
            ConvUD->Valor("",Logs);
            ConvUD->exec();
        }
        else if (Window == 1)
        {
            QMdiSubWindow *existing = buscarConversor();
            if(!existing)
            {
                Conectar();
                ConvUD = new ConversorUD;
                ui->tabWidget->insertTab(Pestanas,ui->tab_68,tr("Conversor"));
                ui->tabWidget->setTabIcon(Pestanas,QIcon(":/Imagenes/medir.png"));
                ui->tabWidget->setCurrentPage(Pestanas);
                Pagina22 = Pestanas;
                ui->mdiArea_22->addSubWindow(ConvUD);
                connect(ConvUD, SIGNAL(Cerrar()), this, SLOT(CerrarConversor()));
                if (Stilo == "A")
                    ConvUD->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                ConvUD->showMaximized();
                ConvUD->Valor("Quitar",Logs);
                ConvUD->exec();
            }
            else
            {
                ui->tabWidget->setCurrentPage(Pagina22);
                ui->mdiArea_22->setActiveSubWindow(existing);
            }
            ConvUD->setWindowState(Qt::WindowMaximized);
        }
    }
}

void recoverdrake::on_pushButton_64_clicked()
{
    this->on_actionConvertidor_de_medidas_triggered();
}

void recoverdrake::on_actionAmule_2_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+tr("-- Accion: Solucionar error inicio de amule."));
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Error inicio de amule")),
               QString::fromUtf8(tr("<center><b>Solucionar error de inicio de amule</b></center><p>"
                  "Es posible que inicies amule y no inicie, debido a un problema con un fichero "
                  "corrupto de configuracion.<p>"
                  "Con esta utilidad se elimina el problema y podras volver a utilizarlo como antes.<p>"
                  "<B>NOTA: Debes esperar a que termine completamente el proceso seleccionado, "
                  "el cual te sera notificado cuando finalice en la consola de procesos.</B><p>"
                  "&iquest;Solucionar error inicio de amule?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta = QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok)
    {
        QString cmd =QString::fromUtf8(tr("echo Eliminando archivo corrupto de amule..."));
        QString cmd1="su - %1 -c \"rm -vf /home/%1/.amule/statistics.dat\"";
        cmd1=cmd1.arg(user);
        QString cmd2 =QString::fromUtf8(tr("echo Fichero eliminado correctamente."));
        QStringList comandos;
        comandos<< cmd << cmd1 << cmd2;
        if (mib != 0)
            delete otros;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
        connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count();
        mib->Valor(valor,0);
        mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro);
        mib->iniciarProceso();
    }
    else
    {
        ui->tabWidget->setCurrentPage(pagina);
        ui->tabWidget_8->setCurrentPage(0);
        return;
    }
}

QMdiSubWindow *recoverdrake::buscarConversor()
{
    foreach (QMdiSubWindow *window, ui->mdiArea_22->subWindowList())
    {
        if(ConversorUD *a= qobject_cast<ConversorUD *>(window->widget()))
        {
            Q_UNUSED(a);
            return window;
        }
    }
    return 0;
}

void recoverdrake::CerrarConversor()
{
    if (Pagina22 != 0)
    {
        ui->mdiArea_22->removeSubWindow(ConvUD);
        ui->tabWidget->removeTab(ui->tabWidget->currentIndex());
        Pagina22=0;
        Desconectar();
    }
}

void recoverdrake::on_actionCalculadora_triggered()
{
    if (Calculo == "Si")
    {
        QString hora = QTime::currentTime().toString("hh:mm:ss");
        ui->textEdit_4->append(""+hora+tr("-- Accion: Calculadora."));
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Calculadora")),
                           QString::fromUtf8(tr("<center><b>Calculadora</b></center><p>"
                           "Acceso a la calculadora.<p>"
                           "&iquest;Acceder a la calculadora?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok)
        {
            Calculo = "No";
            Calculadora *Calcula=new Calculadora(this);
            if (Stilo == "A")
                Calcula->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            Calcula->show();
            Calcula->exec();
            QString ValorCierre=Calcula->Terminado;
            if (ValorCierre == "Si")
                Calculo = "Si";
        }
    }
}

void recoverdrake::on_actionVlc_3_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+tr("-- Accion: Solucionar error inicio vlc."));
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Error inicio de vlc")),
               QString::fromUtf8(tr("<center><b>Solucionar error de inicio de vlc</b></center><p>"
                  "Es posible que inicies vlc y no inicie, debido a un problema con un fichero "
                  "corrupto de configuracion.<p>"
                  "Con esta utilidad se eliminar el problema y podras volver a utilizarlo como antes, pero "
                  "con la configuracion por defecto.<p>"
                  "<B>NOTA: Debes esperar a que termine completamente el proceso seleccionado, "
                  "el cual te sera notificado cuando finalice en la consola de procesos.</B><p>"
                  "&iquest;Solucionar error inicio de vlc?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta = QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok)
    {
        QString cmd =QString::fromUtf8(tr("echo Reseteando archivo de configuracion..."));
        QString cmd1="su - %1 -c \"vlc --reset-config\"";
        cmd1=cmd1.arg(user);
        QString cmd2 =QString::fromUtf8(tr("echo Fichero reseteado correctamente."));
        QStringList comandos;
        comandos<< cmd << cmd1 << cmd2;
        if (mib != 0)
            delete otros;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
        connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count();
        mib->Valor(valor,0);
        mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro);
        mib->iniciarProceso();
    }
    else
    {
        ui->tabWidget->setCurrentPage(pagina);
        ui->tabWidget_8->setCurrentPage(0);
        return;
    }
}

void recoverdrake::on_pushButton_65_clicked()
{
    this->on_actionClaves_triggered();
}

void recoverdrake::on_actionClaves_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+tr("-- Accion: DB de claves."));
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("DB de claves")),
                       QString::fromUtf8(tr("<center><b>Claves</b></center><p>"
                       "Guarda todas tus claves para tenerlas a mano, pudiendo encriptarlas para que nadie "
                       "pueda levantarlas.<p>"
                       "&iquest;Acceder a DB de claves?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok)
    {
        if (Window == 0)
        {
            dbclaves *Claves=new dbclaves(this);
            if (Stilo == "A")
                Claves->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            Claves->showMaximized();
            Claves->Valor("",Usu);
            Claves->exec();
        }
        else if (Window == 1)
        {
            QMdiSubWindow *existing = buscarClaves();
            if(!existing)
            {
                Conectar();
                Claves = new dbclaves;
                ui->tabWidget->insertTab(Pestanas,ui->tab_69,tr("DB Claves"));
                ui->tabWidget->setTabIcon(Pestanas,QIcon(":/Imagenes/security-mdk.png"));
                ui->tabWidget->setCurrentPage(Pestanas);
                Pagina23 = Pestanas;
                ui->mdiArea_23->addSubWindow(Claves);
                connect(Claves, SIGNAL(Cerrar()), this, SLOT(CerrarClaves()));
                if (Stilo == "A")
                    Claves->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                Claves->showMaximized();
                Claves->Valor("Quitar",Usu);
                Claves->exec();
            }
            else
            {
                ui->tabWidget->setCurrentPage(Pagina23);
                ui->mdiArea_23->setActiveSubWindow(existing);
            }
            Claves->setWindowState(Qt::WindowMaximized);
        }
    }
}

QMdiSubWindow *recoverdrake::buscarClaves()
{
    foreach (QMdiSubWindow *window, ui->mdiArea_23->subWindowList())
    {
        if(dbclaves *a= qobject_cast<dbclaves *>(window->widget()))
        {
            Q_UNUSED(a);
            return window;
        }
    }
    return 0;
}

void recoverdrake::CerrarClaves()
{
    if (Pagina23 != 0)
    {
        ui->mdiArea_23->removeSubWindow(Claves);
        ui->tabWidget->removeTab(ui->tabWidget->currentIndex());
        Pagina23=0;
        Desconectar();
    }
}

void recoverdrake::on_actionConfiguracion_visual_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+tr("-- Accion: Formatos de impresion visual."));
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Formatos de impresion visual")),
                       QString::fromUtf8(tr("<center><b>Formatos visuales</b></center><p>"
                       "Aqui puedes visualizar los modelos predefinidos de impresion y tambien "
                       "puedes definir nuevos o modificar los existentes de forma visual.<p>"
                       "&iquest;Configurar formatos de impresion?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok)
    {
        ReportVisual *VReport=new ReportVisual(this);
        if (Stilo == "A")
            VReport->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        VReport->showMaximized();
    }
}

void recoverdrake::on_actionGenerador_QR_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+tr("-- Accion: Generador de QR."));
    if (libqrencode == "0")
    {
        QMessageBox m;
        if (Stilo == "A")
            m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"libqrencode\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Generador de QR")),
                           QString::fromUtf8(tr("<center><b>QR</b></center><p>"
                           "Genera tus propios QR en 2D con esta aplicacion.<p>"
                           "&iquest;Generar QR?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
        {
            respuesta=QMessageBox::Ok;
        }
        if (respuesta == QMessageBox::Ok)
        {
            if (Window == 0)
            {
                qrcode *QR=new qrcode(this);
                if (Stilo == "A")
                    QR->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                QR->showMaximized();
                QR->Valor("");
                QR->exec();
            }
            else if (Window == 1)
            {
                QMdiSubWindow *existing = buscarQR();
                if(!existing)
                {
                    Conectar();
                    QR = new qrcode;
                    ui->tabWidget->insertTab(Pestanas,ui->tab_70,tr("Generador QR"));
                    ui->tabWidget->setTabIcon(Pestanas,QIcon(":/Imagenes/URI_www_kapyderi_blogspog.png"));
                    ui->tabWidget->setCurrentPage(Pestanas);
                    Pagina24 = Pestanas;
                    ui->mdiArea_24->addSubWindow(QR);
                    connect(QR, SIGNAL(Cerrar()), this, SLOT(CerrarQR()));
                    if (Stilo == "A")
                        QR->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                    QR->showMaximized();
                    QR->Valor("Quitar");
                    QR->exec();
                }
                else
                {
                    ui->tabWidget->setCurrentPage(Pagina24);
                    ui->mdiArea_24->setActiveSubWindow(existing);
                }
                QR->setWindowState(Qt::WindowMaximized);
            }
        }
    }
}

QMdiSubWindow *recoverdrake::buscarQR()
{
    foreach (QMdiSubWindow *window, ui->mdiArea_24->subWindowList())
    {
        if(qrcode *a= qobject_cast<qrcode *>(window->widget()))
        {
            Q_UNUSED(a);
            return window;
        }
    }
    return 0;
}

void recoverdrake::CerrarQR()
{
    if (Pagina24 != 0)
    {
        ui->mdiArea_24->removeSubWindow(QR);
        ui->tabWidget->removeTab(ui->tabWidget->currentIndex());
        Pagina24=0;
        Desconectar();
    }
}

void recoverdrake::on_pushButton_66_clicked()
{
    this->on_actionGenerador_QR_triggered();
}

void recoverdrake::on_actionComprimir_descomprimir_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+tr("-- Accion: Compresor/descompresor de archivos."));
    if (tar == "0")
    {
        QMessageBox m;
        if (Stilo == "A")
            m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"tar\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        if (gzip == "0")
        {
            QMessageBox m;
            if (Stilo == "A")
                m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"gzip\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
            m.exec();
        }
        else
        {
            if (bzip2 == "0")
            {
                QMessageBox m;
                if (Stilo == "A")
                    m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"bzip2\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
                m.exec();
            }
            else
            {
                if (zip == "0")
                {
                    QMessageBox m;
                    if (Stilo == "A")
                        m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                    m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"zip\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
                    m.exec();
                }
                else
                {
                    if (unzip == "0")
                    {
                        QMessageBox m;
                        if (Stilo == "A")
                            m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"unzip\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
                        m.exec();
                    }
                    else
                    {
                        if (zoo == "0")
                        {
                            QMessageBox m;
                            if (Stilo == "A")
                                m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                            m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"zoo\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
                            m.exec();
                        }
                        else
                        {
                            if (arj == "0")
                            {
                                QMessageBox m;
                                if (Stilo == "A")
                                    m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                                m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"arj\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
                                m.exec();
                            }
                            else
                            {
                                if (unrar == "0")
                                {
                                    QMessageBox m;
                                    if (Stilo == "A")
                                        m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                                    m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"unrar\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
                                    m.exec();
                                }
                                else
                                {
                                    if (a7z == "0")
                                    {
                                        QMessageBox m;
                                        if (Stilo == "A")
                                            m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                                        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"p7zip\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
                                        m.exec();
                                    }
                                    else
                                    {
                                        if (rar == "0")
                                        {
                                            QMessageBox m;
                                            if (Stilo == "A")
                                                m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                                            m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"rar\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
                                            m.exec();
                                        }
                                        else
                                        {
                                            int respuesta = 0;
                                            if (Mensaka!="Activo")
                                            {
                                                respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Compresor")),
                                                               QString::fromUtf8(tr("<center><b>Compresor/descompresor</b></center><p>"
                                                               "Genera tus propios archivos comprimidos en varios formatos estandar.<p>"
                                                               "&iquest;Generar Compresion/descompresion?")), QMessageBox::Ok, QMessageBox::No);
                                            }
                                            else
                                            {
                                                respuesta=QMessageBox::Ok;
                                            }
                                            if (respuesta == QMessageBox::Ok)
                                            {
                                                if (Window == 0)
                                                {
                                                    compresor *Kompresor=new compresor(this);
                                                    if (Stilo == "A")
                                                        Kompresor->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                                                    Kompresor->showMaximized();
                                                    Kompresor->Valor("",Logs);
                                                    Kompresor->exec();
                                                }
                                                else if (Window == 1)
                                                {
                                                    QMdiSubWindow *existing = buscarCompresor();
                                                    if(!existing)
                                                    {
                                                        Conectar();
                                                        Kompresor = new compresor;
                                                        ui->tabWidget->insertTab(Pestanas,ui->tab_71,tr("Kompresor"));
                                                        ui->tabWidget->setTabIcon(Pestanas,QIcon(":/Imagenes/comprimir.png"));
                                                        ui->tabWidget->setCurrentPage(Pestanas);
                                                        Pagina25 = Pestanas;
                                                        ui->mdiArea_25->addSubWindow(Kompresor);
                                                        connect(Kompresor, SIGNAL(Cerrar()), this, SLOT(CerrarCompresor()));
                                                        if (Stilo == "A")
                                                            Kompresor->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                                                        Kompresor->showMaximized();
                                                        Kompresor->Valor("Quitar",Logs);
                                                        Kompresor->exec();
                                                    }
                                                    else
                                                    {
                                                        ui->tabWidget->setCurrentPage(Pagina25);
                                                        ui->mdiArea_25->setActiveSubWindow(existing);
                                                    }
                                                    Kompresor->setWindowState(Qt::WindowMaximized);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

QMdiSubWindow *recoverdrake::buscarCompresor()
{
    foreach (QMdiSubWindow *window, ui->mdiArea_25->subWindowList())
    {
        if(compresor *a= qobject_cast<compresor *>(window->widget()))
        {
            Q_UNUSED(a);
            return window;
        }
    }
    return 0;
}

void recoverdrake::CerrarCompresor()
{
    if (Pagina25 != 0)
    {
        ui->mdiArea_25->removeSubWindow(Kompresor);
        ui->tabWidget->removeTab(ui->tabWidget->currentIndex());
        Pagina25=0;
        Desconectar();
    }
}

void recoverdrake::on_pushButton_116_clicked()
{
    this->on_actionComprimir_descomprimir_triggered();
}

void recoverdrake::on_actionRefrescar_dependencias_triggered()
{
    this->ActualizarTodo();
}

void recoverdrake::on_actionEncriptar_textos_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+tr("-- Accion: Encriptar texto."));
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Encriptador de texto")),
                       QString::fromUtf8(tr("<center><b>Encriptador de texto</b></center><p>"
                       "Esta utilidad sirve para encriptar un texto que quieras enviar sin que pueda "
                       "ser leido por otros, salvo que tenga los codigos para desencriptar.<p>"
                       "&iquest;Encriptar texto?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok)
    {
        if (Window == 0)
        {
            textencrip *Encriptar=new textencrip(this);
            if (Stilo == "A")
                Encriptar->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            Encriptar->showMaximized();
            Encriptar->Valor("",Logs);
            Encriptar->exec();
        }
        else if (Window == 1)
        {
            QMdiSubWindow *existing = buscarEncriptar();
            if(!existing)
            {
                Conectar();
                Encriptar = new textencrip;
                ui->tabWidget->insertTab(Pestanas,ui->tab_72,tr("Encriptador"));
                ui->tabWidget->setTabIcon(Pestanas,QIcon(":/Imagenes/Encriptar.png"));
                ui->tabWidget->setCurrentPage(Pestanas);
                Pagina26 = Pestanas;
                ui->mdiArea_26->addSubWindow(Encriptar);
                connect(Encriptar, SIGNAL(Cerrar()), this, SLOT(CerrarEncriptar()));
                if (Stilo == "A")
                    Encriptar->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                Encriptar->showMaximized();
                Encriptar->Valor("Quitar",Logs);
                Encriptar->exec();
            }
            else
            {
                ui->tabWidget->setCurrentPage(Pagina26);
                ui->mdiArea_26->setActiveSubWindow(existing);
            }
            Encriptar->setWindowState(Qt::WindowMaximized);
        }
    }
}

QMdiSubWindow *recoverdrake::buscarEncriptar()
{
    foreach (QMdiSubWindow *window, ui->mdiArea_26->subWindowList())
    {
        if(textencrip *a= qobject_cast<textencrip *>(window->widget()))
        {
            Q_UNUSED(a);
            return window;
        }
    }
    return 0;
}

void recoverdrake::CerrarEncriptar()
{
    if (Pagina26 != 0)
    {
        ui->mdiArea_26->removeSubWindow(Encriptar);
        ui->tabWidget->removeTab(ui->tabWidget->currentIndex());
        Pagina26=0;
        Desconectar();
    }
}

void recoverdrake::on_pushButton_118_clicked()
{
    this->on_actionEncriptar_textos_triggered();
}

void recoverdrake::on_actionIncompatiblidad_grub_con_grub_efi_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Solucion a problemas: Incompatibilidad de grub legacy con grub-efi.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Incompatibilidad de grub legacy")),
                           QString::fromUtf8(tr("<center><b>Grub legacy Vs. grub-efi</b></center><p>"
                           "No se puede instalar GRUB legacy si esta instalado el grub-efi, debido a que utilizar varias librerias "
                           "comunes para los dos sistemas, por lo que es "
                           "necesario desinstalarlo antes de poder instalar GRUB legacy.<p>"
                           "<B>NOTA: Tienes que entender que en el caso de inestabilidad por la eliminacion de "
                           "grub-efi, deberas volver a instalar el paquete eliminando el GRUB legacy.<p>"
                           "&iquest;Arregal incompatibilidad de GRUB legacy con grub-efi?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
        respuesta=QMessageBox::Ok;
    if (respuesta == QMessageBox::Ok)
    {
        QString cm =QString::fromUtf8(tr("echo Desinstalando paquete grub-efi..."));
        QString cmd = "urpme -a --auto grub-efi";
        QString cm1 =QString::fromUtf8(tr("echo Instalando paquete grub..."));
        QString cmd1 = "urpmi -a --auto --force grub";
        QStringList comandos;
        comandos<< cm << cmd << cm1 << cmd1;
        if (mib != 0)
        delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
        connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count();
        mib->Valor(valor,0);
        mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro);
        mib->iniciarProceso();
    }
    else
    {
        ui->tabWidget->setCurrentPage(pagina);
        ui->tabWidget_8->setCurrentPage(0);
        return;
    }
}

void recoverdrake::on_pushButton_119_clicked()
{
    ui->textEdit->setText("");
}

void recoverdrake::on_actionInstalar_paquetes_para_programar_en_QT_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Instalar paquetes de programacion en QT.");
    Refrescar();
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Instalar paquetes QT")),
                           QString::fromUtf8(tr("<center><b>Instalar paquetes QT</b></center><p>"
                           "Con esta utilidad solo para administrador y programador se instalan "
                           "todos los paquetes necesarios para poder programar y configurar qtcreator.<p>"
                           "<B>NOTA: Debes esperar a que termine completamente el "
                           "proceso seleccionado, el cual te sera notificado "
                           "cuando finalice en la consola de procesos.</B><p>"
                           "&iquest;Instalar paquetes QT?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
        respuesta=QMessageBox::Ok;
    if (respuesta == QMessageBox::Ok)
    {
        QString Version;
        QString cm = QString::fromUtf8(tr("echo Instalando paquetes solicitados..."));
        QString cmd = "urpmi --fuzzy -a --wget --auto qt-creator";
        QString cmd0 = "urpmi --fuzzy -a --wget --auto gstreamer-phonon-backend";
        QString cmd1 = "urpmi --fuzzy -a --wget --auto gcc-c++";
        QString cmd2 = "urpmi --fuzzy -a --wget --auto make";
        QString cmd3 = "urpmi --fuzzy -a --wget --auto gdb";
        QString cmd4, cmd5, cmd6, cmd7, cmd8, cmd9;
        if (QT_VERSION >= 0x050000)
        {
            cmd4 = "urpmi --fuzzy -a --wget --qt5";
            Version = "qt5";
        }
        else
        {
            cmd4 = "urpmi --fuzzy -a --wget --qt4";
            Version = "qt4";
        }
        if (arqt =="x86_64")
        {
            cmd5 = "urpmi --fuzzy -a --wget --auto lib64%1-devel";
            cmd5=cmd5.arg(Version);
            cmd6 = "urpmi --fuzzy -a --wget --auto lib64qtwebkit22-devel";
            cmd7 = "urpmi --fuzzy -a --wget --auto lib64qrencode-devel";
            cmd8 = "urpmi --fuzzy -a --wget --auto lib64qt-gstreamer-devel";
            cmd9 = "ln -sf /usr/lib64/kde4/plugins/phonon_backend /usr/lib64/%1/plugins/phonon_backend";
            cmd9=cmd9.arg(Version);
        }
        else
        {
            cmd5 = "urpmi --fuzzy -a --wget --auto lib%1-devel";
            cmd5=cmd5.arg(Version);
            cmd6 = "urpmi --fuzzy -a --wget --auto libqtwebkit22-devel";
            cmd7 = "urpmi --fuzzy -a --wget --auto libqrencode-devel";
            cmd8 = "urpmi --fuzzy -a --wget --auto libqt-gstreamer-devel";
            cmd9 = "ln -sf /usr/lib/kde4/plugins/phonon_backend /usr/lib/%1/plugins/phonon_backend";
            cmd9=cmd9.arg(Version);
        }
        QStringList comandos;
        comandos<< cm << cmd << cmd0 << cmd1 << cmd2 << cmd3 << cmd4 << cmd5 << cmd6 << cmd7 << cmd8 << cmd9;
        if (mib != 0)
            delete mib;
        mib = new DrakeProcesos(comandos, this);
        connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString))); connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
        connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
        int valor= comandos.count(); mib->Valor(valor,0);
        mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro);
        mib->iniciarProceso();
    }
    else
    {
        ui->tabWidget->setCurrentPage(pagina);
        ui->tabWidget_8->setCurrentPage(0);
        return;
    }
}

void recoverdrake::on_actionBorrar_archivos_especificos_recursivamente_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+tr("-- Accion: Borrado masivo por extension de archivo."));
    int respuesta = 0;
    if (Mensaka!="Activo")
    {
        respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Borrado masivo por extension")),
                       QString::fromUtf8(tr("<center><b>Borrado masivo por extension de archivos</b></center><p>"
                       "Esta utilidad sirve para poder borrar gran cantidad de datos y no tener que estar buscando "
                       "dentro del disco duro, ya que su motor lo que hace es ir localizando y borrando todos los "
                       "archivos de una misma extension de forma recursiva.<p>"
                       "Un claro ejemplo podrian ser los famosos Thumbs.db de guindows que a nosotros no nos dicen nada de nada.<p>"
                       "<B>MUY IMPORTANTE: Debes saber que una vez comience el proceso la eliminacion sera inmediata "
                       "por lo que antes de realizarlo se mostraran todos los archivos que seran borrados, no vaya a ser que "
                       "borres algo que no debieras. PROCEDE CON MUCHA PRECAUCION.</B><p>"
                       "&iquest;Borrar masivamente archivos por extension?")), QMessageBox::Ok, QMessageBox::No);
    }
    else
    {
        respuesta=QMessageBox::Ok;
    }
    if (respuesta == QMessageBox::Ok)
    {
        if (Window == 0)
        {
            Borrar *Delete=new Borrar(this);
            if (Stilo == "A")
                Delete->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
            Delete->showMaximized();
            Delete->Valor("");
            Delete->exec();
        }
        else if (Window == 1)
        {
            QMdiSubWindow *existing = buscarEncriptar();
            if(!existing)
            {
                Conectar();
                Delete = new Borrar;
                ui->tabWidget->insertTab(Pestanas,ui->tab_75,tr("Borrado masivo por extension"));
                ui->tabWidget->setTabIcon(Pestanas,QIcon(":/Imagenes/borrar.png"));
                ui->tabWidget->setCurrentPage(Pestanas);
                Pagina29 = Pestanas;
                ui->mdiArea_29->addSubWindow(Delete);
                connect(Delete, SIGNAL(Cerrar()), this, SLOT(CerrarBorrar()));
                if (Stilo == "A")
                    Delete->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                Delete->showMaximized();
                Delete->Valor("Quitar");
                Delete->exec();
            }
            else
            {
                ui->tabWidget->setCurrentPage(Pagina29);
                ui->mdiArea_29->setActiveSubWindow(existing);
            }
            Delete->setWindowState(Qt::WindowMaximized);
        }
    }
}

QMdiSubWindow *recoverdrake::buscarBorrar()
{
    foreach (QMdiSubWindow *window, ui->mdiArea_29->subWindowList())
    {
        if(Borrar *a= qobject_cast<Borrar *>(window->widget()))
        {
            Q_UNUSED(a);
            return window;
        }
    }
    return 0;
}

void recoverdrake::CerrarBorrar()
{
    if (Pagina29 != 0)
    {
        ui->mdiArea_29->removeSubWindow(Delete);
        ui->tabWidget->removeTab(ui->tabWidget->currentIndex());
        Pagina29=0;
        Desconectar();
    }
}

void recoverdrake::on_pushButton_120_clicked()
{
    this->on_actionBorrar_archivos_especificos_recursivamente_triggered();
}

void recoverdrake::on_actionModo_Administrador_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+"-- Accion: Modo administrador.");
    if (webmin == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"webmin\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Modo administrador")),
                               QString::fromUtf8(tr("<center><b>Acceso a modo administrador</b></center><p>"
                               "Mediante esta opcion podemos acceder al modo admin de "
                               "todas las configuraciones de root.<p>"
                               "<B>NOTA IMPORTANTE: No accedas sino sabes que hacer "
                               "ya que puedes desestabilizar el sistema raiz o sus bases de datos y ya no podras entrar.</B><p>"
                               "&iquest;Acceder al modo administrador?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
            respuesta=QMessageBox::Ok;
        if (respuesta == QMessageBox::Ok)
        {
            QString cm=QString::fromUtf8(tr("echo Accediendo al modo administrador..."));
            QString cmd = "su - %1 -c \"firefox https://localhost:10000/\"";
            cmd = cmd.arg(user);
            QStringList comandos;
            comandos<< cm << cmd;
            if (mib != 0)
            delete mib;
            mib = new DrakeProcesos(comandos, this);
            connect(mib, SIGNAL(publicarDatos(QString)), this, SLOT(mibEscribir(QString)));
            connect(mib, SIGNAL(progreso(QString)), this, SLOT(mibprogreso(QString)));
            connect(mib, SIGNAL(finProceso()), this, SLOT(mibFin()));
            int valor= comandos.count();
            mib->Valor(valor,3);
            mib->Mascara(cantidad51,cantidad50,cantidad49,DatoTalla,cantidad47,DatoNegro);
            mib->iniciarProceso();
        }
    }
}

void recoverdrake::on_actionTraductor_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+tr("-- Accion: Traductor."));
    if (IPconexion == "")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("Esta utilidad solo funciona si se tiene internet.<p>Comprueba que tengas acceso.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Traductor de texto")),
                           QString::fromUtf8(tr("<center><b>Traductor de texto</b></center><p>"
                           "Con esta utilidad podemos traducir un texto, un archivo o una pagina web.<p>"
                           "&iquest;Acceder al traductor?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
            respuesta=QMessageBox::Ok;
        if (respuesta == QMessageBox::Ok)
        {
            if (Window == 0)
            {
                Traductor *traduce=new Traductor(this);
                if (Stilo == "A")
                    traduce->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                traduce->showMaximized();
                traduce->Valor("");
                traduce->exec();
            }
            else if (Window == 1)
            {
                QMdiSubWindow *existing = buscarTraductor();
                if(!existing)
                {
                    Conectar();
                    traduce = new Traductor;
                    ui->tabWidget->insertTab(Pestanas,ui->tab_76,tr("Traductor"));
                    ui->tabWidget->setTabIcon(Pestanas,QIcon(":/Imagenes/traductor.png"));
                    ui->tabWidget->setCurrentPage(Pestanas);
                    Pagina30 = Pestanas;
                    ui->mdiArea_30->addSubWindow(traduce);
                    connect(traduce, SIGNAL(Cerrar()), this, SLOT(CerrarTraductor()));
                    if (Stilo == "A")
                        traduce->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                    traduce->showMaximized();
                    traduce->Valor("Quitar");
                    traduce->exec();
                }
                else
                {
                    ui->tabWidget->setCurrentPage(Pagina30);
                    ui->mdiArea_30->setActiveSubWindow(existing);
                }
                traduce->setWindowState(Qt::WindowMaximized);
            }
        }
    }
}

QMdiSubWindow *recoverdrake::buscarTraductor()
{
    foreach (QMdiSubWindow *window, ui->mdiArea_30->subWindowList())
    {
        if(Traductor *a= qobject_cast<Traductor *>(window->widget()))
        {
            Q_UNUSED(a);
            return window;
        }
    }
    return 0;
}

void recoverdrake::CerrarTraductor()
{
    if (Pagina30 != 0)
    {
        ui->mdiArea_30->removeSubWindow(traduce);
        ui->tabWidget->removeTab(ui->tabWidget->currentIndex());
        Pagina30=0;
        Desconectar();
    }
}

void recoverdrake::on_pushButton_121_clicked()
{
    this->on_actionTraductor_triggered();
}

void recoverdrake::on_tabWidget_5_currentChanged(int index)
{
    Q_UNUSED(index);
    if (ui->tabWidget_5->currentIndex() == 0)
        ui->textEdit_9->setText(QString::fromUtf8(rpm));
    if (ui->tabWidget_5->currentIndex() == 1)
        ui->textEdit_10->setText(QString::fromUtf8(Pci));
    if (ui->tabWidget_5->currentIndex() == 2)
        ui->textEdit_6->setText(QString::fromUtf8(du));
    if (ui->tabWidget_5->currentIndex() == 3)
        ui->textEdit_7->setText(QString::fromUtf8(repo));
    if (ui->tabWidget_5->currentIndex() == 4)
        ui->textEdit_5->setText(QString::fromUtf8(Mod));
    if (ui->tabWidget_5->currentIndex() == 5)
        ui->textEdit_8->setText(QString::fromUtf8(red));
    if (ui->tabWidget_5->currentIndex() == 6)
        ui->textEdit_11->setText(QString::fromUtf8(infoPro));
    if (ui->tabWidget_5->currentIndex() == 7)
        ui->textEdit_12->setText(QString::fromUtf8(Bios));
}

void recoverdrake::on_tabWidget_6_currentChanged(int index)
{
    Q_UNUSED(index);
    if (ui->tabWidget_6->currentIndex() == 0)
        ui->textEdit_13->setText(QString::fromUtf8(rpm));
    if (ui->tabWidget_6->currentIndex() == 0)
        ui->textEdit_14->setText(QString::fromUtf8(Pci));
    if (ui->tabWidget_6->currentIndex() == 2)
        ui->textEdit_15->setText(QString::fromUtf8(du));
    if (ui->tabWidget_6->currentIndex() == 3)
        ui->textEdit_16->setText(QString::fromUtf8(repo));
    if (ui->tabWidget_6->currentIndex() == 4)
        ui->textEdit_17->setText(QString::fromUtf8(Mod));
    if (ui->tabWidget_6->currentIndex() == 5)
        ui->textEdit_18->setText(QString::fromUtf8(red));
    if (ui->tabWidget_6->currentIndex() == 6)
        ui->textEdit_19->setText(QString::fromUtf8(infoPro));
    if (ui->tabWidget_6->currentIndex() == 7)
        ui->textEdit_20->setText(QString::fromUtf8(Bios));
}

void recoverdrake::on_tabWidget_8_currentChanged(int index)
{
    Q_UNUSED(index);
    ui->textEdit_9->setText(QString::fromUtf8(rpm));
    ui->textEdit_10->setText(QString::fromUtf8(Pci));
    ui->textEdit_6->setText(QString::fromUtf8(du));
    ui->textEdit_7->setText(QString::fromUtf8(repo));
    ui->textEdit_5->setText(QString::fromUtf8(Mod));
    ui->textEdit_8->setText(QString::fromUtf8(red));
    ui->textEdit_11->setText(QString::fromUtf8(infoPro));
    ui->textEdit_12->setText(QString::fromUtf8(Bios));
    ui->textEdit_13->setText(QString::fromUtf8(rpm));
    ui->textEdit_14->setText(QString::fromUtf8(Pci));
    ui->textEdit_15->setText(QString::fromUtf8(du));
    ui->textEdit_16->setText(QString::fromUtf8(repo));
    ui->textEdit_17->setText(QString::fromUtf8(Mod));
    ui->textEdit_18->setText(QString::fromUtf8(red));
    ui->textEdit_19->setText(QString::fromUtf8(infoPro));
    ui->textEdit_20->setText(QString::fromUtf8(Bios));
}

void recoverdrake::on_pushButton_122_clicked()
{
    this->on_actionConsola_triggered();
}

void recoverdrake::on_actionConsola_triggered()
{
    QString hora = QTime::currentTime().toString("hh:mm:ss");
    ui->textEdit_4->append(""+hora+tr("-- Accion: Consola."));
    if (libqTermWidget == "0")
    {
        QMessageBox m; if (Stilo == "A") m.setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
        m.setText(tr(QString::fromUtf8("No se puede utilizar esta funcion sin instalar la dependencia \"libqtermwidget-devel\" necesaria.<p>Lo primero es refrescar dependencias en el menu principal.<p>Si no se soluciona, realiza la instalacion para poder utilizarla, activando las dependencias en el menu principal.<P>Si sigue pasando puede ser debido a una corrupcion de la base de datos.<p>Realiza la opcion correspondiente de Solucion de problemas/Reconstruccion de la DB.")));
        m.exec();
    }
    else
    {
        int respuesta = 0;
        if (Mensaka!="Activo")
        {
            respuesta = QMessageBox::question(this, QString::fromUtf8(tr("Consola TermRDK")),
                           QString::fromUtf8(tr("<center><b>Consola TermRDK</b></center><p>"
                           "Con esta utilidad accedemos de forma embebida a una consola dentro "
                           "de RecoverDrake.<p>"
                           "&iquest;Acceder a la consola TermRDK?")), QMessageBox::Ok, QMessageBox::No);
        }
        else
            respuesta=QMessageBox::Ok;
        if (respuesta == QMessageBox::Ok)
        {
            if (Window == 0)
            {
                Terminal *Consola = new Terminal(this);
                if (Stilo == "A")
                    Consola->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                Consola->showMaximized();
                Consola->Valor("");
                Consola->exec();
            }
            else if (Window == 1)
            {
                QMdiSubWindow *existing = buscarConsola();
                if(!existing)
                {
                    Conectar();
                    Consola = new Terminal;
                    ui->tabWidget->insertTab(Pestanas,ui->tab_77,tr("TermRDK"));
                    ui->tabWidget->setTabIcon(Pestanas,QIcon(":/Imagenes/console-mdk.png"));
                    ui->tabWidget->setCurrentPage(Pestanas);
                    Pagina31 = Pestanas;
                    ui->mdiArea_31->addSubWindow(Consola);
                    connect(Consola, SIGNAL(Cerrar()), this, SLOT(CerrarConsola()));
                    if (Stilo == "A")
                        Consola->setStyleSheet("background-color: "+cantidad51+"; color: "+cantidad50+"; font-size: "+cantidad49+"pt; font-style: "+DatoTalla+"; font-family: "+cantidad47+"; font-weight: "+DatoNegro+"");
                    Consola->showMaximized();
                    Consola->Valor("Quitar");
                    Consola->exec();
                }
                else
                {
                    ui->tabWidget->setCurrentPage(Pagina31);
                    ui->mdiArea_31->setActiveSubWindow(existing);
                }
                Consola->setWindowState(Qt::WindowMaximized);
            }
        }
    }
}

QMdiSubWindow *recoverdrake::buscarConsola()
{
    foreach (QMdiSubWindow *window, ui->mdiArea_31->subWindowList())
    {
        if(Terminal *a= qobject_cast<Terminal *>(window->widget()))
        {
            Q_UNUSED(a);
            return window;
        }
    }
    return 0;
}

void recoverdrake::CerrarConsola()
{
    if (Pagina31 != 0)
    {
        ui->mdiArea_31->removeSubWindow(Consola);
        ui->tabWidget->removeTab(ui->tabWidget->currentIndex());
        Pagina31=0;
        Desconectar();
    }
}

void recoverdrake::on_actionRealizar_arreglo_bruto_triggered()
{
    //rm /var/lib/rpm/* -> vaciar toda la informacion de la carpeta rpm
    //urpmi --no-install -a {nombre del paquete} -> Descagar los paquetes necesarios que tenemos en la lista con urpmi
    //rpm -vhi --justdb *rpm -> poner la ruta donde se han descargado
    //ver tambien que para buscar el release en openmandriva hay que buscar en /etc/os-release
    //ver porque no aparece en /etc/passwd el usuario 500 (juanjomauriz)
}
